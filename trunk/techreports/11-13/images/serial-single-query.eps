%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: wattdepot-graphs.pdf
%%Creator: Adobe Acrobat 9.0.0
%%For: gelee
%%CreationDate: 5/12/11, 3:04 PM
%%BoundingBox: 0 0 342 180
%%HiResBoundingBox: 0 0 342 180
%%CropBox: 0 0 342 180
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 950 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c041 52.342996, 2008/05/07-21:37:19        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/pdf"
   xmp:CreateDate="2011-05-13T00:27:10Z"
   xmp:CreatorTool="Keynote"
   xmp:ModifyDate="2011-05-13T00:27:10Z"
   pdf:Keywords=""
   pdf:Producer="Mac OS X 10.6.7 Quartz PDFContext">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>George Lee</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:description>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Untitled</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -180 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 180 li
342 180 li
342 0 li
cp
clp
[1 0 0 1 -225 0 ]ct
gsave
203.6 225.4 mo
588.6 225.4 li
588.6 -62.4 li
203.6 -62.4 li
203.6 225.4 li
clp
203.6 225.4 mo
588.6 225.4 li
588.6 -62.5999 li
203.6 -62.5999 li
203.6 225.4 li
false sop
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
f
203.6 226.15 mo
588.6 226.15 li
588.6 -62.5999 li
203.6 -62.5999 li
203.6 226.15 li
f
275.976 139.299 mo
537.279 139.299 li
537.279 28.0103 li
275.976 28.0103 li
275.976 139.299 li
f
341.312 139 mo
341.312 28 li
341.688 28 li
341.688 139 li
341.312 139 li
.362127 .291661 .297215 .000183108 cmyk
f
406.312 139 mo
406.312 28 li
406.688 28 li
406.688 139 li
406.312 139 li
f
471.312 139 mo
471.312 28 li
471.688 28 li
471.688 139 li
471.312 139 li
f
.375977 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
537.5 139 mo
537.5 28 li
@
275.312 139.688 mo
275.312 28.312 li
275.688 28.312 li
275.688 139.688 li
275.312 139.688 li
.750271 .679713 .654902 .901945 cmyk
f
%ADOBeginSubsetFont: LKOBAA+HelveticaNeue Initial
ct_T42Dict begin
-0.348 -0.211 1.086 0.949
 256 array 0 1 255 {1 index exch /.notdef put} for  /LKOBAA+HelveticaNeue
Type42DictBegin
[<00010000000b000b000b000b6376742000000000000000bc000000026670
676d00000000000000c0000002b5676c79660000000000000510000020d8
686561640000000000000378000000366868656100000000000003b00000
0024686d747800000000000003d40000009c6c6f63610000000000000470
000000506d61787000000000000004c0000000206e616d65000000000000
04e000000028707265700000000000000508000000086764697200000000
000000000000000000140000b800002c4bb800095058b101018e59b801ff
85b844001db9000900035f5e2db800012c2020456944b001602db800022c
b800012a212db800032c2046b003254652582359208a208a49648a204620
686164b004254620686164525823658a592f20b00053586920b000545821
b040591b6920b000545821b0406559593a2db800042c2046b00425465258
238a592046206a6164b0042546206a61645258238a592ffd2db800052c4b
20b0032650585158b080441bb04044591b21212045b0c05058b0c0441b21
59592db800062c2020456944b001602020457d691844b001602db800072c
b800062a2db800082c4b20b003265358b0801bb040598a8a20b003265358
b0022621b0c08a8a1b8a235920b0032653582321b801008a8a1b8a235920
b80003265358b0032545b8014050582321b8014023211bb0032545232123
21591b2159442db800092c4b535845441b2121592db8000a2c4bb8000950
58b101018e59b801ff85b800441db9000900035f5e2db8000b2c20204569
44b001602db8000c2cb8000b2a212db8000d2c2046b00325465258235920
8a208a49648a204620686164b004254620686164525823658a592f20b000
53586920b000545821b040591b6920b000545821b0406559593a2db8000e
2c2046b00425465258238a592046206a6164b0042546206a61645258238a
592ffd2db8000f2c4b20b0032650585158b080441bb04044591b21212045
b0c05058b0c0441b2159592db800102c2020456944b001602020457d6918
44b001602db800112cb800102a2db800122c4b20b003265358b0801bb040
598a8a20b0032653582321b0c08a8a1b8a235920b0032653582321b80100
8a8a1b8a235920b0032653582321b801408a8a1b8a235920b80003265358
b0032545b8018050582321b8018023211bb003254523212321591b215944
2db800132c4b535845441b2121592d0000000001000000010000075d7fc3
5f0f3cf5011103e800000000b643600000000000c2d6d83cfea4ff2a043e
03b80000000900020000000000000001000003b8ff2b001c047cfea4ff5a
043e00010000000000000000000000000000002701f40032011600000116
005301160053022c002a022c0057022c0018022c001d022c001c022c0023
022c0026022c0032022c0028022c00220288fffa02ad004e02c0004e0367
005002f8002602ad004e023e000202190024025100430251002402190024
023e0024022c004000de00450207004500de004503550040022c0040023e
0024014d003d01f4001f013b0009022c004001f4000e01f400080000001c
001c004a00640110013601be02a402ea03820442046e057c06360666072a
079207dc0890092009460a040a9c0b3a0ba20c540ca60cd00d020d1c0db6
0dfe0e9e0ecc0f700fc210121032106c000100000027007f000700210002
00020000000000140000020002b500010001000000010012000100000000
0006001400005346544b4a552b48656c7665746963614e6575650000b800
0a2bb800002b00>
[8409 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 148 3 <00010053000000c2006f0003001bba0003000000032bb800031000ba0000
000100032bb8000010303137153335536f6f6f6f0000>LKOBAA+HelveticaNeue AddT42Char 
1 200 4 <0002002afff5020202c50017003300cbb800342fb800352fb8003410b800
18d0b800182fb80000dc411b000600000016000000260000003600000046
0000005600000066000000760000008600000096000000a6000000b60000
00c60000000d5d410500d5000000e5000000025db8003510b80026dcb800
0edc410500da000e00ea000e00025d411b0009000e0019000e0029000e00
39000e0049000e0059000e0069000e0079000e0089000e0099000e00a900
0e00b9000e00c9000e000d5d00ba0013001f00032bb8001310ba002d0007
00032bb8002d10303113343e0433321e0415140e0223222e0227141e0433
323e0435342e0423220e0484010911213224243221110901051b3c36363c
1b055a04101e344f37384e341e100404101e344f37374f341e1004015d1a
3f3f3c2d1c1c2d3c3f3f1a2863573c3c57632727545047361f1f36475054
2727545048362020364850540000>LKOBAA+HelveticaNeue AddT42Char 
1 544 5 <000100570000016402c5000a0023ba0001000900032bb800011000b80001
2fb800002fba0007000800032bb800071030312111230e03231533110164
410726374424b802c528341e0b44fe04>LKOBAA+HelveticaNeue AddT42Char 
1 620 6 <00010018000001ee02c5002b0091b8002d2fba0001000000032bb8000110
b8002d10b80022dcb8000bdc410500da000b00ea000b00025d411b000900
0b0019000b0029000b0039000b0049000b0059000b0069000b0079000b00
89000b0099000b00a9000b00b9000b00c9000b000d5db8002210b80016d0
b800162fb8000110b80018d0b800182f00ba0018001500032bba00270006
00032bb800271030311333263e0233321e0215140e02070e03072135213e
03373e0335342e0223220e022c55010f2235251c322516172d442d254436
230501cffe940627374221213e301d233c512e38583b1c01ca203f321f12
222f1d2538302f1c163242593f4b21332c2714152e39482f324c331b2643
5c00>LKOBAA+HelveticaNeue AddT42Char 
1 892 7 <0001001dfff501fe02c5003e0123ba0010001100032bb8001010ba001b00
0800032bb8001b10410500da000800ea000800025d411b00090008001900
080029000800390008004900080059000800690008007900080089000800
99000800a9000800b9000800c90008000d5dba001f0011001b111239ba00
220008001b111239b800222fba002c00110010111239b8002c2fb8002ddc
b8002210b80035dc410500da003500ea003500025d411b00090035001900
350029003500390035004900350059003500690035007900350089003500
99003500a9003500b9003500c90035000d5db8001b10b80040dc00ba000d
001600032bb8000d10ba0027003200032bb8002710ba003a000300032bb8
003a10b8000310b80001d0b800012fba001f0003003a111239b8003a10b8
003dd0303113153633321e0215140e022322262723061e0233323e023534
2627353e0135342e0223220e020733343e0233321615140e022b01222322
da181b20372818192a381f494c025501213e5836325942273f412a38213a
4f2e3551361d02551021332236481625311b120505040195480311233321
20332313574537563b1e1b365135405e0e02134a3031482e17223c54331f
382a1939391c2c1d0f00>LKOBAA+HelveticaNeue AddT42Char 
1 1492 9 <00010023fff501fd02b9002b00adb8002d2fba0016001700032bb8001610
b80002d0b8001610b80004d0b800042fb8002d10b80021dcb8000cdc4105
00da000c00ea000c00025d411b0009000c0019000c0029000c0039000c00
49000c0059000c0069000c0079000c0089000c0099000c00a9000c00b900
0c00c9000c000d5dba002a0017002111123900ba0011001c00032bb80011
10ba0001000000032bb8000110ba0026000700032bb8002610ba002a0007
0026111239303101352103173e0133321e0215140e0223222e0227231e03
33323e0235342e0223220607273701d6fea2424919412a243b2a17182937
1e20352717025501243e512e3e5d3e1f243e542f2449170226026e4bfe90
041e25182b3b232a3f2a1513232f1b304c331b2742552d3d5b3d1e191a02
cc000000>LKOBAA+HelveticaNeue AddT42Char 
1 2180 11 <00010032000001fd02b9000e001fba000a000900032bb8000a1000b80009
2fba0002000300032bb8000210303101352115210e0307333e0301fdfe35
017438614a2f065f052e495e027049503b8c9dab5a53b0a692000000>LKOBAA+HelveticaNeue AddT42Char 
1 3276 15 <0003004e0000028002ca000a0021002c0101ba0001000b00032bb8000110
ba0019000700032bb8001910410500da000700ea000700025d411b000900
070019000700290007003900070049000700590007006900070079000700
8900070099000700a9000700b9000700c90007000d5dba00290007001911
1239b800292f410500da002900ea002900025d411b000900290019002900
290029003900290049002900590029006900290079002900890029009900
2900a9002900b9002900c90029000d5db80012dcba0016000b0012111239
b8000110b80022d0b8001210b8002edc00ba0022000c00032bb8002210ba
000b000100032bb8000b10ba0000002300032bb8000010ba001600230000
1112393031133533321e0215140623011121323e0235342627353e013534
26272e0323033533321e0215140623adbe1f372a184751fee30159355137
1c464233373123102d343517a4d91e382b1a473f0197e307182c26393901
33fd3623394a27425c0e02145339364a150a0a0501fd86f70b1b2e233c44
0000>LKOBAA+HelveticaNeue AddT42Char 
1 3668 16 <0002004e0000029a02ca000e0019007db8001b2fba0001000f00032bb800
0110b8001b10b80016dcb80007dc410500da000700ea000700025d411b00
090007001900070029000700390007004900070059000700690007007900
07008900070099000700a9000700b9000700c90007000d5d00ba00000010
00032bb8000010ba000f000100032bb8000f103031371133321e0215140e
0423031133323e0235342623ada0425a39191b2a35363010fdf559825428
b2a550022a25476540425d3e241305027afd36325f8b5aaca8000000>LKOBAA+HelveticaNeue AddT42Char 
1 3876 17 <000100500000031702ca000e0057ba0003000000032bb8000310ba000b00
0800032bb8000b10ba000d0000000b11123900b800012fb800052fb80009
2fb800002fb8000b2fba000400010000111239ba000800010000111239ba
000d000100001112393031131133113313331333113311230b01505a02df
51df025a82e2e102cafd360252fdae0252fdae02cafda80258000000>LKOBAA+HelveticaNeue AddT42Char 
1 5128 22 <00020043fff5022d02ca0018002c00adb8002e2fba0018000000032bb800
1810b80002d0b8001810b80004d0b800042fb8002e10b8000edcb8001810
b80016d0b800162fb8000e10b80019dc410500da001900ea001900025d41
1b0009001900190019002900190039001900490019005900190069001900
790019008900190099001900a9001900b9001900c90019000d5db8001810
b80023d0b800232f00b800002fba001e000900032bb8001e10ba00130028
00032bb8001310303113113335331e0333323e0235342e02232206072311
01140e0223222e0235343e0233321e024355020e292e2f133b593b1d1e3b
593c365a1502013b10243b2c2c3e271211263c2b293d271302cafd364517
1f12082a49623737624b2c272b010bfe3d26483822213647262446372220
36450000>LKOBAA+HelveticaNeue AddT42Char 
1 5748 24 <00020024fff502030211000a0026005bba0014001f00032bb8001410ba00
15000000032bb8001510b8001410b80001d0b8000010b8000cd0b8000c2f
00ba000f002400032bb8000f10ba001a000600032bb8001a10ba00010014
00032bb8000110b8002410b8000cdc303101213e0333321e0217230e0123
222e023721362e0223220e02151e0333323601a7fed70216263521203527
1754540b45362a3e28120101830215375b4535594124021f3e5b3e587401
341e352817172736ae33321c2f3d222f6858392848623b3b64482858>LKOBAA+HelveticaNeue AddT42Char 
1 5956 25 <00020024ff2f01fe02110028003c00bdba002e000c00032bb8002e10ba00
01000200032bb8000110b8000210b80038d0b800382fba00040002003811
1239b8000210b80015d0411b0006002e0016002e0026002e0036002e0046
002e0056002e0066002e0076002e0086002e0096002e00a6002e00b6002e
00c6002e000d5d410500d5002e00e5002e00025dba0021000c002e111239
b800212fb80020dcb8000110b8003edc00ba001b002600032bb8001b10ba
0007003300032bb8000710ba0029001100032bb800291030312511231523
2e0123220e0215141e02333236373315140e0223222e0227231e03333236
27222e0235343e0233321e0215140e0201fe5001175231435c38181d3a56
3a3259160211263a2a152e271b015502283d4b247c74ee2a38220e11253a
292838231011243b2c01d94a2b2b334f612e355f472a2d30222b48331d09
1420172a3a24107e98233946232544341f203542222448392300>LKOBAA+HelveticaNeue AddT42Char 
1 6560 28 <000100450000020702ca000b0033ba000b000000032bb8000b10b80002d0
00b800012fb800052fb800002fba000800010000111239ba000a00010000
1112393031131133353713330337230711455550b16cdccd72ec02cafd36
c44afef20149bce201a7>LKOBAA+HelveticaNeue AddT42Char 
1 6660 29 <000100450000009a02ca00030017ba0003000000032bb800031000b80001
2fb800002f303113113311455502cafd3602ca000000>LKOBAA+HelveticaNeue AddT42Char 
1 7020 31 <00010040000001ec021100170045ba0003000000032bb8000310ba000e00
0b00032bb8000e10b8000310b80015d0b800152fba001600000003111239
00b800012fb8000c2fba0013000800032bb8001310303113113311343e02
33321615113311342e022322072335405513263927313855112a44337335
020205fdfb0124233b2c183830fea201542a45321c5e5200>LKOBAA+HelveticaNeue AddT42Char 
1 7164 32 <00020024fff5021a02110013002700cbb800282fb800292fb8002810b800
14d0b800142fb80000dc411b000600000016000000260000003600000046
0000005600000066000000760000008600000096000000a6000000b60000
00c60000000d5d410500d5000000e5000000025db8002910b8001edcb800
0adc410500da000a00ea000a00025d411b0009000a0019000a0029000a00
39000a0049000a0059000a0069000a0079000a0089000a0099000a00a900
0a00b9000a00c9000a000d5d00ba000f001900032bb8000f10ba00230005
00032bb8002310303113343e0233321e0215140e0223222e0227141e0233
323e0235342e0223220e027e192c3b21213b2c19192c3b21213b2c195a20
405e3d3e5d402020405d3e3d5e402001022f49321a1a32492f2f49311a1a
31492f39624929294962393963492a2a49630000>LKOBAA+HelveticaNeue AddT42Char 
1 7484 33 <0001003d0000014d0213000e0027ba0003000100032bb8000310b8000dd0
b8000d2f00b800012fba0009000800032bb8000910303113113335343e02
333526060723353d55142c4833455a1f020205fdfbe6324d361c5a023c3f
6d00>LKOBAA+HelveticaNeue AddT42Char 
1 8292 38 <00010008ff3201ec02050016002300b800012fb800052fb800122fba0004
00120001111239ba000e0012000111123930310513230323032313070e01
23222627151e0133323e02010be15a91029760cd230c201a0d190c0e1e0f
1d2a231d440249fe5901a7fdfe57171808044e05040f21340000>LKOBAA+HelveticaNeue AddT42Char 
1 0 0 <00020032000001c2020000030007000b00b800052fb800042f3031252111
212511211101bafe800180fe7801900801f008fe000200000000>LKOBAA+HelveticaNeue AddT42Char 
LKOBAA+HelveticaNeue /CharStrings get begin
/period 3 def
/zero 4 def
/one 5 def
/two 6 def
/three 7 def
/five 9 def
/seven 11 def
/B 15 def
/D 16 def
/M 17 def
/b 22 def
/e 24 def
/g 25 def
/k 28 def
/l 29 def
/n 31 def
/o 32 def
/r 33 def
/y 38 def
end
LKOBAA+HelveticaNeue /Encoding get
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 53 /five put
dup 55 /seven put
dup 66 /B put
dup 68 /D put
dup 77 /M put
dup 98 /b put
dup 101 /e put
dup 103 /g put
dup 107 /k put
dup 108 /l put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 121 /y put
pop
end
%ADOEndSubsetFont
/GTSTCD+HelveticaNeue /LKOBAA+HelveticaNeue findfont ct_VMDictPut/GTSTCD+HelveticaNeue*1 [46{/.notdef}rp /period /.notdef /zero /one /two /three /.notdef /five /.notdef /seven 10{/.notdef}rp /B /.notdef /D 8{/.notdef}rp /M 20{/.notdef}rp /b 2{/.notdef}rp /e /.notdef /g 3{/.notdef}rp /k /l /.notdef /n /o 2{/.notdef}rp /r 6{/.notdef}rp /y 134{/.notdef}rp]GTSTCD+HelveticaNeue nfGTSTCD+HelveticaNeue*1 [5.26367 0 0 -5.26367 0 0 ]msf256.345 48.4385 mo(Derby)[3.7056 2.8266 1.75275 3.12137 0 ]xsh242.702 85.5348 mo(BerkeleyDB)[3.60559 2.82661 1.75276 2.73183 2.82661 1.16852 2.8266 2.63184 3.7056 0 ]xsh246.497 122.631 mo(MongoDB)[4.58466 3.02138 2.92661 3.02136 3.02139 3.7056 0 ]xsh274.324 146.819 mo(0)sh334.529 146.819 mo(0.175)[2.92657 1.46332 2.92661 2.92657 0 ]xsh399.854 146.819 mo(0.350)[2.92657 1.46332 2.92661 2.92657 0 ]xsh465.18 146.819 mo(0.525)[2.92657 1.46332 2.92661 2.92657 0 ]xsh530.506 146.819 mo(0.700)[2.92657 1.46332 2.92657 2.92657 0 ]xshgrestore
275.976 132 mo
275.688 132 li
275.688 109 li
275.976 109 li
275.976 132 li
275.312 132 mo
275 132 li
275 109 li
275.312 109 li
275.312 132 li
false sop
gsave
/0 /CSA get_res setcolorspace
clp
[1 0 0 -1 225 180 ]ct
[3 0 0 25 49 47 ]ct
snap_to_device
<<
/T 1
/W 3 
/H 25 
/M[3 0 0 -25 0 25 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!!!-)$OdFc'GN>>(HWHN4W##!(`5CQ(d/]Q4W##!(`5CQ(d/]Q4W##!(`5CQ(d/]Q4W##!(Df+G
'/'\")$0jD!WiQ~>
<~!!!!!!!!-)$4@4]&eZf3'fHgC3#38h()AkF(-!'F3#38h()AkF(-!'F3#38h()AkF(-!'F3#38h'brS<
&M".o(BOXA!WiN~>
<~!!!!!!!!-)$4@4]&eZf3'f?^@2\d&d'brYB'fQjB2\d&d'brYB'fQjB2\d&d'brYB'fQjB2\d&d'brP;
&Ln(n(BOXA!WiN~>
<~!!!!!!!!0+%Lrsq(`5CU*(M"i8f\pE*?@`m*D.=m8f\pE*?@`m*D.=m8f\pE*?@`m*D.=m8f\pE*#qEa
(HDp6*s2TM!s8c~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
449 132 mo
406.688 132 li
406.688 130.276 li
446.943 130.276 li
446.943 124 li
449 124 li
449 132 li
406.312 132 mo
341.688 132 li
341.688 130.276 li
406.312 130.276 li
406.312 132 li
341.312 132 mo
275.976 132 li
275.976 109 li
341.312 109 li
341.312 111.477 li
276.164 111.477 li
276.164 130.276 li
341.312 130.276 li
341.312 132 li
449 117 mo
446.943 117 li
446.943 111.477 li
406.688 111.477 li
406.688 109 li
449 109 li
449 117 li
406.312 111.477 mo
341.688 111.477 li
341.688 109 li
406.312 109 li
406.312 111.477 li
gsave
/0 /CSA get_res setcolorspace
clp
[1 0 0 -1 225 180 ]ct
[175 0 0 25 50 47 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 175 
/H 25 
/M[175 0 0 -25 0 25 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 175 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 175 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 175 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 175 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
JcLB&JcLB&JcLB&JcLB&JcLB&JcPcM!X&lBL_A/L#7q=J!<E<1&%E1G&-i^S"T\W,$4l>3Je7Ja#7h1G
!<E?6'U]`R('bNa"p+i7+"bShOtd4p+q=YU$QLTHqCR:Ni[kEe.3B!#!XftrW[tD+#Upf(!WiiY2ETYU
Jij<#2^o=@!u*O^Mbh\q#>-lj"9]>i6+][\8-_L:'a"ON/jS_mJk,9"#=:*Z!s9B'=.E[5?jKn$*!HK^
4&oS2?B8Cu=$R]-";Ngh<;fgK<Sg^]:HB<q";Ndf;m'*&<!5rV(^'sD*(OU[L2kda#\d!U"U,`+='rCD
VI0[45o^"1(-#)jk#[.9oiDDr3uJ/('fSlfQWD(+#>dH!"9]`;BuY4ZEsQPV+U&#d4]c"b@"MeI?jKn$
*!?B[3)<SR=0u$7;*,Wu";Njj<S1?*<WQ#X"W7FG*D1%%F4519CJH#V"W0C(?b'R>?jKn$*!?B[3)<T>
=+XNE<sVYb)$C'W2bmAA<l.lB:c]Hs"<C*Ka`EVd#]!0Y"U,`+='tf3JmdPF#['G5"9]K":KFMtYu_3.
3uJ/('fSlfgK&o,#Zab_)$C'_8nj3)cuTJ.:*BcE(d1r-]O7C?#['G5"9]K":KHg`JlhDB#Z3Z$"9]Gu
:0!ic^K(S93Z/&'*D1%iF,tAJCJH#V"W0C(?i=Aa@,>8s=[=#1";Wsm<j#N,<s2A^)$C'E'fSlfL/ul+
#>dH!"9]`;Bsi#ZEsQPV+U&#d4]c"Q@"MeZ?jKn$*!?B[3)<SA=2e5H;*,Wu";Njj<QA.*<X2G^)$C'_
8nn!?Jog!o#]!0Y"U,`+='qn6ZsX/B5o^"1(-#)jfN3`-!Dto_)$C'W2bmA0<mt(S:c]Hs"<C*K\9"Ed
#]!0Y"U,`+='t3"Jme.W#['G5"9]K":KEoc_H."?3uJ/('fSlfb#X[+#>dH!"9]`;C&)h%F5_0GCJH#V
"W0C(?`RS>?jKn$*!?B[3)<T0=+XK[=&D$s"9]Gu:0!6RcrLBJ3Z/&'*D1%XF.dR[CJH#V"W0C(?gM0P
@..J/=[=#1";Wsm<h3=,<sVYb)$C'W2bmAt<f^8d:c]Hs"<C*Kr,[I2hK&s<:*BcE(d1r-Y$eD?"Be#1
"9\fB3)<S0=4UFY;*,Wu";Njj<OPr*<X2G^)$C'_8nmC.JogU+#]!0Y"U,`+='q;%`F&sS5o^"1(-#)j
a&eO-#Z3Z$"9]Gu:0%$hJl^r5#>dH!"9]`;Br?$ZEsQPV+U&#d4]c"C@"_ng=[<63"9]K":KE<RdoQfP
3uJ/('fSlf\Q5J+#>dH!"9]`;C$9ViF7OAXCJH#V"W'4!>FJg6>R+:o)[$9Y2,)+jP#DT\3>_l%'f8SZ
;M%g*;@#uV(^'s]7V-J<Dm=3dBM9NP"VWOV8_Zjh8dS'X1)9uq&M$"2N'ku[#XU^,'E\FL.Qk=0TL&oJ
/JA3g(HG>plrepCn6$$!;`ks%"UZ+mS1)-##:1;t!WiZE+j;3m,R5J0$N^A9(EiW$JgB1u#9aol!WifQ
/$1M.0E`pL%Kce7!X8pa$J#Oh#mUP5!<NE0[0`]:#7(M9!<E6*#NZ8D$2"T0#R1A3!<WQ6Q41_@#7Ce?
!<E6+#f[4:$3pkB!s&E("UF`-JdLKE#7(M9!<E6*#H%m8#mU_?!s&E)#7B&kKF@kh#Qb,0!It~>

%%EndBinary
grestore
np
341.688 132 mo
341.312 132 li
341.312 130.276 li
341.688 130.276 li
341.688 132 li
341.688 111.477 mo
341.312 111.477 li
341.312 109 li
341.688 109 li
341.688 111.477 li
gsave
/0 /CSA get_res setcolorspace
clp
[1 0 0 -1 225 180 ]ct
[3 0 0 25 115 47 ]ct
snap_to_device
<<
/T 1
/W 3 
/H 25 
/M[3 0 0 -25 0 25 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~?=$rE?=%8WB6SQDL5(GCNfK0]O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_NK&pN
KS4AdEarTh@q0!~>
<~91qoN91r5`<+KNMFEDVOH[C-fI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hH?smW
EH,>m?VjQq:f's~>
<~9MA,R9MAGd<Fo`QF)uDLH[C-fI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hH?smW
EH,Ao?r9cu;,L0~>
<~!<E3%!<EuQ(HafB?smA^EH-)BFEDVHFEDVHFEDVHFEDVHFEDVHFEDVHFEDVHFEDVHFEDVHFEDVHDf9Pt
>$<X80b"R$%1Na~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
406.688 132 mo
406.312 132 li
406.312 130.276 li
406.688 130.276 li
406.688 132 li
406.688 111.477 mo
406.312 111.477 li
406.312 109 li
406.688 109 li
406.688 111.477 li
gsave
/0 /CSA get_res setcolorspace
clp
[1 0 0 -1 225 180 ]ct
[3 0 0 25 180 47 ]ct
snap_to_device
<<
/T 1
/W 3 
/H 25 
/M[3 0 0 -25 0 25 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~?=$rE?=%8WB6SQDL5(GCNfK0]O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_NK&pN
KS4AdEarTh@q0!~>
<~91qoN91r5`<+KNMFEDVOH[C-fI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hH?smW
EH,>m?VjQq:f's~>
<~9MA,R9MAGd<Fo`QF)uDLH[C-fI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hH?smW
EH,Ao?r9cu;,L0~>
<~!<E3%!<EuQ(HafB?smA^EH-)BFEDVHFEDVHFEDVHFEDVHFEDVHFEDVHFEDVHFEDVHFEDVHFEDVHDf9Pt
>$<X80b"R$%1Na~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
275.688 132 mo
275.312 132 li
275.312 109 li
275.688 109 li
275.688 132 li
gsave
/0 /CSA get_res setcolorspace
clp
[1 0 0 -1 225 180 ]ct
[3 0 0 25 49 47 ]ct
snap_to_device
<<
/T 1
/W 3 
/H 25 
/M[3 0 0 -25 0 25 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou
^V@Ou^V@Ou^V@M~>
<~Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-
Xf\_-Xf\_-Xf\]~>
<~Vl-GjVl-GjVl-GkVl-JkVl6PmW2QYnW2QYnW2QYnW2QYnW2QYnW2QYnW2QYnW2QYnW2QYnW2QYnVl-Jk
Vl6MkW2HPkVl-E~>
<~k2tggk2tggk2tggk2tggk2tggk2tggk2tggk2tggk2tggk2tggk2tggk2tggk2tggk2tggk2tggk2tgg
k2tggk2tggk2te~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
276.164 130.276 mo
446.943 130.276 li
446.943 111.477 li
276.164 111.477 li
276.164 130.276 li
.882353 .607843 .160784 .0196078 cmyk
f
275.976 95 mo
275.688 95 li
275.688 72 li
275.976 72 li
275.976 95 li
275.312 95 mo
275 95 li
275 72 li
275.312 72 li
275.312 95 li
gsave
/0 /CSA get_res setcolorspace
clp
[1 0 0 -1 225 180 ]ct
[3 0 0 25 49 84 ]ct
snap_to_device
<<
/T 1
/W 3 
/H 25 
/M[3 0 0 -25 0 25 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!$"!!*9.%h9'q'brVD(d&WP4W##!(`5CQ(d/]Q4W##!(`5CQ(d/]Q4W##!(`5CQ(d/]Q4W##!()AqC
&M"+m'*/+9!<E9~>
<~!!!$"!!*6,%Lijj',*)9(,cpD3#38h()AkF(-!'F3#38h()AkF(-!'F3#38h()AkF(-!'F3#38h'GNA8
&17\f&ci"8!<E9~>
<~!!!$"!!*6,%1Nai',*&7'fHdA2\d&d'brYB'fQjB2\d&d'brYB'fQjB2\d&d'brYB'fQjB2\d&d'GNA7
%jqSe&HMn7!<E9~>
<~!!!$"!!*<0&eP^,)&Y^\*Cq1k8f\pE*?@`m*D.=m8f\pE*?@`m*D.=m8f\pE*?@`m*D.=m8f\pE)]M3\
'f67)(BOX@!WiK~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
363 95 mo
341.688 95 li
341.688 93.0544 li
361.086 93.0544 li
361.086 87 li
363 87 li
363 95 li
341.312 95 mo
275.976 95 li
275.976 72 li
341.312 72 li
341.312 74.2555 li
276.164 74.2555 li
276.164 93.0544 li
341.312 93.0544 li
341.312 95 li
363 80 mo
361.086 80 li
361.086 74.2555 li
341.688 74.2555 li
341.688 72 li
363 72 li
363 80 li
gsave
/0 /CSA get_res setcolorspace
clp
[1 0 0 -1 225 180 ]ct
[89 0 0 25 50 84 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 89 
/H 25 
/M[89 0 0 -25 0 25 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 89 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 89 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 89 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 89 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
Wr`2"gB#\&rW'>,pAt6nrrK8(!!3'!kQ/U&rW'e9l2gkaWr`2"rrMiq\,lX2rW!!(%i*M/h\QM5&I8F>
"V)3M'a#-]#6Fu/"Uu-L'aGE`#6Fr3&fKRHdMrN3'ab$F%OEql\iTUI#<++G"9]/W0<d8=1+!V:":ZM-
1[R$<1^>`^&Hi4K/3h-ClU;%F1D^2u'fJdj<<lAa*!Z]^0h1t5\4m3"3#Vu*'/2l(9\rGJ82hCj"rT^4
Y\!rF8g4BD#T,[)Y[.Q<73Dg?(,eqG<RFeO;*H!*#8K-k\lAE'#>dT)#6u8?BWuL_Cf;\f#oGg,?g_=?
?jKt++9r,e3)<Sr=6`im;a29-#8K0m<O#R0;Ec*+#9?ENqK',e#]<Th#mhG3='sKch-^Lm7N_p@(-#)j
Yu^s)56`,5#8K0m<O#R0;Ec*+#9?ENiH*@e#]<Th#mhG3='rUJp0\/17N_p@(-#)jYu_30590t6'fSlf
moI>,#?!`+#6u8ABukA[EsQY_-OC(r4]c!q?jKt++9r,e3)<TQ=1209;a29-#8K0m<Rt4+<X2Md*<ufi
8nkMN!,`$@-OC(r4]c!q?jKt++9r,e3)<T8=3jqR;a29-#8K0m<P;H+<X2Md*<ufi8nkMN#]<Th#mhG3
='tH)_I*XR7N_p@(-#)jb#de."B.N*#6t>G2bmAX<X2Md*<ufi8nm.'drPe4<$qtY(d1r-\R>5@#[9b@
#6u#(:KF`%#ZEr.#6tu&:0$X]``<=B4rjk5*D1%bF6mrRDH%ti#oGg,?a3uE>=K_?#8T9p<r#h-<sV_h
*<ufa2bmB%<o6p_;Ec*+#9?ENY]Bna<$qtT#oGg,?a3uE>=K_?#8T9p<o@'-<sV_h*<ufa2bmAa<qo]#
;Ec*+#9?ENY]C(f<$qtY(d1r-m9mn@#[9b@#6u#(:KGM;lW4?j590t6'fSlfYuV*-4rjk5*D1&AF1?8s
DH%ti#oGg,?drK??jKt++9r,e3)<S[<ru;b*<cZQ'fSlfYuV*-4rjk5*D1&(F4#%7DH%ti#oGg,?b9_?
?jKt++9r,e3)<S[<sV_h*<ufa2bmB@<lA#D;Ec*+#9?ENa)gNe#]<Th#mhG3='r4?#[9b@#6u#(:KI?o
[oWi6590t6'fSlfeQ1L,#?!`+#6u8ABs;XZDH$ff#mhG3='r4?#[9b@#6u#(:KHIVcrUKO590t6'fSlf
]N4`,#?!`+#6u8ABs;X`DH%ti#o5R"mT[S5#Zj>7#6tr"92`l1ku.j`4<+P0'JrEZYu1j&3u\A.)b"7R
r,/r\#\d'\#RD"m5"*sjgdMH60c'us&19HA4odYL/JSEm%js>"Ys&FS//8<l'f8Q]j&=9&#>RB$"pP>H
*5!Bd*sWf%$N^A7&fRto#9"9`!WiT=)=JN])[@8q$3C89(F$sIkTp?V)\)rP!<E;*"9\f-!!!&T"472Q
!<<*#[KH7+"9AK&!X,Y0"U"l,!!*2e"N:KH!s&B%!Q,$)!s8Q(!!0/'"9AK&!X/6$\-2s;!WW4N~>

%%EndBinary
grestore
np
341.688 95 mo
341.312 95 li
341.312 93.0544 li
341.688 93.0544 li
341.688 95 li
341.688 74.2555 mo
341.312 74.2555 li
341.312 72 li
341.688 72 li
341.688 74.2555 li
gsave
/0 /CSA get_res setcolorspace
clp
[1 0 0 -1 225 180 ]ct
[3 0 0 25 115 84 ]ct
snap_to_device
<<
/T 1
/W 3 
/H 25 
/M[3 0 0 -25 0 25 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~?XI/I?XIP_C3t;SM2@(LNfK0]O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_N/W^H
JUq]VDI?j[?sm@~>
<~9MA,R9MAMh=(uA_G'8%UH[C-fI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hH?smT
DJiZ_>>7gd9he=~>
<~9he>V9he_l=D;J`G'8%UH[C-fI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hH$O[Q
DJiZ_>>@pg:/4O~>
<~!s8W-!s9Pa*C`LfAnGXqEcQ8DFEDVHFEDVHFEDVHFEDVHFEDVHFEDVHFEDVHFEDVHFEDVHFEDVHDf9Pn
<)b1k-3XPV"U,&~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
275.688 95 mo
275.312 95 li
275.312 72 li
275.688 72 li
275.688 95 li
gsave
/0 /CSA get_res setcolorspace
clp
[1 0 0 -1 225 180 ]ct
[3 0 0 25 49 84 ]ct
snap_to_device
<<
/T 1
/W 3 
/H 25 
/M[3 0 0 -25 0 25 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou
^V@Ou^V@Ou^V@M~>
<~Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-
Xf\_-Xf\_-Xf\]~>
<~Vl-GjVl-GjVl-GkVl-JlW2QYnW2QYnW2QYnW2QYnW2QYnW2QYnW2QYnW2QYnW2QYnW2QYnW2QYnVl-Jk
Vl6MkVl-GjVl-E~>
<~k2tggk2tggk2tggk2tggk2tggk2tggk2tggk2tggk2tggk2tggk2tggk2tggk2tggk2tggk2tggk2tgg
k2tggk2tggk2te~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
276.164 93.0544 mo
361.086 93.0544 li
361.086 74.2555 li
276.164 74.2555 li
276.164 93.0544 li
.882353 .607843 .160784 .0196078 cmyk
f
275.976 58 mo
275.688 58 li
275.688 34.9999 li
275.976 34.9999 li
275.976 58 li
275.312 58 mo
275 58 li
275 34.9999 li
275.312 34.9999 li
275.312 58 li
gsave
/0 /CSA get_res setcolorspace
clp
[1 0 0 -1 225 180 ]ct
[3 0 0 25 49 121 ]ct
snap_to_device
<<
/T 1
/W 3 
/H 25 
/M[3 0 0 -25 0 25 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!<E6&!<NK2&eP^*()AnI(d/]Q4W##!(`5CQ(d/]Q4W##!(`5CQ(d/]Q4W##!(`5CQ(d/]Q4W##!()Ah?
&17\f&-)\2!!!$~>
<~!<E6&!<NK2&.fC"'GNA>(,m!E3#38h()AkF(-!'F3#38h()AkF(-!'F3#38h()AkF(-!'F3#38g'GN;4
%O2/^%fcS1!!!$~>
<~!<E6&!<NK2&.]9u'GN><'fHdA2\d&d'brYB'fQjB2\d&d'brYB'fQjB2\d&d'brYB'fQjB2\d&c',*,2
%O2/^%fcS1!!!$~>
<~!<E9'!<WW7()7Q?)]M3d*D%7l8f\pE*?@`m*D.=m8f\pE*?@`m*D.=m8f\pE*?@`m*D.=m8f\pD)B(sV
'/'Us'EA+7!!!'~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
510 58 mo
471.688 58 li
471.688 55.8326 li
507.789 55.8326 li
507.789 50 li
510 50 li
510 58 li
471.312 58 mo
406.688 58 li
406.688 55.8326 li
471.312 55.8326 li
471.312 58 li
406.312 58 mo
341.688 58 li
341.688 55.8326 li
406.312 55.8326 li
406.312 58 li
341.312 58 mo
275.976 58 li
275.976 34.9999 li
341.312 34.9999 li
341.312 37.0337 li
276.164 37.0337 li
276.164 55.8326 li
341.312 55.8326 li
341.312 58 li
510 43 mo
507.789 43 li
507.789 37.0337 li
471.688 37.0337 li
471.688 34.9999 li
510 34.9999 li
510 43 li
471.312 37.0337 mo
406.688 37.0337 li
406.688 34.9999 li
471.312 34.9999 li
471.312 37.0337 li
406.312 37.0337 mo
341.688 37.0337 li
341.688 34.9999 li
406.312 34.9999 li
406.312 37.0337 li
gsave
/0 /CSA get_res setcolorspace
clp
[1 0 0 -1 225 180 ]ct
[236 0 0 25 50 121 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 236 
/H 25 
/M[236 0 0 -25 0 25 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 236 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 236 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 236 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 236 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
!W`?(K`d_F#6Fo,!!!$$!qHGF"02M/!W`<%!!*-&hueQ5]`SK@!<E0#!<WGL"G-d&":##1!<<*#!Wp":
Jcjs6#6Fo,!!!$$!ic?S"7lU"!W`<%!!*-&Qii'F!s/K(!!<3%!s=8\QimWr!W`9$#8.pG*.f01*!dDo
#6=i1&/Q5D)M/m@)@.2s&-i4:#7q]t)1iaO)$h#h#6=i3(*=^6,(_#t+p]>6'aXpC&LooD6@qPq63ok=
.1lU_&10<'4GGs#4#SAr"9JW8-8pW@QobR72'ib7!YmL^oM:'7W_Wpr7kte]!u<mp=lW\;>.e#B=]%*o
!s8T=1eNI!R8F2\1)0ln'Ji>O:kDNE:^BTI'a"OW7:L&kCk?K;C^Flc6Q?43(d1r-cX;?4csR/e<]_-#
!u<gk<kVRd=5m9f<_bOg!s98r:0">qJl_ME#ZXSV'a"OY8SOQ5L3!H17i_^8";j:'?\`$W?jU1@3uJ,&
(-#)joN-WGX&fU.:,Wji!u3ai<T7&2<kVN><D>=d!s9Q9C!UjPF3\h4BLa*H";j:'?bTp"@,YK"?WK6+
!s9;u:KFPuJlhPF$!'eZ('=XR2bmAA<eaWW<D>=d"9S`H8nj'%QZEFG7ihd9(d1r-ojEAZWaH-?<]_0$
!u<jl<o[85=1hT<<_bOg!s8W?2bmA-<gm%p<D>=d!s9Q9C%?=sF/s?fBLa*H";j:'?f>CE@(p"T?WK6+
!s9;u:KGeCJlg<#$!'eZ('=XR2bmAd<e=B3<X;]"2&68r*D1%GF+SK)EsQGL*WuT_4]c!Y@#&+m?WK6+
!sA]A3)<S1=.*+r<_bOg!s98s:0$peJl\pQ#ZXSV('=XZ8nm7*JoeSG#\Z^L"9]Q)='s<^Jmco4$"$^p
)$9sV3)<Sh=+XN4<s_o&2AQAs'fSlfXB'pRo2Z,s9f3[g"!(!JR<+('!bb(F"U"rF4]c!H@$k=.?WK6+
!s9;u:KI-iJlesR$!'eZ('=XR2bmB5<e=Ab<WuJt2&68r!ZamIKl`Z'#\Z^L"9]Q)='tQ,JmbZf$"$^p
)$9sV3)<T6=+XMf<s_o&2AQAs'fSlfcW5WucrLEP9f3[g"!(!J]Q8[GiH#9<7ihd9(d1r-X'gNeoO%u4
<]_0$!u<jl<gd$E<s2Q!2AQAt!u3ai<JOVC<X;]"2&68r*D1&;F+SJ5EsQGL*WuT_4]c"M@"Me"?jU1@
3uJ,&(-#)jcrYg#cW:ER:,Wji!u3ai<PDLc<oI'b<D>=d!s9Q9Brc<,F7OAXBLa*H";j:'?^bAW?isb:
3uJ2(!u<jl<eshE<s_o&2AQAs'fSlfoi?ZFW`BC*9f3[g"!(!JicB]m]5n*g7ihd9!uO1&?\VsW?jU1@
3uJ,&(-#)jo2gNFXB,^/:,Wji!u3ai<T-u1<k_T?<D>=d!s9Q9C!LdOF3en5BLa*H";j:'?bKj!@,bQ#
?WK6+!s9;u:KFMtJlhSG$!'eZ('=XR2bmA@<ej]Y<D>=d!s8WG8nj$$Qu`OH7ihd9(d1o+oO!2WX'Z0>
<B:s!!u<gj<T7&2<kVN?<D>=d!s98r9iTJ>JlU,s#ujST'a"OY8SE.YF+SJlEsZl"7NDU7(,o#iXB1!T
o2c6!:,Wji!u*L\:7=t5:BO?^0bacn!u!FZ9o)Q3:'jWa0G=Nj)FIkFokB"lWbD`P?9oJ4":uq>i]VlV
]0-9U,nL+Z!tHP22hj;\3!hN!+q=YU%O3_eo/D7[X>^GD0d7)/!Y[4S8`<9n9"mn'8O>!B!s8c>(X<nM
):'0+((^]O!<s&L(;1N9(ZH5;().5_!<EB8'c*hdJf"%q#o43b"p"`1'HA0^+,:p@*ZGau!WW<$!JUZC
!r`6#!<*#j!eLKR!r`6#!<*#X!eLKd!r`6#!<*&G"+gX#!sAZ,!<<-!!PJPd!oO.Z!WN0!!NQ9R!qHEl
!WN0!!LX"C!r`6#!<*%T".')m!WiB&!.Y~>

%%EndBinary
grestore
np
341.688 58 mo
341.312 58 li
341.312 55.8326 li
341.688 55.8326 li
341.688 58 li
341.688 37.0337 mo
341.312 37.0337 li
341.312 34.9999 li
341.688 34.9999 li
341.688 37.0337 li
gsave
/0 /CSA get_res setcolorspace
clp
[1 0 0 -1 225 180 ]ct
[3 0 0 25 115 121 ]ct
snap_to_device
<<
/T 1
/W 3 
/H 25 
/M[3 0 0 -25 0 25 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~?smAM?smeeCk$qaN/W^VO,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,f6\MMd:>
I=5mHCL:FU?XI.~>
<~9he>V9heep>&A+nH$O[_I!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hG^+IK
CMR$S=A2C^9MA+~>
<~9he>V9heep>&A+nH$O[_I!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!^3eGB\7H
CMR'U=\VUb9he=~>
<~"U,&5"U-+q,>_35D/F-3FEDVHFEDVHFEDVHFEDVHFEDVHFEDVHFEDVHFEDVHFEDVHFEDVHFE;MEBk_9S
91pBM+9VfM"9\i~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
406.688 58 mo
406.312 58 li
406.312 55.8326 li
406.688 55.8326 li
406.688 58 li
406.688 37.0337 mo
406.312 37.0337 li
406.312 34.9999 li
406.688 34.9999 li
406.688 37.0337 li
gsave
/0 /CSA get_res setcolorspace
clp
[1 0 0 -1 225 180 ]ct
[3 0 0 25 180 121 ]ct
snap_to_device
<<
/T 1
/W 3 
/H 25 
/M[3 0 0 -25 0 25 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~?smAM?smeeCk$qaN/W^VO,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,f6\MMd:>
I=5mHCL:FU?XI.~>
<~9he>V9heep>&A+nH$O[_I!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hG^+IK
CMR$S=A2C^9MA+~>
<~9he>V9heep>&A+nH$O[_I!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!^3eGB\7H
CMR'U=\VUb9he=~>
<~"U,&5"U-+q,>_35D/F-3FEDVHFEDVHFEDVHFEDVHFEDVHFEDVHFEDVHFEDVHFEDVHFEDVHFE;MEBk_9S
91pBM+9VfM"9\i~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
471.688 58 mo
471.312 58 li
471.312 55.8326 li
471.688 55.8326 li
471.688 58 li
471.688 37.0337 mo
471.312 37.0337 li
471.312 34.9999 li
471.688 34.9999 li
471.688 37.0337 li
gsave
/0 /CSA get_res setcolorspace
clp
[1 0 0 -1 225 180 ]ct
[3 0 0 25 245 121 ]ct
snap_to_device
<<
/T 1
/W 3 
/H 25 
/M[3 0 0 -25 0 25 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~?smAM?smeeCk$qaN/W^VO,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,f6\MMd:>
I=5mHCL:FU?XI.~>
<~9he>V9heep>&A+nH$O[_I!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hG^+IK
CMR$S=A2C^9MA+~>
<~9he>V9heep>&A+nH$O[_I!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!^3eGB\7H
CMR'U=\VUb9he=~>
<~"U,&5"U-+q,>_35D/F-3FEDVHFEDVHFEDVHFEDVHFEDVHFEDVHFEDVHFEDVHFEDVHFEDVHFE;MEBk_9S
91pBM+9VfM"9\i~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
275.688 58 mo
275.312 58 li
275.312 34.9999 li
275.688 34.9999 li
275.688 58 li
gsave
/0 /CSA get_res setcolorspace
clp
[1 0 0 -1 225 180 ]ct
[3 0 0 25 49 121 ]ct
snap_to_device
<<
/T 1
/W 3 
/H 25 
/M[3 0 0 -25 0 25 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou^V@Ou
^V@Ou^V@Ou^V@M~>
<~Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-
Xf\_-Xf\_-Xf\]~>
<~Vl-GjVl-GjVl-GkVl-JlW2QYnW2QYnW2QYnW2QYnW2QYnW2QYnW2QYnW2QYnW2QYnW2QYnW2QYnVl-Jk
Vl6MkVl-GjVl-E~>
<~k2tggk2tggk2tggk2tggk2tggk2tggk2tggk2tggk2tggk2tggk2tggk2tggk2tggk2tggk2tggk2tgg
k2tggk2tggk2te~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
276.164 55.8326 mo
507.789 55.8326 li
507.789 37.0337 li
276.164 37.0337 li
276.164 55.8326 li
.882353 .607843 .160784 .0196078 cmyk
f
449 124 mo
446.943 124 li
446.943 123.759 li
447 123.759 li
447 117.743 li
446.943 117.743 li
446.943 117 li
449 117 li
449 124 li
gsave
/0 /CSA get_res setcolorspace
clp
[1 0 0 -1 225 180 ]ct
[2.64 0 0 7.66667 221.6 55.6667 ]ct
snap_to_device
<<
/T 1
/W 11 
/H 32 
/M[11 0 0 -32 0 32 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~3A;g%(D7/^"9\if0IInX&e,'K"9^_=-QX':%0m"="?A.`*Z#Fu#6Y/43A;g%(D7/^"9\ig0IInX&e,'K
"9^b?-QX':%0m"="?J7b*Z#Fu#6Y/43\`$((D7/^"9\ig0dn(Z&e,'K"9^b?-m'9=%0m"="?J7c*uGV"
#6Y/44#&-*(_[>`"9\ih0dn+\'+G0L"9^eA-m'9>%0m"="?S@e*uGY##6Y/44#/3+(_[>`"9\ih1+44]
'+G0L"9^hB.3BB?%0m"="?\Fg*uGY$#6Y/44>J?-(_[Aa"9\ii1+=:^'+P6M"9^hB.3BB?%L3+>"?S@f
*uGY$#6Y/44#/6,(_[Aa"9\ih1+44]'+G0L"9^e@-m'9>%0m"="?J7c*u>P!#6Y/43\`$((D7/^"9\ig
0dn(Z&e,'K"9^b?-ls0;%0m"="?J7c*Z#Fu#6Y/4~>
<~1b0di'bCcX"9\ia.jGuJ&.AaG"9^P3,9%@/$jHh;">hVR)\inm"p>&31b0di'bCcX"9\ia.jGuJ&.AaG
"9^P4,9%@/$jHh;">hYS)\inm"p>&32(U!l'bCcX"9\ib/0l/L&.AaG"9^S5,TIR2$jHh;">q_U*#9(o
"p>&32(U!m((grZ"9\ib/0l2N&I\jH"9^S6,TIR3$jHh;"?%hW*#9+p"p>&32D$0o((grZ"9\ic/L2;O
&I\jH"9^V7,od[4$jHh;"?%hX*#9+q"p>&32D$3p((gu["9\ic/L;AP&IepI"9^V7,od[4%0cq<"?%hX
*#9+q"p>&32D$3p((gu["9\ib/L2;O&I\jH"9^S5,TIR3$jHh;">q_U*#0"n"p>&32(U!l'bCcX"9\ib
/0l/L&.AaG"9^S5,T@I0$jHh;">q_U)\inm"p>&3~>
<~1Fj[h'bC`W"9\i`.jGuJ&.8[F"9^M2,9%@/$O-_:">_PQ)\inl"p>&31Fj[h'bC`W"9\i`.jGuJ&.8[F
"9^M3,9%@/$O-_:">_SR)\inl"p>&31b9mk'bC`W"9\ia/0l/L&.8[F"9^P4,TIR2$O-_:">hYT*#9(n
"p>&31b9ml((goY"9\ia/0l2N&ISdG"9^P5,TIR3$O-_:">qbV*#9+o"p>&32(^'n((goY"9\ib/L2;O
&ISdG"9^S6,od[4$O-_:">qbW*#9+p"p>&32(^*o((grZ"9\ib/L;AP&I\jH"9^S6,od[4$jHh;">qbW
*#9+p"p>&32(^*o((grZ"9\ia/L2;O&ISdG"9^P4,TIR3$O-_:">hYT*#0"m"p>&31b9mk'bC`W"9\ia
/0l/L&.8[F"9^P4,T@I0$O-_:">hYT)\inl"p>&3~>
<~763(I*#9%j"U,&u3\M`u((UZS"U.=U0-hMQ%gW=B"[tI*,TIR1#R(A8763(I*#9%j"U,'!3\M`u((UZS
"U.@W0-hMQ%gW=B"\(R,,TIR1#R(A87QW:L*#9%j"U,'!4"qp"((UZS"U.@W0I7_T%gW=B"\(R-,oma3
#R(A87lrCN*>]4l"U,'"4"qs$(CpcT"U.CY0I7_U%gW=B"\:a0,omd4#R(A883ARP*>]4l"U,'#4>8'%
(CpcT"U.F[0d[nW%gW=B"\:d2-63m6#R(A883J[S*Z#@n"U,'#4Y\9)(D$iU"U.F[0d[qX&-rFC"\:d2
-6<s7#R(A883AUR*Z#@n"U,'"4>8*&(CpcT"U.CX0I7_U%gW=B"\(R-,od[2#R(A87QW:L*#9%j"U,'!
4"qp"((UZS"U.@W0I.VR%gW=B"\(R-,TIR1#R(A8~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
446.943 124 mo
420 124 li
420 117 li
446.943 117 li
446.943 117.743 li
421 117.743 li
421 123.759 li
446.943 123.759 li
446.943 124 li
gsave
/0 /CSA get_res setcolorspace
clp
[1 0 0 -1 225 180 ]ct
[29 0 0 9 194 55 ]ct
snap_to_device
<<
/T 1
/W 29 
/H 9 
/M[29 0 0 -9 0 9 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~iSibSiSibSiSibSiSibSiSibSiSibSiSibSiSibSiSibSiSibSiSibSiSibSiSibSiSibSiSibSiS`VN
hr*GNhr!>Jhqm8Ki8EPOi8EPOiSibSiS`VMh;-uGhVI#Cgt^]?hV[5IhVR,Ghr*JPiSi_Pgt^]AhV?l?
g=k97g>1W@gtUT=gtglGiSibRhV?l?h;-i>gY1B8g"P9<gtUQ:g=k?=i8NYRi8<AGgtgfAgt^]>gY:N?
hVHuBgt^]?hr*JPiSi_Qhr!>Lhr!>Khr!>Ki8EPNhr!>Khr*JPiSibRi8<GLi8<GLhr!>Khr*GNhr!>K
hr!ANi;~>
<~R[T\6R[T\6R[T\6R[T\6R[T\6R[T\6R[T\6R[T\6R[T\6R[T\6R[T\6R[T\6R[T\6R[T\6R[T\6R[T_8
S"#k9S"#n:S"#n:R[T_8R[T\6R[T\6R[T_9S=H(<S=H+?SXl=BS"#n;S=H(<S"#k8R[T\7SXl=AS=Q7B
St;OFSt)=ASXl=BSXc1<R[T\6S"6+@S=H.ASt;OFSt;IBSXl@DSt;LBR[T\6R[]h<SXc4@SXl=BSXuCB
S=H.@SXl=BS!oe7R[T\7S"#n:S"#n:S"#n:S"#n:S"#n:S"#k8R[T\6S"#n:S"#n:S"#n:S"#n:S"#n:
S"#n9RK~>
<~.k<,#/1`>'/1`>'/1`>'/1`;%.k<,#.k<,#.k<,#.kE5&/1`>'/1`>'/1`>&.k<,#.k<,#.k<,#/1rY5
1+t761,CaE1c7*D/hSe1/hSb//M&D&.kNJ84#o,R2`j,c5!D1o2)7!H2`<NN1G:=2/1`D14?u(i3'Tbs
6q'O76om7h5X@Y"5<CYR/1`>)2*F5j4$,bt6UXC68OY^$5=.b+6ps6s/hAM'/i,OP4ut\d5<_:t6:4!t
2EEub5<hCq1bL=0.kE;-1G^a>0etO@1c.$F0J>.91,C^B1+t1/.k</'0f(U?0JP==1GgpF1GCI:1,:XA
1GUU7.f~>
<~"U,&5"pY>:"pP8:#6tJ=#6k>8"U,&5"U,&5"U,&5"U529"pP89#6tJ=#6tG:"U,&5"U,&5"U,&5#7;"U
&I]!V&JGlp'c%Jn#mgtI$47+H#R:M:"UP_Z+W_=1)'C+N-RL5e(D%8t)&O,)&e#$M"pPDL,:Ou[)^d6i
0JYCA0HV/W.4Zkq-Qj'/"pP8=(*tL]+X&En/hf+?3AVg!-S@)-0JFmk$3p_<#ne=--6F6Q-RU;n/h\Xn
(`t"N-n$Mh'aY*K"U>AF&eY`c&.oNg'bqGs%L`jZ&J>`j&.8^H"U,,<%h]Kd%M03b',;5s'+PE]&.oNg
'+bNV"T~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
gsave
420.3 123.759 mo
448.447 123.759 li
448.447 117.743 li
420.3 117.743 li
420.3 123.759 li
clp
447 123.759 mo
446.943 123.759 li
446.943 117.743 li
447 117.743 li
447 123.759 li
gsave
/0 /CSA get_res setcolorspace
clp
[1 0 0 -1 225 180 ]ct
[.72 0 0 6.70833 221.6 55.9062 ]ct
snap_to_device
<<
/T 1
/W 3 
/H 28 
/M[3 0 0 -28 0 28 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~3A;g@0IJn8-TWt03\`!C0do+=.6B:64#/6I1+>=@.6TL;4Z"WO1b(XF.R#[>4u=cR1b1aH.m>d?4Z"ZP
1b1^G.QfI84#/6H1+>:?.6B:6~>
<~1b0e-.jHl$,;^qr1b9k//0m)),rI8#2D$45/L<;,,rRD'2_QL:0.&V2-9!S*2_QO;0./\3-T<\+2_QO;
0./Y2-8mG%2D$45/L<;,,rR>$~>
<~1Fj\+.jHi#,;Ukq1Fsb-/0m&',r@/!2(^+3/L<8+,rI;%2D-=7/g`J/-8mJ(2D-@8/giP0-T3S)2D-@8
/giM/-8dA$2(^+3/L<8+,rI8#~>
<~763(j3\Nr`01J#V7QW7m4"s/e0h4>\7m&Ls4>BAh0hFPa8j5"&4u,_o1.jbe8j>+(5;Pnr1J0kf8j>+(
4u5bo1.XM^7m&Lr4>B>g0h4>\~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
446.943 123.759 mo
421 123.759 li
421 117.743 li
446.943 117.743 li
446.943 123.759 li
gsave
/0 /CSA get_res setcolorspace
clp
[1 0 0 -1 225 180 ]ct
[26.3636 0 0 6.51724 195.719 56 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 110 
/H 27 
/M[110 0 0 -27 0 27 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 110 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 110 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 110 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 110 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
o&9N)leqj%mb\$&dc'\aUmh33r[dt!s"=7'!&"+"s"+("r@Rq"m4SGlr[m([p+-%E#6kD<#RC_C$Mt50
$N1;2#lG#-$N1A-%/()6$O[:J#mU^q#5/5pi;hg/hZ2U2iW%iohZ;ZofAZ:hs-r;Bl^R1.kaMN%r%%h"
r\".'!\uMcr@e4)pFZG!q_8"(mP4u$0JG.4/hQ!4qCDt("U,)7#6tM@$4HhA$k<aY&.]6\%1N^S$Ocn?
!"8Z4!Y#VLrX]#?ndts8&.]9M$ip\Ai<]Dfr!!-)qVhJ4n_a6%o&'?$s53b2q;;51qVgl#o&9;2r0m\V
r1!YRqO72Km@=-EeXH@dr[n:,0JP?^1B9921]K600E<d*0)mU)0`Nm-1Aip.2=<=*1G^d@0JD?:pacCL
rW`i;#RUqJ$k<d[&ebrorY#AH&.T0K$k`pU$k*RS%hB6a&eYil'G_H#(]5*P(D[c&r>5MN#Sn0i&ePW`
$k2t>mL/n!r<NB.r<E/Xs5<h4qVM,,rS[S1jkfsnpu(Dppu2":rgW\QrL<_RqjZ];rL;u=nXBD-#;%P\
0/,+:1]B922Z>Q:1G^a?0`<[(0a'9g1c7/h2?5])3!_H$2)@$C0eY3X0'b1f/c[L#/-#n`#6tM@$4@7O
%h]Ql(],$[().Am%LijU$k3[X&/#Wkr>,PQ)&X@l)uLZW)]B[o*"!W()&O/(&eGN^%/^M4%/UM6%.Xc3
$47(F#R:S=#5mHZi;VX4h?)NhhYl=)htZ%.h='/!h>c@0huDWshu2L0iVArAS+`BFRfJu=SGerRRdHU9
Rf+cG/hSe10f(XE2E3ZW3rV)@2`<KKq_8701GgpH2Z5T:3B9.q48:lE3]]5Y1c$mA0J>*X0^UUo0`Ng)
/c[L%//\Zt#RCbF$k3a]'c7f,*$-.@*#fb4'b_,irXKAJ&JGlp(E",1)]Tk=+9!G\,6&ha+pfD9+<DF<
'b_/hq@3H7q[``<p(%'2rX9#>$47(F#6tJ3iW%j8hu;L4h>>t-h>Z:-hu2C3h<*Jmh>Z:'hu2F3hsoV'
i;DR2Rf8fRS,f,USGJ`NSEZUCSFi<MSF;sIReiKP/0HMs0/51;2)[ET3]fJe4?GVc3&WWN1G^dA1Gh!J
3&s&!49%GC4oIVD5lEnL5X7V#r]^TM3]K#T1c,(b!&FO0r\XU3rA=4(">V\d0JEDX!%n1$#mU\@#n%.O
&/,j')&s\?+XA9W+X%pI)&F#$'+kfi'c.`+*?QFK+sS<X,q&[?r@.[n%4N_V.4?Pk,Tn'E(DRS]&-ELW
',:E\rYGPMrY5DIq%F2M&ePZc%1EXQ$4-tD#Q<T]i;VX5hY5e*h>H.0hu;I4h>#e)g\fe'g\fe*g]$",
hYc9qhYZ41i;MX3RfAlTSGJfRSGo#TSG8ZISH,8YSc,)VS*-=?S,/Q_/M/S-0/,+:2)dNW4?`U,#!P.1
3&WZPr\Og;2E3`Z4?`[.r]gNN6::Z=r^-oW6UX=26ps?H69m[q3&``Pr\F^72)R9M2u,E52u#<12)d<I
0ek@8/hS_,/-lOh$4I@T&f2E++X89\-n$Gj-6jWQ)&F))'bqN&*$-7J,pt)h.4H_t/hd,Vr\#*@0/,(8
0JG+2.4$,W)&F&%',2/s(Dmu,rYbeV*<$lT)>k?N(CLum&eGN^$k!CK#RLFgs5<n6s5*_0"5DP`g\fk&
hYc1,g\ok'g&B_'g&9Y(h"T\(h>H(,h>?(,hYc:2i;V^5Rf8fUSG&NISG8ZST)5/ZT)>5[T)P;YS,f&=
SGo#TRf=rT/hSe31Gh!L4$>eo6:4+,5s[^u4#o;!2?l-$4$5Yj62j1R6UO717eoOk7Rfm<84c?B7Rfd3
4ZbY`2Dm<K2E*TT3W;);48h2?3Vk]W2`ETO1GLU<0.nk//I2Xi$OmRY'c@u7,q(5p0/"q/&1].T+WVI=
)&O/.*?cXR-n>3K"YVM_1,Lle2^gRB2)I-J2`NfW2Dd3D.O?5Y)As>,(Dn#.*$$(C+<_mP+X%sN*Zc@!
*"<f((`4#&&.T-X$OR1Hro!k8rnmb4rnRP.qq;&)rnRG.!8[V/!Sc?+g@<hrf_sM'gA]k-h>H.0h<`qr
h>Z:1huDX6iV]/ES,SrVSc#)XSb\fRSc#)PTD5#YT)P;SSFrHFSGo#URLUo$/hSh41Gq-R4[;>#7/fX\
6ps@+4ZbYar\t*C4$>eo6:C`@!Co]R8e+Kf9h\/O8Oc*54Zb\a2?l'!3'')^48qD@55dY@3sdr/3B/oS
1GLU;r[o*@#RLhG%1j3i)^-IU/M8b71c$j?/gqtg*?G+u#9P-9-n6i'1]9-32E3bo4X3'O4$5Yi5Wq7m
3]&N>,U"3J)&X>4*ZuUM,UF``-7:,e,piR:q]Zq%+<DOB(`*kt%LigR$45\Mi8EMMhVR)DgtVh^s4RA)
!8IM.rS@J.!8IM,q:YPq!SQ-'f*'aZg"P3[g]QBhhVJ(aptPGr"5VhjhuDU6i;_d7RfAlUSGo)ZT)YG^
T)G5WSGf#YT&uXFT)P;XSEQOASGo#VRLh&'/h\q82)dQY5=.b,7RorS7n,s969dUp48q8F4$Gnr6q0]E
8cME_9_V6s:/=\^9h\5P7RB=&4$#>\3]fJf5<hI/6N9@K5U\i]4Zkee2`3BG0eY.3/IDjo$kEse)'1"N
/MJq:2`EWO1GCC/,U"<0*s<c7.5!:T1H,.k"?J\/5=#05r]hAd5se"06pa+$3A`?:,U+<M*$6=L,pt)j
/M6lQs"47$q^E:/-RBu\*Z5b-&.T*V$45\Mi8EMMhVS7ern@;'!nuA_ptPr*g=lAU!8.,!p=BB!g"QD[
s5!Y/!8Hqqs4dM-!o;_irnde8iSja(s-s"Xrgj(\r1F"\qjd_WrLNt[l_"0Lr1<t\rgj%YqjmDOp7;/P
s-rtU%P9:c0/57@3'08h6q0[;r^d8a7n,j355mYM4$5\m6UjR;9)VEc92&&SrD3Dhr_NPjr_a"u:JOSR
6pX%#r]:<H5!M>"6q%#DrC?lWs$cfQ$U[6H5<h7k2`3BG0`E[@$4@7O&/5s#+XJWm1Gq-Q3]T/X1bU@+
rZ_[m,:4oo1Gq0Tr&k-G5XIj;7K,as779O57nH<E7R]X,2_cg2,U+?R,:4fh/hf"91c5.gs"sa2q_/4-
/Lr4s,9@./(DIDi$k!I$i;MO;hVHuBgY1BWf`Bg]qV;,)rn.;(n(7Hfrmq5)g=uJZ!8IM,n(IZnrnIP1
hYuC6i8ESmRK/iUSH#/[T)"uYT(niVT(ATFT`1P`T(nlUT'r<NT)P;ZSH#)XRMd_20JG:?2`a&c6:OI:
8kVfL8kDNA69m^ur]UNP6q0a?9MPL^##.fe:Jakbq,75kr`'V1;Gg1]7m]I*5!1ql5sdt/7nH;O8cVN_
9)_EZ7j^\n6U<q!3]8iO0eY.3$4@7O&f)?+,:G0#2*!`]4Zkee2_m!8-iG@u.kie?4$>kt6UUi>!(6iW
8,c$[8P8qQ)G3[u:ejYT84#Er/h/7q,9nTe/ho1?3BB5arB:0Br]0m8%lH0u0.\Iq*Z5_+%L`aRi;MO:
hVR)DgtM_[rn.2&!SZ<+g]ZBcg"G$PfCd_oeH"/*f%/I*g"P38rnIS0g=lPZs4I/!rn.&"s4[J-#2\4o
hr*GOrgNkVrgX%\SY#PIq4.MWr1F"^rL`\Srh9=arh'"W!1s1^m%=<Ls.0.Zs-s"V%kfRi0f([H3^#bs
7nH<H:&[fh8kDNA6N'.V5sn+59MJ;Z;GpBk;#aGm;ZKen<>ek?=BAR(<)?7[77':*5!D8#7S$*C9MJ8W
rD*Dgr_<;a5>4[@7n,m45<Ch_1GLO8/di'r%hoj"+=/Nm2`Wu`5sIRs4ZYJU/h/>".4[&.3B]Yq7S--A
7n-!>8kVfN:&@[(:Jt.k;c-:`7R&mf/hAG!-S-r.3''2e5sdp;6j5qE6:!k$q`PEM2`*6?-QsHH'G(Z]
$fM!@"lA+lgt^W_g&0M%f`9b'gB60_g"?#Mp=9>re^W.Kecj[Xg"P38rnIS0g=lPZ!8-qqr7M#%$JO4h
gtgiEhr*GOrgNkVrgX%\SY#\MrLX(]qjd_Yqk*k\rh&hUrLs4`rgs1^qOIVXkaqpJSXobMs-s"V%PKIh
0f([H3^,ht7nH<Hr_3Pi9M.iE6iB:T6:FC:9MSCa;>sJm;#aGm;ZKeo<=Mu1=BSa-<E)gi8OZ!4r]gcV
77TpA9MJ8X:]=2g:\md391hcF6U*[o2`*6B/hRM?$kF$h)^$IY0fM-V5!_J"5<V(f1GA\X$8""l4?l/%
84lKFr^R/`8P2WL9ht[`*)B@-;cHds;,BtX5WLSQ/1N(t/ho4D4?Yts6q%#Dr^HiSs$HWL%Qup71bU7%
*Z5\($k*O%rSIe8hV?o@gA]b,f[naSf`0Y)gAK\,g=b0XfDjG!fD!kqeHj[Te^i='f@emWgB66dgY2Y[
!8-_k$J="ag"P6:h;7#Gro!dEs-s"X!hGmRp7D>Vqjd_Yr1En[s.AtWqk=%_rgs1^qjd_YoUk`I!hPsR
rgWtXrgFWV0/,+:2E3c_6:FF;92&&T9he;R8Oc,I6P)RO7S-9K:Jk"h;c6Li:f:3j;uK]:<`W:'=BSg0
=&r<u9hIiA6:!k%6UaL;9MA2W:f.'er_WMg#Z+;k9M.iD5s68M3&NHE/hRM?$kF$h*$H[]1,q?Y5=.\&
5sILm1ben^(G7?t3B]\t84cKJ8k;HB84cEH9MS>Y:]=31;cHau<)ZUg84#Bo0.ne).PES:4$>ep6q0X9
rC?u[7Rm;E&4T&R5!1eZ/0uDW(D.)b%,h*A"Q%tigtMh_rn.;(rRV&%rn72&!nl8Zrn%,"r7C_prm__4
eCE+#f%8O,g=k<9gtUQ:g"G$1mFMZsf\,!5gt^cChu;R5RfAlVS-#7PT(S]UT)P;\Sc#,JT_bA]TE:aX
T)5&YT)##RT_G&[St2GOS,f&XRMRV10JP@A3BKGl7S-3G9i"P[9he;R7n*AE%n/u\9M\M`;cH^p;Gg:h
;Z9T<<E3(#='&L+=^#!3=BAL#9hIlC6U<t'6q0a?9MJ;Z;,R*dqb\Y9:/"8L69dOk2)?m=/di'r%hoj$
+X\it3BTGj6UO1,5s7:g1]9!M0fD*X6q9gA9he8P7n6*A8kViQ:Jjte;H-Uq='/I%;%l_s69I(Y0.eY)
0JkdQ5=%\,7nESM!_Q'Vr(%Dk8Ol385!(SR-QsEF&e,6Xi;MO>hVHuBgY1?6f\$,R!nc2ZqqD)'rR_#!
r7Cbqs4.%s#M%AUf@S^/gATb+gA]b,f[naRfC[Ynf*L$]g"P6:h;7&gi;T2FS,SoZSXlAFTDP5XTC8HJ
U&UebTDY5[T),)LTE(Y_TDtJ]S,f&XRLUu(0JP@A3BKGl7S-3G:&[ol:/4JT8OiVH%S9>h;,L4j<E2sq
;,L4hr_jn=<E<1&=BJ^0>$G05=&i-o8k)6:6U=%-7nQHL:Japf;Z'Mk;\E&/;c-@d91VH84#o2T0/"pc
$l'0]'Gqi6-S@284[25"770C.5<V"`r%g/i4[MY18ki,W9M.fF8P)NH9MSA\;GpIn<``C,=&i0q8jba!
0eY12/i#=H4[DG)84cBFrCd2cqb%Mp9M7rG5s@7^-m9TJ&e,6Xi;MO:hVR)DgtMb\!8.8%s4IA)qq;,)
g"?8T!7pqsq:>Pq#h7DTf%/I*g"QG["5MYbgA]b*f^.2qf\,!4gt^cChu;R4RK/iVS-#7PT(S`UT)P8\
T)5,[T`1V^TD,#UU&UebT)bJ[SH,8VTCefST)tUTSc5,ZS,Sid/h\n41Gq-Q5!_S,8P;bV:'F?d9M.iF
r'^o^8k`#W;,U=j;Z'>s;,U=k<)lq!<t8;6=BSg0=&i3s9hIiA6iK@Y6q0a?9MJ8X:f($\;B/M.9hRuD
5<Ch_1G:C6$4I=P&f;Q1-7gl13^#_+63TY>4?,/Qr\4j<2`j5l7S$*D8k;HA7fGmp8P2ZN:/=_a;H-Uq
=&`'o9h7Q31G:C5.gmm^1c[]^5XIn/7S*MMrCZoX%n8oO4Z4rA+WM=3%1E['i;VU<hVR)DgtLK]g&0M%
g&9V/gY1B7g"=sJfD=(uec+,(f@S^/g=tB]g]H6agA]e*f_O.nf*U*^g"P39gtpoFro!aD!1WtXrga%\
p7D>Vr1*hZn=TKKs.TCarh'%Xs.8DG".l'SS-#4NS,Sid/h\n41Gq-Q4[DJ*8P2\U9d*2(91_WB779O2
6q0a?9hnJ\;,C(b:/4S\:f("e;H$Oor`/r!$!(&*;GTtW77'<>5R9\F7nH<F9MJ7[:\dic;'&M.9M.c@
5<Ch^1G:C6$4@7O&f2H-,UtK)3BKAi5sdk%5<V%d1GLR;0/,4C4[;;$7S$!<6pa4.6q0X:84lNL9hnJ\
;,U@i:J=>K4ZG/K/1N(u/i#:E4$>eo6:4+/7JTFO7hA'S5!(SR-QsEF&e,6XiSi_oh[&)qgt^Z<g=b0Y
f_sM'gAK_*gA]e*f`'J)f\+p0pt,Anrmq;*g"P38rS.D-rn@8&s4Htq$J="ag"P6:h;7#Gro!aD!1WqW
s.01]pn.SXr13kZn"9WQpn7SX!1s"Ws.8GH!hPsRrgWtXrgF<K/hSh52)[EU5=.e/8P8nS"%l-T7JoLY
77TpA9MA/V:]!lc:B=9hr_`_pr_s8*<E)jn;,'YQ6U<sG5X.M"6q0[:8P2TK9`7]\:FAt7:/";P7R94!
3&NKF/hRJ=$k3da)&shK/M]1D4?btn4Ztnf2)>(_2_m6N4?Ynp6UO1*5<qM$6UO:384Z<E92&&S:/=SV
8Ol'.2(pL1.4?Vr0JbRF3BKAe5!VA"6Ma%Z6psI35s@Fl1Fsjq)]'.d%0,;di;_^7hYu=0gA0G%gABY)
gAT\)f_X;$f_3nsf)=2&f\,!5qqM2+rS%)#p"0E#g"P08"Phhihr"FkrL3bUrg`tYs.9%Y!1s%Xs.8SL
qk3kZ!1rtVrgrGJs.97]rgWtXrgF*E/hSe31H%3S"[,.>7Rp&K9*S![7n,m66iKCV6UaL:8P2YT9`@]a
9`Iie:]F8k;>jB"<)QRi:/"5J5sR^74pO>>6q0X984ieQs%EAcqG$ra*)'!s7moX+3]JuP0.nja$OdIU
'Gq`3,qCZ*2ELe"#!=q*1b^R9r[nI01,V'Q4?Ynmr&lPo5=%V'77Ka;84cBF8k_fH7RK@"1+at)-RL/h
/MJt;2)mTW4$5Yh5!M=35la1J5mfe=3]8]C,p4*A&cN4=iW%j8hZ;TirnIM.rn@D*r7V/*qqM2+r7_##
r7Uu"rR_&$"52A]g\BP(g\TXpg&B\3gYCT?hV[5Ki8OX's-rtWrgj%[s.B7]pRV8Sl(@sI!1s+Zs.&tW
r1<JOrgs.\rga"XrgF<K/hSe31Gq'O4$Q"t6q7)F&Oo5X6:!k%5<hG#6psL67n?5M7fZ*Z8HVRX9MGF[
rD"#%:/+AS84Gp15!;"i4$>eo6:4-C6q'R7r^ZcUrCSk:84H$65<Lqa1GLO8/dVmo$kEsd)'0tL/1rY5
2`NcU2`3BF/Lr8!-n$St0JP@?2E3_q2_-jJ3]]Ad5!M:t5s[h)6UX4*5!:k]/gr%l,9e<X-nHu(0JP=>
1c70M3B?sts#U`R4#f/T1+ajt*>fJ$$k*OCi;hg7hZ;TirS.D-qq;&)p"TQ%o%NllrS%5*r8%2(rnI"t
!8IM.!SuW3hZMfqiL9_6s-rtWrLNkXqORYVqORYXrLNbUpn.MVs./tUp7:fHrgj"X!1WqU&M5Re/hf"9
2)dNX5!M>"6UX?A6NTP=5Q3eT4?Pbk5X@\&6UO706UUi@s$crWqa^]Yr^meo84Q-:5sIIn3]]8^4$5\j
5=#36r^$ZR6q$i>1.F]$6UF%%4?5>X1,(=5/I;al$k3a^()\,:-7:;q0JP:90J4q+-RC&a,9nK^.4Zr%
%PKLj0J>(50ekF>1Gq*MrAYZT3]]>^2`<KH/12Yc+<DOE+<r3\-RgMr/H.7'0/53Y1As!<1+t4/-R'QJ
((gua$OZjkr8.M2rn[;'qVCburS.>*q:bl's4mY1qqh;-nD+#trS.J1h;8+fro*aCs-rnUq472Knt#KG
rLNkVpmg]Ar1*eVrL3^;$na4f1,CdH3BK;c5!T!2&jJQB4?GSb3B9,^4?Pbj5!M:tr]gBIs$?ZOrBpKN
#X^sG5sRUq3B6pq!'1$?!^&S.r'(-GqEY$G*C)hQ4ZbY_2)?s@/hJX\#mgtJ%M9?j(`XYA,pt,>.2"!U
,U+?Q+!)IF+<i'W-7:/h./kRu-n6\s/1iIP0DmO=0/"n.-mg)X)]BS2(`FG<+X&$T-2f.l-R^D>.L@XW
.k)hn,p43F"r7j_$jm:IrS[b7qqhD1p"fK$oA/okrnRS2qqqD0nD4*!qq_2-!9!k8qO.JTS"/3&pmop)
s-rqTr@JI20JG7;1c@9P3]]>b4T7DD3]T2!2uY];2`NcWr]9j:rB9p?!'^BF"Zn_(2DmAk1^,`p2E*TT
r&Fa<pcAU@4?Yegr]16C2Dd0D0J<>V&I8XK#n.4P&/#]o)&jV=+X/-0+Trl-)]BUn(^Cor)]Tk>+!:G(
![/^2"<o*:-78L8#ppuE,Tn*H(`*te'aGNl)&XA4*$,#"!$D1_!$V7a&L/MG,9\-N*Z>h0&e>BZ#mgn8
i;hg5huDR/h>Z:.htu9ph>c=2hY5q&hX]J&hYZ4/iVArBS&q2tS,8`?SH#)URf+fF/hSh31,:[D2E*Vm
3<D0!2Z>T62#]B42Z>Z83;Y]93q>?83B9#U2#]951,:XBrAFF1!''^5$TU4,3&``P1,1I90)dF4#RC_C
$OdFQ&/#]o(`=:i*=3Z&(`4&)'bqK#rYPbU)&aG5r>Yq]*ZlLIp)sqh+<DL?(_m_u'+kij'c%V`(]YHQ
)?:`T*<.&W*Y081)]9G,&e>E[$OI+FiSjdpro!b4o\TK&n_Wrpqqh))khc6p!9!h7q3q8OqOIJRq4$?5
oUG*8rgWeRr@A:./h\k40f(XD2E1Lm!]N"pr\XX2r\XX4s#0j7r\sd8!'0^5%66F.3&WTL1GU^?0f(Wa
2#0$02tf3;2`<QO1GLU</h[,T%L34E#RUqJ%1Wp_'c.])r#6"^)&O/*'bqAq'bqM`(B><L)$Lot*#ot?
r#beX&KMl3)Aj5''+kff&/#Wk'c%Sa(]P?N)?(QP)\3o.)AsD0().;i%1ERM#mc%~>

%%EndBinary
grestore
np
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
%ADOBeginSubsetFont: LKOBAA+HelveticaNeue AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal LKOBAA+HelveticaNeue gcheck setglobal} if

1 0 1 <> LKOBAA+HelveticaNeue AddT42Char 
1 1352 8 <0002001c0000020302c50003000e0051ba0004000000032bb8000410b800
0010b80009d0b8000410b8000bd0b8000410b80010dc00b800052fb8000a
2fba0001000800032bb8000110ba0003000a0005111239b80004d0b80008
10b8000cd030312523133313112301152115333533350153eeec025044fe
bd01375060f1015bfea501d4fe3352a6a64b0000>LKOBAA+HelveticaNeue AddT42Char 
1 2268 12 <00030028fff5020402c5000f002f00410161ba0030001600032bb8003010
ba0026000800032bb8002610411b00060030001600300026003000360030
00460030005600300066003000760030008600300096003000a6003000b6
003000c60030000d5d410500d5003000e5003000025dba00100016003011
1239b800102fb80000dc410500da000800ea000800025d411b0009000800
190008002900080039000800490008005900080069000800790008008900
080099000800a9000800b9000800c90008000d5dba003a00080026111239
b8003a2f410500da003a00ea003a00025d411b0009003a0019003a002900
3a0039003a0049003a0059003a0069003a0079003a0089003a0099003a00
a9003a00b9003a00c9003a000d5db80020dcba001300160020111239ba00
2300160020111239b80043dc00ba003f001b00032bb8003f10ba002b0005
00032bb8002b10ba000b003500032bb8000b10ba00130035000b111239ba
00230035000b111239303113343e0233321615140623222e02271416170e
0115141e0233323e02353426273e0135342e0223220e0213343e0233321e
0215140e022322269b14212e19344342331a2e22145a362d3c4025415833
31563f253e402d351833523a294b3a22411729371f1e3528171527352042
55020d1b281c0e3736363c0e1c2b20305112155d3f3651361a1c37503442
5b14144f302241331f182e43fe8c1f3224131524311d1e32251549000000
>LKOBAA+HelveticaNeue AddT42Char 
1 6712 30 <00010040000003150211002a00b7ba0003000000032bb8000310b8000ddc
4103005f000d00015d4103008f000d00015d41030020000d00015d410300
b0000d00015db80010dcb80018dc4103008f001800015d4103005f001800
015d41030020001800015d410300b0001800015db8001bdcba0023000d00
10111239b8000310b80028d0b800282fba002900000003111239b8001b10
b8002cdc00b800012fb8000e2fb800192fba0026000800032bb8002610b8
000810b80013d0b8002610b80020d0303113113311343e0233321e021511
3311343633321e0215113311342e02232206072e01232207233540550f21
35251d25160955483f1f27160855192d3f2733551a104e306d3a020205fd
fb01420f2d2a1e111f2a19fead01423c48121f2a18fead017b283924112e
2a3028584c000000>LKOBAA+HelveticaNeue AddT42Char 
1 7576 34 <0001001ffff501d60211003a00abba0000000100032bba0020001f00032b
b8002010ba0031001f0020111239b800312f410500da003100ea00310002
5d411b000900310019003100290031003900310049003100590031006900
3100790031008900310099003100a9003100b9003100c90031000d5db800
0bdcb8000010b8002adcb80015dcb8000b10b8003cdc00ba003600060003
2bb8003610ba0025001a00032bb8002510b8000610b80000dcb8002510b8
001fdc303137231e0333323e0235342e02272e0335343e0233321e021733
2e0323220e0215141e0415140e0223222e02745502243c4e2b274f3f271d
2f3d201e3c301f142027131529221602550322394a2c22453723324b584b
3218252c141a312718a3304329120f263e2f2532211407070d131d161419
0f06091421192f3f250f1123382732381f11152221181f10060a1727>LKOBAA+HelveticaNeue AddT42Char 
LKOBAA+HelveticaNeue /CharStrings get begin
/space 1 def
/four 8 def
/eight 12 def
/m 30 def
/s 34 def
end
LKOBAA+HelveticaNeue /Encoding get
dup 32 /space put
dup 52 /four put
dup 56 /eight put
dup 109 /m put
dup 115 /s put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/GTSTCD+HelveticaNeue*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /one /two /three /four /five /.notdef /seven /eight 9{/.notdef}rp /B /.notdef /D 8{/.notdef}rp /M 20{/.notdef}rp /b 2{/.notdef}rp /e /.notdef /g 3{/.notdef}rp /k /l /m /n /o 2{/.notdef}rp /r /s 5{/.notdef}rp /y 134{/.notdef}rp]GTSTCD+HelveticaNeue nfGTSTCD+HelveticaNeue*1 [5.26367 0 0 -5.26367 0 0 ]msf423.308 122.631 mo(0.458 ms)[2.92657 1.46332 2.92661 2.92657 2.92661 1.46332 4.4899 0 ]xshgrestore
363 87 mo
361.086 87 li
361.086 80 li
363 80 li
363 87 li
gsave
/0 /CSA get_res setcolorspace
clp
[1 0 0 -1 225 180 ]ct
[2.39782 0 0 7.66667 135.842 92.6667 ]ct
snap_to_device
<<
/T 1
/W 10 
/H 32 
/M[10 0 0 -32 0 32 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~1b0ai((^fX#7!(9+rh@0$3pe@1b0ai((^fX#7!(9+rh@0$3pe@1b0ai((^fX#7!(9+rh@0$3pe@2(Kjj
((^fX#7!+:+rh@0$3pe@2(Tpk((^fX#7!+;+rh@0$3pe@2(Tsm((^fX#7!+;,97O2$3pe@2(Tsm(D$oY
#7!+;,97R3$3pe@2Cp'n(D$oY#7!.<,97R3$3pe@2Cp'n(D$oY#7!.<,97R3$3pe@2D$-o(D$oY#7!.=
,97R4$3pe@2D$-o(D-uZ#7!.=,97R4$3pe@2D$-o(D-uZ#7!.=,97R4$3pe@2D$-o(D-uZ#7!.<,97R3
$3pe@2(Tsm(D$oY#7!+;,9.I1$3pe@2(Tpk((^fX#7!+;+rh@0$3pe@2(Tpk((^fX#7!+;+rh@0$3pe@
~>
<~0..hZ'FkES#6un0*uPb&#mU\?0..hZ'FkES#6un0*uPb&#mU\?0..hZ'FkES#6un0*uPb&#mU\?0..hZ
'FkES#6un0*uPb&#mU\?0.7n['FkES#6un1*uPb&#mU\?0IS%^'FkES#6uq2+;tq(#mU\?0IS%^'b1NT
#6uq2+;tt)#mU\?0IS%^'b1NT#6uq2+;tt)#mU\?0IS%^'b1NT#6uq2+;tt)#mU\?0e"4`'b1NT#6ut4
+;tt*#mU\?0e"4`'b:TU#6ut4+;tt*#mU\?0e"4`'b:TU#6ut4+;tt*#mU\?0I\+_'b:TU#6uq2+;tt)
#mU\?0IS%^'b1NT#6uq2+;kk'#mU\?0.7n['FkES#6un1*uPb&#mU\?0.7n['FkES#6un1*uPb&#mU\?
~>
<~0..hZ'+P<R#6un0*uP_%#mU\?0..hZ'+P<R#6un0*uP_%#mU\?0..hZ'+P<R#6un0*uP_%#mU\?0..hZ
'+P<R#6un0*uP_%#mU\?0.7n['+P<R#6un1*uP_%#mU\?0IS%^'+P<R#6uq2+;tn'#mU\?0IS%^'FkES
#6uq2+;tq(#mU\?0IS%^'FkES#6uq2+;tq(#mU\?0IS%^'FkES#6uq2+;tq(#mU\?0e"4`'FkES#6ut4
+;tq)#mU\?0e"4`'FtKT#6ut4+;tq)#mU\?0e"4`'FtKT#6ut4+;tq)#mU\?0I\+_'FtKT#6uq2+;tq(
#mU\?0IS%^'FkES#6uq2+;kh&#mU\?0.7n['+P<R#6un1*uP_%#mU\?0.7n['+P<R#6un1*uP_%#mU\?
~>
<~5;Xf4)A<Mc#migQ.3TTC$jd4H5;Xf4)A<Mc#migQ.3TTC$jd4H5;Xf4)A<Mc#migQ.3TTC$jd4H5Vso5
)A<Mc#mijR.3TTC$jd4H5W'u6)A<Mc#mijS.3TTC$jd4H5W(#8)A<Mc#mijS.O#cE$jd4H5W(#8)\WVd
#mijS.O#fF$jd4H5rC,9)\WVd#mimT.O#fF$jd4H5rC,9)\WVd#mimT.O#fF$jd4H68g;;)\WVd#mipV
.O#fG$jd4H68g;<)\`\e#mipV.O,lH$jd4H68g;<)\`\e#mipV.O,lH$jd4H5rL2;)\`\e#mimT.O#fF
$jd4H5W(#8)\WVd#mijS.No]D$jd4H5W'u6)A<Mc#mijS.3TTC$jd4H5W'u6)A<Mc#mijS.3TTC$jd4H
~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
361.086 87 mo
334 87 li
334 80 li
361.086 80 li
361.086 87 li
335 86.6627 mo
361 86.6627 li
361 80.6471 li
335 80.6471 li
335 86.6627 li
gsave
/0 /CSA get_res setcolorspace
clp
[1 0 0 -1 225 180 ]ct
[29 0 0 9 108 92 ]ct
snap_to_device
<<
/T 1
/W 29 
/H 9 
/M[29 0 0 -9 0 9 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~iSibSiSibSiSibSiSibSiSibSiSibSiSibSiSibSiSibSiSibSiSibSiSibSiSibSiSibSiSibSiS`YO
hr*GMhr!;Jhqm8Ki8EPOi8EPOiSibSiSi_Oh;-rEh;$f@gt^]?hV[5IhVR,Ghr*JPiSi_Ph:p`@hV?l?
gY:K:g>1WAgtUT<gtglGiSibRhqd&Agtgc?gY1B8g"P6;gtUQ:g=k?=i8NYRi8EJIgtgfAgYCQ=gtUT>
hVI#CgtUT=hr*JPiSi_Qhr!>Khr!>Khr!>Ki8EPOhr!>Khr*JPiSibRi8<GLhr!>Khr!>Khr*GNi8<GL
hr!ANi;~>
<~R[T\6R[T\6R[T\6R[T\6R[T\6R[T\6R[T\6R[T\6R[T\6R[T\6R[T\6R[T\6R[T\6R[T\6R[T\6R[T_8
S"#n:S"#n:S"#n:R[T\7S!oe7R[T\6R[T_9S=H(<S=Q4ASXl=BS=?";S=H+=S"#k8R[T\7S=Q4@S=Q4A
St;OFSt)=@SXl=BSXc1<R[T\6S"-%?SXc7BSt;OFSt;LCSXl@DSt;LBR[T\6R[]h<SXc4@SXl=BSXl=A
S=H+?SXl=BS!oe7R[T\7S"#n:S"#n:S"#n:S"#n:S"#n:S!oe7R[T\6S"#n:S"#n:S"#n:S"#n:S"#n:
S"#k8RK~>
<~.k<,$/1`>'/1`>'/1`>'/1`>&.k<,#.k<,#.k<,#/1`>'/1`>'/1`>'/1`>'.k<,#.k<,#.k<,#/1rV4
1GCL=1c.'H1c7*E/hSb00.nk0/M&D&.kNG54$,;W3BTGg5!;+o2_m0H2`EWP1G:=2.k<2,3^>qj3'BPo
6UO4276EOk5!_J"5W^bS/1W5'1HRlg4?Geq6UX=184Ga'4[;D(77BI!/hAM'/MT4K5<Cnj5X7V#5=.Ur
2`Wr`5<qLt1bL=0.kE8+1,:R=1,C^B1,:X@0J>+60etL?0eP"-.k</&0JYC<0etO@1GU^A1,(@80JP=<
1GLL5.f~>
<~"U,&6#6tJ=#6tJ=#6tJ=#6tG:"U,&5"U,&5"U,&5"pYA<#6tJ=#6tJ=#6tJ<"U,&5"U,&5"U,&5#71kR
&e5Ba'bqK!'G_Do$4.%I$OR4I#R:M:"UGST+WqR:*[;pW-7(&e)%dMu)&X8-&e#$M"U,2E+"A]\)^R$e
/hSe81*RY[-S$_t.3T?2"pG/:&g8eW,9SEg/ho%72`)g&,q:T(1G^Hr$3p_<#nJ"'-m0TZ.Ocks-nQnj
)BL%K-n6bo'aY*K"U58B&.oHb&J>]h&J5Wf%L`dV&.fEd&./XG"U,):%1j*_&.oNf&eP]g&Io3Y%M00`
&eGBT"T~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
gsave
334.443 86.6627 mo
362.59 86.6627 li
362.59 80.6471 li
334.443 80.6471 li
334.443 86.6627 li
clp
361 86.6627 mo
335 86.6627 li
335 80.6471 li
361 80.6471 li
361 86.6627 li
gsave
/0 /CSA get_res setcolorspace
clp
[1 0 0 -1 225 180 ]ct
[26.6033 0 0 6.51724 109.719 93 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 111 
/H 27 
/M[111 0 0 -27 0 27 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 111 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 111 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 111 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 111 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
o&9K(p>Q#/k2-0sdGaVaU72$2r@Iq"r@[t#p+G>Xr@\+%j"0jRr<30*rWiE/!"/B,r!N</oF1="r<i]7
#mgn:#Nl<a"o$sUi:Pq)i83AkhuDWciUWH9S+E*/S+)m+Rf=o9/-%:$0)[L&1&s'-0`3U&0]Oqf0E<d)
0'FkY/.3sY"U,)7#7(SA$4HhArsnu=!Y5bNq$[<6%M&FKob%'4q@Nc?%LrCGrX.ZkrWi?*!X/bdqVhJ4
iSXOhq;;,,qVV80qr.&&n_s21rL<hWrg`SLjIH1<eXH@dr[n@-0JP=<1]0'21G^f_0`j*d1BB9gju!?"
1G^a?0JDB;pacFr#6"i7#RCbE$k*RU&.oTR'a#*^&J+dL"V21X'GM;Y('#0K(]Y?P(],!H(^Lon'bh8l
%LijG$i:;#$i:;0#QP,."oni(iW%j5htl4(hr*>khu2Hki:l4)Rf8fOSG8T3SG\lLRcBk7/H.7+0JG4:
1Gq&f2ubc81]0!31GgsI2E1(a!&s^5"ueFs1GU[>r@e.&lnA5g!%n(!!%\$R$4$nE$OdFQ%hTKkqA98L
'GC<U"VVUe(`4.f)?:`R*<$l[)B'J3)Z:W^)]BS1'b_/j%Lr@Fr!WN5q@3H5p'V68$4-tD#6tG;"l\G>
iVqd6hu;L1h>Z:.hu)@2h=9;#h>,h+h>Z:0hu;Qshu2L/iVAr@S,8`RSGSf2SGerRRdQ[9Rf+cE/hSe1
0ekI@2)dMo3WqH'3&`bm1^#Zo3&iqu3q5<33r(iB3]K#T1c$j@r\+4(mP4\ps"F='!%n+"(^C9O#RUqJ
$k<g]'c7f-+!2OE*?,k5'c$]^#8J$l)B9b=+8[5Y,6&hd+o`Ya+oEMi+Wh[A(DRSp%f-Y6%KI%9&-*7;
%fQq:$j[4J$4-tC#6kD2iVqd7hu;I4h>5n,h>#h,h;R,ih;81go\]N%oABQ*qr.C?rgWeT!1iVLjIQ4=
o:,ZJo:,KCr[\L1/h\k40f([G3'',`4oRPF4$#@u2?l*"3]fDd4o@M<5Q*bG5Q*hR5<h:m3]K#T1c#"a
!&FL/r\XO1r&":,">V\d0JEDX!%n.#(C(0N#n%.N%M0<j(`OP?,UF]\,9\-K)>k9T)&s_A+s\H3-3,Fg
./kP(-R^Dn.4HYn,pFEL)&F#"r=B2G&eYik'bqM^(BbKg'bhA['+GQd&.]3Y$k!CK#RCY?ro!q;i8FUl
s5*e3pY>W%qqUSnr7V/*rnIM0rndP0lJDEqs5<h6qjRMRr1*\UrgieRkahaFqjm\UqjZi?rL<VOr[eU4
/h\q61Gq*O3]oSk5sYE6!^/V*r&=j?4$,Si56+"F6Ms4L63KS@6UXBB6jZ1G5<V%e3&WTLrA=O3r\jL1
qDJ[<2)@$C0eb75/hR&R(C19Q$4@7P&/,it*?ZRR.4Qbp-mp8`*W-f[*?cUQ-R^JB/cIC#0E3X</hS_.
0/,.90JG+0-mToT)Aa,%r=oPR(Dn#-)B'Rn*<$lS)%RQ#(D[\t&.T-X$OR1G#RC=e!9!h5!oDbhrnRJ+
!8IJ-s5!\2rS7G-mFqHj!nuA_rnIM0pYPo*q:tl'r8.A/s5<k7qjRPSrLESPqOIGRm[j<Js.94\n=8s;
rgWbQr[eL10/,+92)dNW4[2726O#kC5<V(h3rV,E4$>eo6:+(.r'gWTr^ZoVr^?rZ7n?3Cr^R5^69m[q
3]K#TrAOX7r]9j:q`4g>3&ii&2)R0E0eb750)dF4#RLeE$k3^Z()\,8,pt8B0*X$[-m^#Y+9!8c+XAEb
/M8_3rA"F11c51hrA=L0%Q$('3B9#W2)-[3,U"3IrYGkX(`=53*$-1E+oEPa+oWS_*Y082)AsA-'G(``
$k!CK#mgLg!9!k6!oDeirnRA(!8I8'!8IM,m+MEkrRh5*g]#t.h>H.0h<`qsh>Z:1huDX5iV]/DS,SrV
Sc#&ZT)P;YSG\rXT&uXFT)P;SSFE*GSGo#TRf4lH/h\q61H%3R4[25#r'gcV69m^33sIi45sdt/8,l*Y
8H29V8eO]e8kMcO9MA)O8Oc$24Zb\a2uYf:3r_;@4o[_E5Q<qE4UO843]T/Y2)?sA0E*R8/M.57#mq(N
&/,m#+=/Ee0`<g21GLI1-2o(q+X/0[.kWM32)dJn3<)#:48h2]3]]>c4[;4p4Zk_\/gqth*uZ"8)]Tn@
+X/0W,pk#<./tXk,S)(B+<;C<(DIDj%1ERN#mpUi!9!h5!T)Z3h#H++f`Km]g\KV)g]#pog&'A(f\+s3
g]#t0h;6u`h"BFtg]H<ghYuF4i;V^5Rf8fUSGo&[StGtR!1rnTrgr2C!1s1\qOHf@rLEkVr0eKT/M8Y0
0f(XF3]oVm6UjU<84Q0>6pa+$4oRPF5!VF;6q0[;8c23\9DhK]9E.`c:D?Q!9hIoE5sILo3]T5_4$5Yj
5<qO66N':N6Ms+u5X.Cp4$#;X1GLU;/hS_-#RLhG%1a'd)'1"M/2&e=3B/rV1b^L0,UE@6#::oQ0f1aI
3rV5@4T@SC55mbF4WH[Q6UaC06:!an1+Xh!+s.gI+X/-W-R^Do/M8[S0*Em[/M&IP.h='W,pa]U)&Eqt
%L`^P#mpUi!9!k6s5*b1s4[>&!SZ<)g]H6agA'A$f_a;!f_O,"f\$>[gY;MYs4dG)rn7)#s4dP.!o;_i
rnd_6ro*dDs-s"Xrga%\qO[bZpRM;Ul(A!Kr1<t\r1*hXq4.MWrLX"\pn%GTrLEnWr0el_/M8Y00f([H
4$>ks7Rp$B8kDTF7RKI+5!D+n5XIk.7nH<Gr(QcX)c':-;Gp@h:eaPP6U<t$4?G\h5<hG#6:=427f,^U
7f5[T6jc7I5sIIm3&NKH0`E[O/I;al$k3a^(E4MD.PES:3]oJb3]JrL.ju_k,UFlk0Jk[J4$>b*56!nF
6N'1j6q0^>8Ou?@5s."X/1Dnj+s\E]-n6f$0JP@?2)Y@k">r"m1Gf"c&2>dh.OQG_)Aa)!%1EUP$K2'F
iSa^m$/XLngtUQ:g"G$Uf`Bg]r7hA.gY2VZs4Helr72)(f@\d1gY;Y]s4dP,n(I]o"P__eh;8.gs5<q9
r0dVTrLEnYs.94^r1<t\q4.MWl_"!Grgs1^pRV>Un"9TNs.0+Ys-rtU%P97b/hf(=2EErb6:==8rCd>e
8k2<:r]gWN5!_P)7fl7S9`.Tb:B"&a:]jTn<)ros'N.b$8OZ!45X%@r5X@_)77Kd=8P8tTs%N>_rCJ)$
7RTR-4?>AX1GLO8/hIA:$OdLX()S);-n[543^#\+4V9b61+k%*.46Jo0/GOI4?YqqrB^QQ6q.&Dr'hVr
8ki)U9MA&J5<1MQ/1Dnm-n-]"0JYID3BB;!4T[`-48q8O3AiTI/gqqc)&<hp$k*LNro"XNhr!;Ih;$f>
g=b03f@S[-g"G*5gY;__!o)G_rn.;(n(7Qirm_/&f%8O,#MIhcgYCT=g]#q+g&K^tfDaG%faHNggt^cC
hr!AMiSja(s-s"Xs.01]pn%PXq4.MWoq1lLrh9=args1^qORYXr1EGM!hPsRrga"XrL+9L/M8\21Gq*P
4[DJ+8P;cQr_3Pi8Oc*762j+R6:FC98k_tY:]+&`;B&P7='/O*<`N$n91ME<69me%6UXC68P2WL9htL[
r(R2c9/0".7RB=$3&WQI0.nk/#mq%K%hf`s+=/Qn2*!fc6:*t'4ZP>Q/hAJ%.5!>43BTJkr^?`Ts$uoV
r^e&&:Jk(i;G^.\6p3Fa0.n_(/2&\62*!c^5!_O77/fXT6iKCc5s[^u3]AiI-QsHH'G(Z]$OYkO%,p.%
hqm5Ggt^W;g"H;Trn.;*qqD,)rn.;(n(7Nhrmh&"s4@;(s4[D*s4[J*s4Hkn%bTIfg=k?;h;7&Hi8ESQ
rL3bUrga"Zs.9.\r1<t\qjd_Yoq1iKrh9=args1^qjmbYl(7sIrgj(Zs-rtU%P97b0/57?2`a,g6q9gB
r_<\m9h\/L770E@5m0PD84lMU9htO]pJM,m<)m"%r`9e6;GTtW7R][15sdq-7Rp$B9MJ8XrD3Jkr_WJf
*DK0u7moX+3]AlM0.nk/#mq%K%hf`s+=8Wo2EF#!64Z7A2DQp</Lr>)1H7HZ5XPB<s%!)[rCHu[r^e)%
9i+_e<)QRi8jtm&1bgX6.kWJ11cIHY5!VG&rC-cXr^QfS*^i7V3]8ZA,T[g<&.AsT$K9t%i8<GKhV?o@
g=k64r7;)(g"G*5rS.A+rn6blrRUns"P22Vf\-;YrS.A+rRq5'nCJ!!g"G*7gtgiDhu;O6iVf5FS,SrX
Sc>;UT)bJ[SH,8TTC\`RU&UebTDtM\SH,8WTDtPYT_b8^St2GOS,f&WRL^u&/h\q82)mZ^6:FC99MYR_
&5Gql84H$86U=",7S-3G9i(X_pJN)3;cQk"=]ea,<`;gg8Oc-95s[k,7Rp$B9MJ8X:f1*b;Z9Mo:JD-g
8Oc!/3]JuP0E*RK#n%.M%hofu+X\is2EF#g6psC/5Wq(`0eY13/MT(B4[)2#qaUZX8bYgt:/Oqi<)Z[k
91D-+1bp^9/MAh82E<i^5X@e-84`VLs%*,\&k>>T4ZP;L,p4*B&If-W$fU(&$fKq"hVR&CgY1?6f_a;"
g&Ke*gAot,f`9\!fDO2"fDF.seHa[Vf@\d0g=lP\s4[J*s4I5#pX]>q#h[hag>(K?hV\=j!9*mFs-s"X
!hGmRqOd\X!1s.[!1s([rLa._nt>oSs.K=_!1s.[s.9%Yo:Z&S!hPsRrgWtXrL+3J/hSe31Gq-R5=.h1
8kf.Y%S]Vh7n#j76UO:58k_rT!)WVl!)WYmr)3SnrDNi!='/U.r`9;':eaPP77@,B#t7?T8kMcO:Japf
;?0Yj<$"q7:JFJO6U*Xl2)?m=/hRJ=$k*[](E+GE/i,IL5Q!n[69R@f1GLR:0/GOK5!VJ)rC?u[84`PK
&P>Yh:/Otj<E)mo9L_9.2D[&d0+B]p3'08f5sn+48P2TJpe2`$7moU*2(p=#)]'+r$k*O&iS`YOhqm5F
gtUQ9g"?2R!nc2Zrn@D,rn.;(pXf&g!S,]ueHFITf\+sXgAfq-gAT\)f_sFnf)F8+f\,!6gtgiErnme8
rL3bUrgX%\SY#MHs.94\qOd/Jqk4"_rLX(]rLEq[q4I\[o:Z&S!M5k]S,f&WRL^u&/h\q82E3c_6:OL<
9i(^a%o5kk84H';6psL88ki#U;#4)`;]f"@=B\j0='&?u9hIrG770F27S$*C9MJ8X:f:4j<)iTl!`Mrl
)b`dj5W^ta1G:C6/d_sp$kO*h)BgI\1H7K^7/]Re6U*[l1c-sA0JtjQ5XIn08kT%Qs%<8ar(A2,9M\Pc
=&i4!;GBYI4#f&O0/#%:3&s,b5se"08P;]N:&Rlc:_QSs7moO#0e"7d(_R8d$k)%Qi8=t"hqm5Ggt^W;
g"?2Rrn75'rn.;(m+;6frm_2'f%8O+g&B_)g]-"+f`9\$fD!kqf*Bs]g>(K?hV\=j!9*mFs-s"Xs.01]
qOd_Ys.94\qOde\rL`YRrh9=arh'4^rLNt[pn./NrLa+\rgWtXrL+6K/hSe31Gq*P5!_S,8PDnX:BaKe
8k;E@r^@#\84lTN:J_*j;GmEiohl8u<EE:(=&r=!:J=>M77@,B$:RET8P2ZM9i"S_r_iJi*`>g09LqQ9
4#f,S0/"q1$4@7N%hf`s+=8Wo2EF#grBq/_5!(\[1bpd?2*!fb6:=<B8H)*[84ibP"%c'T8J"Hc9MSGa
;c6Ff8jts)2)?rc0+B]o3&s&`5=._,84cBFrCm)_%S9,V4ub5E+WM=3%1EXQs5F"9rne%=h;$f>g=b03
f`'J&f`'S$gAfk+f^.5eecsaXf\+s3gATe*gAKV(f^RJuf\,!4gt^cChu;O6iVf5FS,SrWSH,8\TD>,Z
T)P8\T(ATST_Y5UT`(J_T)5)YT(JZNT`(JaSt2GOS,f&WRL^u&/h\q82)[KY5t"16925@["&2H\8,PdW
7S$,R9MJ;YrD3Jir_WVmq+r,1;cHas<)cdn9hIoE6pj7+6UX@47n?3D9MJ5W:Jh$fqbeS9;Gg4a91M?6
4#f)R0/"q1#n%.M%MBNo*[N9i1c[]a62j1S5s74d1Gf"b"uJ>&5=%Y*rC.#\7Rfm=84Q/M8,Yn#7n?9I
:ese[91M922D[$?/1`G.1,LmK3^#Vk6:4127nESMr^m_p8Ol064Z4r@+WD41%1EXQro!k8rndt;h;$f?
g=k6Wf`0Y$gA]b*f]q&gf)4,"fEU$_g=tB;h#?(-gAKY(f_!c%f\"m2gYCWAhV\=j!9*mFrgWnWs.01]
pn.PWrga%\kF_^Gr1<t\pmqGVrh&SM!hPsRrgWtXrL+6K/M8\21G^mK4?l/#7nHDQ9`n']8Or\I"\)$T
9MJ7V:]=2e:E*,-;H-Rm;,L+_8Oc*85sR\$6:4117Rp!A8kf4Yr_NMir)!ht:/"5K69dLj2)?ob/f=p$
$4ICW'Gqi8-nR/33^,eo5s[^u3AiTJr\4[83'0;h6:411rBgTR7K,aW77@&@+\#!o9M7rK845X%1b^R7
.Olu%0/57>2E3`\4[;;"6UXBB7Lr![8P)E?5s@=d/ghb\(D?]U!=RifiSi_nhZ2O4h#H+-g&BY'g%sG%
g&BY&f)XJ!fDO:sf*0g[g"P38rS7A+rn@8&rRgqt$/!qag>(K>hV[5ihuMa6RfAlVSGo&ZT)PAZTDkG]
SH,8<TCncTT'W'NSt2GOS,f&WRL^u%/hSh41Gq-R4[DJ*8PAtT!_Q!Qr^?uY6q0^>9E\$`9hnI]:&Rl`
9`n0f;,R<h"\hTZ770B>5R9YB6UO:27Rp#K9)hTa:&dug:]=/u:/"8O7R90u3&NHEr[oE$#mq%L&/5m!
+XJWm1c[]^5!M7p4#f&P1,1I:1cRQ[5=%U6639D=6N':O6Ms(f6:=:77n,s:5Wgt[0.\S%.4Ql$0/#%9
1c@<Sr]LKN5X@\&6:=6@7LDIH4ZP;L,p4*A&cN1=$i],bi;VU7hVJ1drn@;'rn@;)rn?Viqq(u'g=cP]
pY>c&r7^u"rR_V5g"P07gt^`Bhr!AMiSj^'rgWnWrgj(\r1F"\qORYXih-7BnsocPrgr_Rs.97]rga"X
rL+3J/M8Y/0etOD3BTMl6UguF"\D9V7n,oE63otK7nH9E8kVhS9)hQ`9)M6^8kVkW9aFBb8k)385X.I3
4Tdo55XGB9"[kaJ7n6,L8cME]9*.d[8gR&!7RB=%3ArZJ0.nk/#RLhG$kEpa(`ahK.PEP93&ioY3&WQH
r[n^5/hf(>3B9/`4Ztni4$,S(4T[`.48q8g3B92b5!_Ct5!:qa0eFh&-6si_-R^Do/M/S/0f1aG3&ru[
4$,SgrB:cS3ArZG-R'QJ'FtT\$OYkO!o`+rrSIY4h>Z10g\TV(g\T\*gYpidg\fk+h=o\)g[Wu#gYCT?
hYuC4i;V^4RfAlUSGo)YT)P>US`-1>SbS`MSarBPSc,&YS,A`S/JKfi0JP=?2`Wua5X@b*6q'O46U=!8
56O5;6UaHD7K,dU7JoXP70H"I7Rp#K7gDLP69m^s4?NO'$9L@44[)%o5X@\&r^6TPs$luX-:L<i5s@Ck
2`3?E/hS_-#RLeE$k3^Z()S&9-7CDu0ekF>0eP"+r$MRr/MAmY1B]Nk1G^fc1]K<21B9301(Q)q1c@<P
2Dm<H/Li(m,9d%/%j</C,pjrd.4Zr%/het71B''C1c.'J2)?s?/12V_(`!\m$k!CLr8@Y6rSIV3rn[S/
rnIA+rS@J.nD!lrq:ko(!8[\2rSIA+ptY]"rnIS2h;8+frSdR@!1WkUqORGPkFMOBs./SJn=BKI!1WkS
r@AX8/het82)dNV4$>em5X7V"5<V.lrAt'D5!S^+!(-WMr':9JrB^cU5sILp4#o;\r\sd9rAt*D4[)(/
5Q="I5m0M@5s[^A5<V(g2Dd0C0J<>V*sW#V#RUtK%MKTp*$6@O-n$Mn.OZYk,U4KW+X/0Z./k^q/Ggq#
/M&D&.f:^r.kLWN(+_!b-6jWS*#fb5)B9_<*ZuRK+X89[r[/O2.4H_r.kE8(/1N%q-6O<G'bUub$4."E
ro*k8!9!e4!8brU!8dM.rnctsr8.M4rSdO?!1WbRXdfB\qO7@6$8!k_0JG7=2E!NTrAt-E4$,J`r&=a=
3]m='niZh3s#g<Er]C?G3]K&V2Z,E/2Z>Z93W;)<48M&G4$#A\2)I'B0J<;U!!`E-$OI.K$k<ma(E"/5
+9!Dd+sA'M*W-lZ*ZcFJrZ_CgqBQ"cr?;4br?2as,UF`^,9n<P*#]\2()7Q"(B,-L)$:cr*$,#"r?2(`
rZhst+<DOA().>j$k*FK#RL:c!9!b3ptbi(hVJ1goABQ(o%a<&qqq>1pR2)OaIN0tpRLZA!1WeQr%.h"
#;@he1c.*L3;bf:3;YW53;tr93WM2;3r_5;3;bf?3B9&X2Z>N51]B-01]'!/2>oE52u>T73W;)=3!V?!
1bpa=0/!2T!!`E-%1!:J$k*UY'G_K')]Tjs*<@)tq\]GR)]\htr#PhYq]>bXr>YhW*;^cb*?,n6()@St
&eP`irY,SP()@]&(`=4j)ZLcV*<.&Y*Y'//)As;)&Io3X$OI+F#lW`]iW%j6hq-`_h>Z:#hsTA!hZ2U4
iV/f?S,/Z(SF`6:SH#)SRf"]C/M8Y/0JP@>2)Y1gq_\@3r&4U8p,Mk,!''p;"ZSG"2Dm>j1]B-*1B990
2#oQ22uYf92[;2s1GLR;/h[)S!!`E-%1!7I$OdIU&el)u(`=4j)YY*I)YG'K)ZL]S)#tWS*!dK%)&O/)
'G;&X&H3:B'E/[J'c%T%q\T;NrYkbT!#khR$5F3b%1EXP#mgkCJ,~>

%%EndBinary
grestore
np
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
GTSTCD+HelveticaNeue*1 [5.26367 0 0 -5.26367 0 0 ]msf337.451 85.5348 mo(0.228 ms)[2.92657 1.46332 2.92661 2.92657 2.92661 1.46332 4.4899 0 ]xshgrestore
510 50 mo
507.789 50 li
507.789 49.5663 li
508 49.5663 li
508 43.5506 li
507.789 43.5506 li
507.789 43 li
510 43 li
510 50 li
gsave
/0 /CSA get_res setcolorspace
clp
[1 0 0 -1 225 180 ]ct
[2.64045 0 0 7.66667 282.6 129.667 ]ct
snap_to_device
<<
/T 1
/W 11 
/H 32 
/M[11 0 0 -32 0 32 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~1b0di'bC]U!s8W^.jGuJ&./RC!s:A1,9%@/$3^M6"#MMQ)\ink"Tni/1b0di'bC]U!s8W_.jGuJ&./RC
!s:D3,9%@/$3^M6"#VVS)\ink"Tni/2(U!l'bC]U!s8W_/0l/L&./RC!s:D3,TIR2$3^M6"#VVT*#9(m
"Tni/2Cp*n((glW!s8W`/0l2N&IJ[D!s:G4,TIR3$3^M6"#_\U*#9+n"Tni/2D$0o((glW!s8W`/L2;O
&IJ[D!s:G5,TIR3$3^M6"#__W*#9+o"Tni/2D$3p((goX!s8W`/L;AP&ISaE!s:G5,TIR3$3^M6"#__V
*#9+n"Tni/2Cp*n((^fV!s8W`/0l2N&./RC!s:D3,TIO1$3^M6"#VVT)\ink"Tni/2(Tsk'bC]U!s8W_
/0c)K&./RC!s:D3,9%@/$3^M6"#VVS)\ink"Tni/~>
<~0..kZ'+P<P!s8WY-Qj6>%LE:@!s:2(+;bb%#mCD5""u#E(_[Ac"Tni/0..kZ'+P<P!s8WY-Qj6>%LE:@
!s:2)+;bb%#mCD5""u&F(_[Ac"Tni/0IS(]'+P<P!s8WZ-m9E@%LE:@!s:5*+W1t(#mCD5"#),H)&*Pe
"Tni/0IS(^'FtKR!s8WZ-m9HB%g`CA!s:5*+W1t)#mCD5"#),H)&*Sf"Tni/0I\._'FtKR!s8W[.3TQC
%g`CA!s:8,+W1t)#mCD5"#25K)&*Sg"Tni/0e":a'FtNS!s8W[.3]WD%giIB!s:8,+W1t)#mCD5"#)/I
)&*Sf"Tni/0IS(^'FkEQ!s8WZ-m9HB%LE:@!s:5*+W1q'#mCD5""u&G(_[Ac"Tni/0.7q['+P<P!s8WY
-m0??%LE:@!s:2)+;bb%#mCD5""u&F(_[Ac"Tni/~>
<~/ghbY'+P<P!s8WX-Qj6>%LE:@!s:/'+;bb%#mCD5""krD(_[Ac"Tni//ghbY'+P<P!s8WX-Qj6>%LE:@
!s:/(+;bb%#mCD5""kuE(_[Ac"Tni/0.7t\'+P<P!s8WY-m9E@%LE:@!s:2)+W1t(#mCD5""u&G)&*Pe
"Tni/0.7t]'FtKR!s8WY-m9HB%g`CA!s:2)+W1t)#mCD5""u&G)&*Sf"Tni/0.A%^'FtKR!s8WZ.3TQC
%g`CA!s:5++W1t)#mCD5"#)/J)&*Sg"Tni/0I\1`'FtNS!s8WZ.3]WD%giIB!s:5++W1t)#mCD5""u)H
)&*Sf"Tni/0.7t]'FkEQ!s8WY-m9HB%LE:@!s:2)+W1q'#mCD5""kuF(_[Ac"Tni//gqhZ'+P<P!s8WX
-m0??%LE:@!s:/(+;bb%#mCD5""kuE(_[Ac"Tni/~>
<~4u=`3)&!G`"9\ik1b'Uc'+G-K"9^nF.NfTB%0cq<"?nXl+;kh%"p>&34u=`3)&!G`"9\il1b'Uc'+G-K
"9^qH.NfTB%0cq<"@"an+;kh%"p>&35;ar6)&!G`"9\il2(Kde'+G-K"9^qH.j5fE%0cq<"@"ao+W;"'
"p>&35W(&8)AEVb"9\im2(Kgg'Fb6L"9^tI.j5fF%0cq<"@+gp+W;%("p>&35W1,9)AEVb"9\in2Cfph
'Fb6L"9_"K.j>lG%0cq<"@4ps+rV.*"p>&35rL8<)\`bd"9\in2Cp$j'Fk<M"9_"K.j>lG%0cq<"@+jq
+W;%("p>&35W(&8)A<Pa"9\im2(Kgg'+G-K"9^qH.j5cD%0cq<"@"ao+;kh%"p>&35;ao5)&!G`"9\il
2(B^d'+G-K"9^qH.NfTB%0cq<"@"an+;kh%"p>&3~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
507.789 50 mo
481 50 li
481 43 li
507.789 43 li
507.789 43.5506 li
482 43.5506 li
482 49.5663 li
507.789 49.5663 li
507.789 50 li
gsave
/0 /CSA get_res setcolorspace
clp
[1 0 0 -1 225 180 ]ct
[29 0 0 9 255 129 ]ct
snap_to_device
<<
/T 1
/W 29 
/H 9 
/M[29 0 0 -9 0 9 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~iSibSiS`\RiS`YPi8EPPiSibSiSibSiSibSiSibSiSi_RiSi_Qi8EPOiSibSiSibSiSibSiSibSi8EML
hV[5IhVR,GhVR/Ji8EMMhr!AMi8NYRiS`VLgt^`AgY:N=gt^]Ahr!;Hh;-oChr*JPiSi_OgtUT=gY1B9
gY:N=hV[2FgY:K;gYLcFiSibRhV?oAgt^Z<gY:N>h;7&GgtUT<gY:N@i8NYRi8<DIh;-oBgt^]@hV[5K
hqm2Fh;-lChr*JPiSibRi8EPOi8EPOi8EPPiS`YPi8EPOi8ESQiSibSi8EPOi8EPOi8EPOiSi_Qi8EPO
i8EPPi;~>
<~R[T\6R[T\6R[T\6R[T\6R[T\6R[T\6R[T\6R[T\6R[T\6R[T\6R[T\6R[T\6R[T\6R[T\6R[T\6R[]e:
S"#n;S=H+>S=H(<S"#n:S"#n:R[T\6R[T_9SXl:@SXl=BSXl=AS"#q<S=H+>S"#k8R[T_9SXl=BSXuFD
SXl=BS=?%>St2IDSXc1<R[T\6S"6+@SXl@DSXl=AS=?"<SXl=BSt2FAR[T\6R[]h;S=H+?SXl=AS=?";
S"-"=S=H.?S!oe7R[T\7S"#n:S"#n:S!oe7R[T\7R[]e9S!oe7R[T\6S"#n:S"#n:S"#k8R[T\6S!oh9
S"#k8RK~>
<~.k<,$/M/P+/M/P+/hS_-/1`>'/1`>'/1`;%.k<,#/1iG*/M/P+/M8Y-/M&G(/1`>'/1`>&.k<,#/MK"?
2)7!I2`E]U2`<EE0/,.:0ekC9/M&D'/1rb@5!1hf5X@V!5X.Cj0f(dN4$#D_1b^L4/1`G45!_Ft5t+70
5s[_!3&<KX6UF.,5WU\Q/1`>)2*F2h5!MD&6:!ds3]/ZO5=%P$6UEpm/hAM'/M]:I3]T2_5!;%i2Dd0C
1H7BT3]oMa1+b%-.kE8*0J>(40JG170J4t0/M/S./h\n40.e_*.k</&0/,%40/,(60JG+3/M/P,0.nn3
0J>"/.f~>
<~"U,&7#RLbB#RLeD#mgnD#6kA:#6tJ=#6k>8"U,&5#7(VA#RC_C#mgnE#R:P<"pYA<#6tG:"U,&5#n@[f
((h5u)AsJ5)&Nnm$P!^Z&.f?\#mUV<"pu%f-6jQU.Oukp.46AY&/#p)+<M[G'b(EQ"pPGP-S$Yn.l0"7
/1W(p)\O#:/hSb/.N]90"pP8=(*k=W-7CN%/h87k*u>M,-S-`!/hJ=_#mUV;#nS$u*uuCI-7'oZ(_mSk
&fVl4+!MpL&.&OE"U55?%1EUQ%1WjX%13CI#RLhG$4@:P$OI"@"U,)9$OmLP$k3[V%LiaO#RC_D$OR7N
%1<IH"T~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
gsave
481.147 49.5663 mo
509.293 49.5663 li
509.293 43.5506 li
481.147 43.5506 li
481.147 49.5663 li
clp
508 49.5663 mo
507.789 49.5663 li
507.789 43.5506 li
508 43.5506 li
508 49.5663 li
gsave
/0 /CSA get_res setcolorspace
clp
[1 0 0 -1 225 180 ]ct
[.720123 0 0 6.46875 282.6 130.146 ]ct
snap_to_device
<<
/T 1
/W 3 
/H 27 
/M[3 0 0 -27 0 27 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~1b0e-.jHo%,;q,!2D$14/L<;,,rR>$2D$46/L<>-,rdM(3%cO;0.&Y3-9*Y*3%lX=0./_4-T<Y(2_HC8
/L<>-,rR>$2D$45/L35+,Q~>
<~0..kq-Qk&i+>5/e0.A%u.3^Gp+u(Mj0e";$.3^Jq+u(Pl0e+D&.jHf",;Lbo1+OV*.jQl#,Vghn0e+A%
.3^Jq+ttGi0.A(u.3U>n+T~>
<~/ghbo-Qk#h+>,)d/h%qs.3^Do+ttGi0I\2".3^Gp+ttJk0Ie;$.jHc!,;C\n0e4M(.jQi",V^bm0Ie8#
.3^Gp+tkAh/h%ts.3U;m+T~>
<~4u=`Q1b(^H.R5mB5W1,X2Cq*O/3l*E5W1/Z2Cq-P/4)9I68pJ_3%[KW/OMKL6T?\c3%dQX/j_KJ5rU>\
2Cq-P/3l*E5W1/Y2Ch$N.f~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
507.789 49.5663 mo
482 49.5663 li
482 43.5506 li
507.789 43.5506 li
507.789 49.5663 li
gsave
/0 /CSA get_res setcolorspace
clp
[1 0 0 -1 225 180 ]ct
[26.3636 0 0 6.51724 256.719 130.241 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 110 
/H 27 
/M[110 0 0 -27 0 27 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 110 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 110 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 110 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 110 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
p#5r/rSRY5pYk>nrnu&[n=$/Aq^h[ts"=+#pFcCtpb2FsqChk$qCVFmmOe>fpac:Irs/N0!"/Z4r=/E-
p'g[)rseu:r!WN3rsAZ1p]gd)mKik!r<N*$pu0KT!9!b5fAZ:hs-r5@pRC*0kaME#s"47'r\"7*q_A+)
q(Mb%oeH7tr%\4*r@\.'r%7dss"3Ujr[n+#!%dssr<<f<#mgqH$k*RS%Ls$]%LrpWp^@-3p(%-7q%3T<
rXSu=rXJl9rsSi6rX&H-rsA]4n-]4'rWrZ4#6tJ0"oI6[i8EMLhtu:%hZ2U2iV_X%hu;R-iV/f@S,/ZO
S,Ac<SGo#)Rf+cB/M8Y/0JG7;r\OU4r\OU2r\FF,">V_g1Gne_pbi+0r&"C.r\4$us"Edor%@dr!@nBR
#71\D$k*RT&/#Zkr>#MM'+tlgr=9#C&JGfmob[KBrYGbS()7Mt&eP9Y%LigT$i:82$iCG/%J1)/$NCD3
#Q4i,"o[E[i;DL3hYu@0hYH(.hYGt-hXfS%hYZ4+i;MR!hu;R0iVK#BS+N6KS)Bh9S+`<=S,\uLRf+fH
/h\n51,CaF2E*TU3W:u:2>o<61c7-L2u,H63;tr83rD#;2[2,s1c$mA0_mC%0`Eg)1A!=#0E<d*0)@+!
#S77J#n%.N%M9?h(`4,0*#omr)#kBM'Ef-d(`41i*![K)*#on;*?G#!!?N9\*!mN%)&O/)'+k`arXAc6
!"Ai9!Y,_Pr"8Z7rX]#<rX8f8$N:>0#QE]^i;MR5hYl73gt^`ch=oe+h<E_oh>c@0htu?nhu;R1iVT)C
S*-=;SG8ZLSGo#TRcU%4RLh&&/hSe20etOB2`WlZ4$5V(3WqE%2E!Gl2?Pou3]m1#r]:*BpcT'K4?GVc
3]T/X2)@$C0`3R-0JP:;1Geh`p+u\&"Y_S_/hSaR//AKt$4@7O%M9Bl)&s\>+<hsO+!)C?)?(EU(`=53
*[(;(rZV@f,l/er,U4NW+WqmJ)]0>)&eP!N#7V+P%M03b'DWC;'+#9_&.]3Z$k!CKrWrN/ro*n8rnde6
hVIq]!8[P/!8Z\j!8[Y2qqhD3r875)pYPf)ro!_5r0mVSr1*YTp7168r1*GLm%"!Cs-ieQ(+h*j/h\q7
1c@<S4$5Yi5<h:o4$,J`r\t$@3BB5br]g<Gr]gEJqEY*HrBCQN4Zb\a2`3EJr@nL10etL?1c=b\r\Xm:
1G^a?0JEDX!%n1$#m^hE$OmRX'c7i*+!DjT-7C5f,U+BR*?,n9*??4G,UXugr$hUns!dgq%k9"V-mpAg
,pFHO)&F##&H3.E%hB6b',;<"q&/lB&JYrl&.T-X$O[:J#RC[oiS`YnhZDZkh>H(.g\T\,h;$fag]6++
gABY#gATe(g]H<ghYH(-hZ)F0h"]_%hYl@2i;MX5Rf8fTSG&NOSFE*>Sc,)SS*$7>S,/Qg/M8Y/0etOB
3''/c5=%S%6:!k$5!Ag*"?\h35skH:s$QfQs$QTMrB^WQ5sILo"?AG"1c,(c#;\1p2E3ZW3rD)73WM2>
3!qT&2)I*D0eY140)dCD#mq%K%M9Bk)BU1N-RpZ!/Lr7u-6scY+<_pR,Ub/pq_8%'s"==)q(N71/hJY*
.OQJb*?#b0')`CI',;<$)B9e?r#tkX)]g">*#fb4(DRPo%L`^Q$4$nBiSi_Qhr!;Ih>Z10g\fe*g\BP(
g]#q)g%a;#g%jA#g]H<ghYc:1h>lBug]?3drndV2ro!e7rL3bUrLEeVs.8hQs.9.\pn%JWqO[YVrLEeT
qjd/Hq4.GRqjIO;/dj9b0f([G3]oVm6::]>%73BI5X.Cp5!M:t6:=<>7fl.K7K,dQ8,c!W6j>qA4Zb\a
2Z>K?1c.'J3'',_4Zu"orBC!>,<S%L3]K)W2)?sA0/"q1/M.;;$k3a](E"8=-S$f&0JP:9/e'E`.4?Ge
-7C;m/hf+?r&4^81c$re1a4e72E*QP2)I-G0ek@5-m^#X)Aa)$',;5u)&jV?+s\H^-iGCl-2Jl!,9e9Q
*#]Y0'+bW_$O[:J$/tmA"5i"mh>Z4.g&Th(gAfq-h#?(.gABRjg&B\*g]#t1h;7#Gr8%G0r7q,&p"TW)
hVS4gs5<n8rL3bUrg`tYrgj+^rLWeT!1rJJrh'1]rgj"X!1WhTlCIjCrgWhS%P9:d0/>@C3BKDj6psL6
r^RDe7RTU05X7V$6UXC68cD?g9MA)O8kDQF8bl!X8Ie6\7RTR-4ZbY_2)I0J2?u-"3]oSj5sbB7q*?`#
5X.Ir4$#>Z2)?sA0.nk//IDmp%1s<l*?ca[0JP@?2`<NM1GCI5.Ocl"0/,4A3r;&@4?NL%!':*@&j/9<
4$#A^2`<KI/LVng*>oY.rYGhX*$?IQ-n6c#r%.t$/1^WK)_!3a-R9iV)]0>(%h9!U$4.$ti8EMMhVR)D
h#?%(g&B_)g]-",f`9\%fDjM#g&'G!g&Ke*g]61,hYl40g[Nqsg\on1h;7#GhZD]ni;V^7RfAlVSGo)Z
T),)ZT)>,ZT&ZICT)P;USG\rOT(efSSGo#URLh)(0/57?3''2g6UjR:8P2SY8P)HC7Rd;D#=V'O8P2ZO
:B"#l:/+GU9DhK_:&R`m8kMZH7RTO,4ZYS$2@)9%4$>eo6:=6?7efD$6psC/5sILo3]K#S1,1F8/hS^`
$k*UY(E4GB.PEV:3''/a3]T/W1bnt_#;J"m3B]Sn6N0@U6:!k"4oIPJ5<qM#5<o-1(-FW<1bgO/,Tn'D
(Dn#.*$HUV/1rV2rA4L1r%e7+*\]9$/hACs+s7gA'bLrc$jm=JiS`YOhqm5Ggt^W;pY#Jurn.;(pt#Q!
g%a2"f_a>'g=k<\h#-"/h>Z10g]#ptg&9V)g]#t0h;7#fhZ2U6iVo;GS,SrXSc>;UT*1aVSXuG4TDtM^
Sc##WSGo)YT(8NPT)G5ZSGo#VRMIM.0/57@3'0;i6q9g?8kVfL8kDQD7fGg[7S$*C9i(ab"&Vol:\@H]
9G^;n8P)E?69dUp3&WZS3'',a5=.b-7n<PMrCHlXrC7r!7RTR/5<V%e2D[*C0.nk/$OdFR',VZ2-7gl0
3BB;%4UjJ63&WTJ0f(XF3B]Vpr^I)^84H!65X503r]pQM5Q3e]4?>M\0eFe!+WM@:)B9eA,q(B#1Gq,j
3VbWC2`EWP1c-p>.OQJa)[I5n&Io3V$45YhhZ_lmgt^Z<rRq5'qq;#'rRh2'o[j,qr7Cu$qq2&)g=uV^
!8[Y2#2S+jgtUQ:rn.;(nCdiqrnIS2hVS7h!oW%rrgNkVrgWtZ!M,hTTDtMZTDP;KTDtM^SbelUSc>;J
T)bJ^Sc5/YS,Jcc0/#"61H%6T5=.h28P2YT9F"3_8kDQC7RmVQ8kVlS;#=,l:esj\:&[ic8eaie6pa+$
4$#;Z3'')`5=.e/8P)SS9`7W`9E7`a8g-bt7n,j35<Ltd1c$j?/hS^`$k*U[(`abI/MfCJ4?Ynnr]L]P
3B&cO2E<f]5XS"48cD<`84Q)I6N9@L66&9U5!;%k4$#5R/LVng*Z5h8*Zu^V/i#=F3^#\!4VBh;3B&`I
/12Ya)AWtt%1EUOi;MO:hVHuBgY2Y[r7Lbsrn%%up"05rqUkl&!8IM."5Vhjh>Q+/gA]b*f^dYof`'S(
gA]n-hYuC6i8NYoRfAlVS-#7PT'`0GT^A?OT)P;WS-#7PT)G;KT)bJ^Sc5/ZS,Jcc0/#"61c@BW5=.h2
8k_qX9asci91hfI84lKI9i"S`r)<hu;G^1c:]4#m:JX_[9h\7Z8eX]`69m[q3]K)[4$5_n6qBpC9ht[`
r_<;d"AV]d9h[368k;E>5sIFj2Dd3D/hS^`$k3[])'1"N/i5UP4[24u5X.Fq4?>J]3]oPi6UjZF9a+0]
7n#g6rB^ZT6UF((55m\^4$,>U/h&(j*Z>q<+X8?c0fV9Y5XIk+6iKFM6iKCb5X.Co3&E<?-R'NI'bUra
$OYhjhZVflgt^W_g&K_'f)XJ"f`9\(fD4"jfDjM#f`Bg]rnIV3hVR)fg]Q9ag">]D%bTIfg=k?;h;7#G
hr*JPrgNkVs.'(Zq4I>Pp7UlH!1s.[r1*bW!1s+\s.K:^rLiqX!1s1\rga"XrgFEP0/,+;3''2g6q9jC
9MJ;Y:B!rp9M7uM92&&T:f:9l<<ZE(<Dudmr_WJfs%WMerCRhq77'7'4?>G]3]fJj6q9mE:/Fec;GmEi
!)`\mr_X/%:JX\X8Oc*64ZYP[1GSk]*t&Jd&/?*+,UtK+4Zu"q6UO1,5sIOr4?G\i5se(6:&[rp;,L+_
8Ol9?7K,^S6NKM=!'gHG(csf<1+k"&,9RsG+<i*]0K)'[6UjU<84`_Ms%*,\'hCkc7RTU04ZP>Q.O?2U
(D75e$ObnkhZ_lmgt^W;rn.;(rn%2&qUkl$rn$tspXfGtqUkr(g=uV^"Pqqkh:r1hgtLK8f^78nf\+s3
gA]k3hVR/Ii8NYoRfAlWSGo&ZT'i6FT^SKQT)G5WSGo&ZT(JZJTDtM_Sc5/ZS,Sic0/#"61cIHY5X\+7
8kf(U$;4#a8kVfO:/Fheqc*Yq;Z9Mk:]=)g9`I`a8JXid6pa+$4$#>\3]fJj6q9jD:/=\`;>a8e;$p,r
:JOST7moX-3s.H"1GSk]%LW[S%i#s',UkE)4$>bmr^%,]5sIOq4$#Jf5XIq29287]:Ff158Ol9?6psC0
6:*q%4Ztkf3B9&U0J+\!+s.^C+<i*]0K)$Y6:=:684WYK!(ZlV&k5>Y5s77e0e=[q)Aa(u$k!I$rSIb7
h;$f?!8@G*!nc,Vrn.&"!8.;&qUYJos4I/#!nuA_rS.M2hVR)fg]Z?bg"=sEf+$Bcg"P39gtpoFhr*GO
rgNkVrgX%\SY#ADrL`kXn=K]Pr13_Trga%\kFVgISXobMs-s"V%PKIh0f(aL4?l/%8P2ZMr(R5d92#7V
#>7cc:Jaqg<;ol!<)Z]o:]O;k:]=&l9M.oK84`_M(.CPT5!:tg3&ir\4[DJ+8ki&V:f1%cr_NPjqGB"E
:ej\V7n,g04#f,S0eY.3$OdFS'H%r:-n[>;4Zu"r6:!k%5!D(j3]oSj5t"489hkU^(JRLn7n6$:6pj:+
5X%=m3B/uV2Dm3A.MF-S+W_OA+!N!\0K)$Y5t"147RmAGs$llV&k>D\69dRk1G1$u*#KA#$k*O%rSIe8
h;$f?gAT_'f_F,"f`'M!f(mntf_jG#g&Tn+g]610h>lC2g]lKdg"=s/fC.<#f\+s3gYCT@hV[5Ki8O[(
s-s"X!hGmRm@X0HoUl&QrLNeTrga%\n=K]RrLa%\!hPsRrga"XrgF<M0/,+:2EEoa6:OO=8kf.W!DH/b
8e"Ee9i"S`;c?Xp<Dugor_WSi#Ydud8kMWE7RmAG"[bR?4Zb_(3!hW-4[DJ+8ki&Ur_WMgs%r\l!)ien
&Pu7t91_T>5<Ch_1GLO8/di'r$kF$h*[3!b1c[W\55d`,5<_4m3]]Ad5!VJ)84uTM9hnAS84Q0>6pj=.
5<V.k3Ar]N1G^d>.juYe*ul1<+!N!\0JtpW5stW@#":mH6q'R7r^[_p84Z6?6pNmq1bL1#*#KA$$k*O%
rSIe8h;$f?gAT_(fDsV!g&9P#f(mntf_jG$gA]k*g]610h>lC2g]Z?bg"=sEf+$Bbg"G*7gtgiEhr*GO
rgNkVrgX%\SY#2?rLj+^oq)5Uq47>Orga%\n=T`Rq4IYWs.'+YrgF<M0/,+:2E<i`6:OO<8kf4Yr_*;b
rCR8e92&&U:f@9k"&r2s;Z9K!:JX\Z9M.oJ7n":a779L15sRUq4$#>Z3'',a5t"489MJ8X;#X5j:&[rg
;#aDm;Z9N6:ej\U7moX+3]8fL0.njb$k*X\(`abI/MfCJ4[&d0r]U]Q4?>Mc4Zttq77TuL9-I#&8k;HB
7RTU15X%=m3&WQI0eb76/1Dni+W_U@)BU.L-n6o.4$Gqs6q0R36UF.-77Ka;84cBD84Q-84utVV.O6&Q
'bCc^$fM!@#2\4mgt^W;n(@]no@EuprRq2(r7h2*!8[S0"PqkggY2VZrn./%s4I+u%G9@eg=tE<hVR/I
i8ESmRK/iVSGo&ZT'DsIT_4rWT(nlOS-#7PT')^KSt2FBS-#4MS,Sif/h\n41Gq-Q4[DJ*7nH<F9DhE\
8-MRW8k_rTr_WSl"Ahoj:/:d_#>@`]84Q*:6iKCe5sRUs4$#>\2E*TV4?l/#7nQBI9MPL["\VN_9heCZ
:EN>*8kDK=5<Ch_1GLO8/d`!q%2'Ks+=/Kk1cIEV4ZsTE4Zkee3B/uY3BB8d5XS"27n?3B7n,oF66e`Y
4ZPJZ1GCI7/hJV'-6s`U*#]Y3*$?IR/MT1G4?Ynp5<f'0#<kC=6:4.07K,[e69[Ll1bL1#*#KA$$k*O&
iSa^m"Q%tigtVh^pt>Z#qq;#$qq(i"qq;#'s4dA)!8[P/#2S+jgtUQ:o@`ums4RG+rnI_7hV[5Ki8OX'
!1WqWs.0.\pn.PWlC\*Jpmq/Lrgj(\lC\*Js.0.Zs-s"V%P9:c0JYLE3]oVn6q0[;rCR#[s%!&X#=h9T
8kMcO:&Ifc:&[fk8kDNB770C-r]gfT4Ztkf3&ifR2E2++3^#\o6q9a=8P2QGr^[#\r_!/`s%WJd*_K!n
6pX!u3&NKH0.nja$OdIV()\/<-S7&02)mTWr]($>2E(Ok3]8lU3^#Yn6:4+/6pj:,5X7Ls4ZbY_1bp^:
.k2ts-m^,^*ZQ(8(Dn&3+=&?f0f:mM3]fA_3B0#Z,We+O4[2.s5X.Is4?55Q/1)MY(D@;f$k)%Qi8EMM
hVR)DgtVh^rn7#!qq:u$pY#T#s4dD*s5!Y1!8me4!8[Y0!8I2#p=TT&g=tE<#Mn7nhr!AMiVf5FS,SrV
Sc>;\TDY;ZSc>;LTDtMYSbeiVS,AfTSbeoXSc55STDtM^Sc5/ZS,Si^/M8Y/0f([H3X%Z46:=:4r'plZ
77BU4rC%,b84lKI9MA/T9MA)PrCS5)7n,p769mb"5!;%j3]]5Z2Dm<K2E3`Z4[28$6q'R87f>aZ7Rfm=
8P/hP$V<lY6pa+$3]AoP1&`dC$4@7N&/5s#+=/Ki0JbOE2`<NN1c$m@0JO"k1,CgJ3^#Vi5<qIt55[Pq
4#o2U1+t4.-mp>f,U+?P)]9J/'c.]**[)gX/MJn71c7*G1GUaC1c@<R3]m:&%QZR+0eOk"*Z5b,%LWXO
ro!k8rndb5h>Z10g\KS!g]#q#g&B\(gAfq(g]61.hYuF2hYl7'g\ok'g&B_)g]?6frnde8iSja(s-rtW
rLNhWpRV>Uo:Q&SqORPSrLEkVr1*>Krgs"Zs.94\rga"XrL+3J/M8\21Gq'N4$Gqs6U^oC"@YaI6UUf=
#=CjI77Tm>8c)-X8I.gU6pj7*5<V1/3taS63&WZP1c$pF2E3]Y4[25!646+I6UF()6:4+.77R2F$qNlX
6pj7)4#o2U1GJe\%L<@J$k<mc)''kI.P<A/r\F[41,(@7r@SF10/57?3&ru\4Zr^*r&H;c1b^R6.46Ad
+sA*O*#fb4(DRSt(Dn&2+XAHd/M8Y/0.nh./h\k31,LjHr\k?I2`*6B/12S](_mYm$OR7?i;hg7hZ;Ti
r7q;+p"]T%o%F)ur7q5+rndJ.rn[Y2o%a9"qq;&)rS.G0hYuC8i8ESQRf/]TS,JlDSarBMSbATOS,8`F
Sc#)XSc,)YS,Jcc/M/S-0JP@@2`Wua5<qO66N'1M5l<hM5X@_'6q$`<#=V$I5s[^u4T7AT3B9&X2Dm?J
1GUaB2)R<P3]oPhr'(HN5!M7s5s[h(qa;Dj5sRUr3]AoP0eY.3/I2Xi$OmX\()\,:-7:5nr[n=)/1W2!
r$Vau.kNA.0f/\`rA,NN0eP",-RBu[+<DOD)]9J.().An&el)u)&sbD,pk#<-j_7J-n$Mo.kNA-r%SX5
/1Dni*uPh,%h&gQ$2rf_i;MO5hYu?sh"KM#g]611h>H.&huDR3h>Q./h=98%h;-rdhZ2U6iVT)DS,8`P
Sb\fCSb8NKRfJrHSG8ZPSH#)VRf4lG/h\n61Gq*O4$,S$55mYE48h8E4[)(q5kRDJ5X%@o4?GP`rAOm;
2)I*E1B'!41,C^D2`Ebq3rhDB3s.N*4$3X.4?bqnr'25c4Zked2`3BG0J4t0/I2Xh$4I@T',MN++<_sV
r?haq-6sf[+oWYj,:+Za.4Qi!r[n!u$7dMP-6scX*ZQ(:rYPbR'b_/krXT2F&el)u)BJf"%3Zo=+WqmN
+X/-V-7:2?-jV:N-RBu[*>oXt'+YN\$4.%:iVVNsh=o_%h>c@!htGpsh#Q=1hZ2U5iVAoCS".lrrgWbQ
rgVo;s-rnSr[\C./h\n51,LmK3'$grs#L$;r]'s>r]:*BpH8gF4$,J`3&``R2?#E71GU^?q_/1.1,:[D
2YT003!)*$3r:uG3]]5[2Dd0E0J5!W/.Dgh#RLkI%1a'e(E+86q]>k\*?G(t#94^)+!;aO,P`Sb,nVFJ
+s7sJ)]9J/(D[`"'+tierXK2B$k<dZ&el-!rYbYQrYb\S(*+J=+<VgO+sA$L*#]Y0&eGN]$4$nBqr%P5
q;;/-p"oc+n_F3%p##`*s5</!!8d_2!8dM.r8IF>!1VN/rgWJI!1WnVlC7jDq3q75$8!k`0/51;1c7-K
rAX[4q_S=22Z,N/3<2&<2Zu#r1c$re1B0*/0`<X+/hSgV0EEm`r\OI/r\OO1s#'g7rAP*C2Dm?K1GUX<
0.njU/-#nR#7:bF$OmRW',;8u)#Y?P(]P9M(&\mL(`=7k)tt<\)]BS2()7Jq&J5Qb&,m%6$j@(N&J>`j
r"T,DrY5PO()Rl+rYc.^(`!l%'+k]_$k!C@#QNc\i;hflhZ2O'hZ2U3iW%iohZ2U3iV&]?S,/ZRSGSfA
SH#)DRf/`SRf/`LS,f&QRf+cB/M/S.0/,+9r\FU52)P4eq_A4/1c5.gq)&.1r\Xm:1c$mB0erV\r\+("
!\Z5]r\=@,r%\1+s"jX2r\a[2#;S"f0J4t0/cI:$#6"i:#mgtI$k3^Z&ebrp()?f_!>?+F&cNCE',;8\
(ASaP(`*u('bqAo&cWC@%K6e4$iLJ6%K6n:&H*+>&H3:A'E/aG(((`h&ePW`$k*LM$2t0[~>

%%EndBinary
grestore
np
3.0518e-05 3.0518e-05 3.0518e-05 3.0518e-05 cmyk
%ADOBeginSubsetFont: LKOBAA+HelveticaNeue AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal LKOBAA+HelveticaNeue gcheck setglobal} if
1 1796 10 <00020026fff5020702c50023003700e3ba001c000900032bb8001c10ba00
13002900032bb8001310411b0006001c0016001c0026001c0036001c0046
001c0056001c0066001c0076001c0086001c0096001c00a6001c00b6001c
00c6001c000d5d410500d5001c00e5001c00025d410500da002900ea0029
00025d411b00090029001900290029002900390029004900290059002900
69002900790029008900290099002900a9002900b9002900c90029000d5d
b8000910b80033dcb8001310b80039dc00ba002e000e00032bb8002e10ba
0004002100032bb8000410ba0018002400032bb8001810b8000410b80000
dc303101332e0123220e0215141e0233323e0235342e0223220607273e03
33321607321e0215140e0223222e0235343e02019e550868584c643c1911
34604f435b37181e3751333a591e02010e254236333e7a24362411132435
23233725141326360210585d406a8949387864402d45542731543e232c31
02295e51353ac31a2b3b211f392c19192a3a21213b2b1900>LKOBAA+HelveticaNeue AddT42Char 
LKOBAA+HelveticaNeue /CharStrings get begin
/six 10 def
end
LKOBAA+HelveticaNeue /Encoding get
dup 54 /six put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/GTSTCD+HelveticaNeue*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /one /two /three /four /five /six /seven /eight 9{/.notdef}rp /B /.notdef /D 8{/.notdef}rp /M 20{/.notdef}rp /b 2{/.notdef}rp /e /.notdef /g 3{/.notdef}rp /k /l /m /n /o 2{/.notdef}rp /r /s 5{/.notdef}rp /y 134{/.notdef}rp]GTSTCD+HelveticaNeue nfGTSTCD+HelveticaNeue*1 [5.26367 0 0 -5.26367 0 0 ]msf484.155 48.4384 mo(0.621 ms)[2.92657 1.46332 2.92661 2.92657 2.92661 1.46332 4.4899 0 ]xshgrestore
.750271 .679713 .654902 .901945 cmyk
%ADOBeginSubsetFont: QHKAAA+HelveticaNeue-Bold Initial
ct_T42Dict begin
-0.379 -0.215 1.094 0.973
 256 array 0 1 255 {1 index exch /.notdef put} for  /QHKAAA+HelveticaNeue-Bold
Type42DictBegin
[<00010000000b000b000b000b6376742000000000000000bc0000001a6670
676d00000000000000d8000002b5676c7966000000000000056c0000165c
686561640000000000000390000000366868656100000000000003c80000
0024686d747800000000000003ec000000806c6f6361000000000000046c
000000426d61787000000000000004b0000000206e616d65000000000000
04d00000002c7072657000000000000004fc0000006e6764697200000000
00000000000000000014006d0085008d009c00000010ff4b000e0205000e
02ca00110000b800002c4bb800095058b101018e59b801ff85b844001db9
000900035f5e2db800012c2020456944b001602db800022cb800012a212d
b800032c2046b003254652582359208a208a49648a204620686164b00425
4620686164525823658a592f20b00053586920b000545821b040591b6920
b000545821b0406559593a2db800042c2046b00425465258238a59204620
6a6164b0042546206a61645258238a592ffd2db800052c4b20b003265058
5158b080441bb04044591b21212045b0c05058b0c0441b2159592db80006
2c2020456944b001602020457d691844b001602db800072cb800062a2db8
00082c4b20b003265358b0801bb040598a8a20b003265358b0022621b0c0
8a8a1b8a235920b0032653582321b801008a8a1b8a235920b80003265358
b0032545b8014050582321b8014023211bb003254523212321591b215944
2db800092c4b535845441b2121592db8000a2c4bb800095058b101018e59
b801ff85b800441db9000900035f5e2db8000b2c2020456944b001602db8
000c2cb8000b2a212db8000d2c2046b003254652582359208a208a49648a
204620686164b004254620686164525823658a592f20b00053586920b000
545821b040591b6920b000545821b0406559593a2db8000e2c2046b00425
465258238a592046206a6164b0042546206a61645258238a592ffd2db800
0f2c4b20b0032650585158b080441bb04044591b21212045b0c05058b0c0
441b2159592db800102c2020456944b001602020457d691844b001602db8
00112cb800102a2db800122c4b20b003265358b0801bb040598a8a20b003
2653582321b0c08a8a1b8a235920b0032653582321b801008a8a1b8a2359
20b0032653582321b801408a8a1b8a235920b80003265358b0032545b801
8050582321b8018023211bb003254523212321591b2159442db800132c4b
535845441b2121592d0000000001000000010000718301fa5f0f3cf50119
03e800000000b643f84c00000000c2d6d805fe85ff27044703cf00010009
00020000000000000001000003cfff27001d047bfe85ff5a044700010000
000000000000000000000000002001f4003201160000012800340128fffa
0116003d022c0015022c004a022c0015022c00100116003d02e5004502e5
004501270045029b004502d2004502890017023e002002630020023e001d
02630026025100360102003a0102003a038a003a02510036026300260185
00360219001d016000060251003602080005032e00060000001c001c0068
00b400e8018c01b40236027802a80310034c036803d8046c051005ce0664
06ba077407c207f0080c088c08d8097809b40a3a0a8a0ad40af40b2e0000
000100000020007600070022000200020000000000140000020002b50001
00010000000100120001000000000006001900004e43585946422b48656c
7665746963614e6575652d426f6c6400b8000a2b00ba00010002000c2b01
ba00030002000c2b01be00030028002000190012000b00122bbe00040024
001d00170011000a00122b00be00010033002a00210017000e00122bbe00
02002a0022001b0013000c00122b00ba0005000400112bb8000020457d69
1844b800002b000000>
[5725 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd

1 0 1 <> QHKAAA+HelveticaNeue-Bold AddT42Char 
1 464 5 <00020015fff3021702ca0017002b00cbb8002c2fb8002d2fb8002c10b800
18d0b800182fb80000dc411b000600000016000000260000003600000046
0000005600000066000000760000008600000096000000a6000000b60000
00c60000000d5d410500d5000000e5000000025db8002d10b80022dcb800
0edc410500da000e00ea000e00025d411b0009000e0019000e0029000e00
39000e0049000e0059000e0069000e0079000e0089000e0099000e00a900
0e00b9000e00c9000e000d5d00ba0013001d00032bb8001310ba00270007
00032bb8002710303113343e0433321e0415140e0223222e0227141e0233
323e0235342e0223220e02a301060e19271d1d281a0d070104152f2c2b2e
15048e29465d34355d472929475d35345d46290161123336352a1a1a2a35
3633121e554f38384f551e698d542424548d69668b542424548b0000>QHKAAA+HelveticaNeue-Bold AddT42Char 
1 792 6 <0001004a0000018802bc000a0023ba0001000900032bb800011000b80000
2fb800012fba0007000800032bb800071030312111230e03271533110188
710626374525b002bc2836210d016bfe3a000000>QHKAAA+HelveticaNeue-Bold AddT42Char 
1 1264 9 <0002003d000000da01fc00030007003fba0001000200032bb8000110b800
0210b80004d0b8000110b80006d0b8000110b80009dc00ba000400050003
2bb8000410ba0001000000032bb800011030311335231d023335da9d9d01
629a9ac89a9a>QHKAAA+HelveticaNeue-Bold AddT42Char 
1 1360 10 <00020045000002bd02ca000c0019007db8001b2fba0001000d00032bb800
0110b8001b10b80014dcb80007dc410500da000700ea000700025d411b00
090007001900070029000700390007004900070059000700690007007900
07008900070099000700a9000700b9000700c90007000d5d00ba0000000f
00032bb8000010ba0019000200032bb80019103031371133321e0215140e
0223011121323e0235342e0223e2703a4f30151e324022fed70134527951
28315777458401c2213e57363b5233160246fd363760844e5984582c>QHKAAA+HelveticaNeue-Bold AddT42Char 
1 1968 14 <00020045000002ac02ca0008002700adb800292fba0001000900032bb800
0110b8002910b80022dcb80005dc410500da000500ea000500025d411b00
090005001900050029000500390005004900050059000500690005007900
05008900050099000500a9000500b9000500c90005000d5db8000110b800
0bd0b8000510b80010d0b800102fba001f0022000511123900b8000a2fb8
00132fba0009000100032bb8000910ba0000000c00032bb8000010ba001f
000c0000111239303113353332161514062301113311333216171e011733
2e03272e0327353e0135342e0223e2ac36363636feb79d9d3b340806060d
9d0b0b050201020b18261d3c351d374d300187c92f3436300143fd360117
34382b5e220f2b302e111b362d210802185c3f2947361f000000>QHKAAA+HelveticaNeue-Bold AddT42Char 
1 2264 15 <00010017fff0027102db003d00a1ba0000000100032bba0020001f00032b
b8002010ba0034001f0020111239b800342f410500da003400ea00340002
5d411b000900340019003400290034003900340049003400590034006900
3400790034008900340099003400a9003400b9003400c90034000d5db800
0bdcba002a00010000111239b8002a2fb80015dcb8000b10b8003fdc00ba
0039000600032bb8003910ba0025001a00032bb800251030313723061e02
33323e0235342e02272e0335343e0233321e021733342e0223220e021514
1e02171e0315140e0223222e02b0980132556f3b496f4b26334647144353
2f10141f26131d31261702982f50673830604c2f253c4c28274c3c251c2a
30151f3a2b1aed42603e1d223d54313c4d2e15041116161a15171e14080a
182a203e5738191a36513731452e1d0a0b1218241d1b2314070f1f32>QHKAAA+HelveticaNeue-Bold AddT42Char 
1 2592 16 <00020020fff302180213002b004000c7ba0037001200032bb8003710ba00
22000900032bb8002210411b000600370016003700260037003600370046
0037005600370066003700760037008600370096003700a6003700b60037
00c60037000d5d410500d5003700e5003700025dba000000120037111239
b800002fb80001dcb8000910b8001ad0b8001a2fb8000910b8002cd0b800
2210b80042dc00ba0032001700032bb8003210ba0027000400032bb80027
10b80001dcba001a00170032111239b8003210b8001ddcba001e00170032
111239303113333e0133321e0215160e0615141e02333236371e0117332e
013511342e0223220e020515140e0223222e0235343e02373e03308e0430
2a1321190f011c303e403f311f1b304025305c22010504900a082a425027
2b55442c014505162e2a1120180e0e171f1011221f1b01662a24050f1b17
16170c060a1122392c283a26121c230d190c104023010d2f39200b112842
9b350c28271c060f1a13141a110a030304060900>QHKAAA+HelveticaNeue-Bold AddT42Char 
1 2972 17 <00020020fff3022e02ca0013002a00afb8002b2fba0016002a00032bb800
1610b8002a10b80000d0b8002b10b80022d0b800222fb8000adc411b0006
000a0016000a0026000a0036000a0046000a0056000a0066000a0076000a
0086000a0096000a00a6000a00b6000a00c6000a000d5d410500d5000a00
e5000a00025db8002a10b80018d0b800182fb8002a10b8001ad0b8001a2f
00b800172fba0005002700032bb8000510ba001d000f00032bb8001d10ba
001a000f001d111239303101140e0223222e0235343e0233321e02171533
112311232e0123220e0215141e023332363701a50c1c2f23212f1f0e0d1d
3023232e1d0c02878e0218532e3956391d1d39583a3351190104203c2f1c
1d2f3c1e203b2e1c1c2d3be24202cafefc26272d4a613436644d2d252a00
>QHKAAA+HelveticaNeue-Bold AddT42Char 
1 3272 18 <0002001dfff30224021300080022003fba0009001400032bb8000910b800
01d000ba0020001900032bb8002010ba000f000600032bb8000f10ba0001
000900032bb8000110b8001910b8001ddc303101233e033332160721362e
0223220e0215141e0233323637230e012322260192e7010b1b2d223433dd
0175041c3f62423b6146262544623d587c1e7d073e2b3c40013a0f262217
38903c6e56332a49643a3c644827505d182b3e000000>QHKAAA+HelveticaNeue-Bold AddT42Char 
1 3444 19 <00020026ff3d022702130013003a00d1b8003b2fba0014002a00032bb800
1410b8003b10b80020d0b800202fb80005dc411b00060005001600050026
000500360005004600050056000500660005007600050086000500960005
00a6000500b6000500c60005000d5d410500d5000500e5000500025db800
2a10b8000fd0b8002a10b80016d0b8002a10b80018d0b800182fb8002a10
b80028d0b800282f00ba002d003600032bb8002d10ba001b000a00032bb8
001b10ba0000002500032bb8000010ba0018000a001b111239ba00290025
0000111239b8003610b80030dc303125222e0235343e0233321e0215140e
0217112315232e0123220e0215141e02333236373315160623222627231e
0333323e020127212c1b0b0d1d2b1e232e1c0c0f1e2ee287021a4d333653
381d1936543a2f55170201373c263a0a8d032b414f26596a38117a1c2c37
1c1d3529181a2c39201c3328185901e4452d262a475d32355f4729272944
37481f282c3f281330455000>QHKAAA+HelveticaNeue-Bold AddT42Char 
1 3972 21 <0002003a000000c802ca000300070037ba0001000200032bb8000110b800
0210b80004d0b8000110b80006d0b8000110b80009dc00b800052fba0001
000000032bb800011030311335231d01113311c88e8e0255757550fdfb02
0500>QHKAAA+HelveticaNeue-Bold AddT42Char 
1 4064 22 <0001003a000000c802ca0003001bba0003000000032bb8000310b80005dc
00b800012fb800002f3031131133113a8e02cafd3602ca000000>QHKAAA+HelveticaNeue-Bold AddT42Char 
1 4120 23 <0001003a000003500213002d007dba002d000000032bb8002d10ba001000
0d00032bb8001010ba001d001a00032bb8001d10b8000010b80003dcba00
25000d0010111239b8001d10b8002fdc00b800012fb8000e2fb8001b2fba
0028000800032bb8002810b8000810b80015d0b8002810b80022d0ba0025
00080028111239ba002c00080028111239303113113311343e0233321e02
15113311343e0233321e0215113311342e02232206072e01232206072335
3a8e161f210a22230f028e0715251e1e2312048e1c324629364f17155131
334f1c020205fdfb012c262f190917262d17fede0120182f251714222e1a
fedb015a32472c14342230262c284600>QHKAAA+HelveticaNeue-Bold AddT42Char 
1 4376 24 <000100360000021b02130016004dba0016000000032bb8001610ba000c00
0900032bb8000c10b8001610b80002d0b800022fb8000c10b80018dc00b8
00012fb8000a2fba0011000600032bb8001110ba00150006001111123930
3113113311343633321615113311342e02232206072335368e343a33288e
112a49392d561b030205fdfb010f4f453f40fedc013e304f371f292d4800
0000>QHKAAA+HelveticaNeue-Bold AddT42Char 
1 4528 25 <00020026fff3023d02130013002700cbb800282fb800292fb8002810b800
14d0b800142fb80000dc411b000600000016000000260000003600000046
0000005600000066000000760000008600000096000000a6000000b60000
00c60000000d5d410500d5000000e5000000025db8002910b8001edcb800
0adc410500da000a00ea000a00025d411b0009000a0019000a0029000a00
39000a0049000a0059000a0069000a0079000a0089000a0099000a00a900
0a00b9000a00c9000a000d5d00ba000f001900032bb8000f10ba00230005
00032bb8002310303113343e0233321e0215140e0223222e0227141e0233
323e0235342e0223220e02b40c1d302424311d0c0c1d312424301d0c8e26
46623d3d6346262646633d3d62462601021f3c2e1d1d2e3c1f1f3b2f1c1c
2f3b1f3e6447262647643e3e6547272747650000>QHKAAA+HelveticaNeue-Bold AddT42Char 
1 4848 26 <0001003600000183021300150031ba0015000000032bb8001510b80002d0
b800022f00b800012fba000e000800032bb8000e10ba00140008000e1112
39303113113335343e0233321617352623220e02072335368e0e2136270d
1c0a110e1b322c220a020205fdfbe9233c2d1a03028405101d2918600000
>QHKAAA+HelveticaNeue-Bold AddT42Char 
1 4968 27 <0001001dfff301fc02130039006dba0000000100032bba001e001d00032b
b8001e10b8001d10b8000bdcba002800010000111239b800282fb80015dc
b8001d10b80030d0b800302fb8001e10b8003bdc00ba0035000600032bb8
003510ba0023001a00032bb8002310b8000610b80000dcb8002310b8001d
dc303137231e0333323e0235342e02272e0335343e0233321617332e0323
220e0215141e02171e0115140e0223222e02a487022b43562d2c5542291c
2e3b1f1e3a2d1c10171c0c2638038704293e4f2a2a5040271c2e3b1f4c55
121b210f15271e13a834452a12112a45332431211407070c0f181310130a
031d29303f26100f254032222f1f130710202013190f070a15210000>QHKAAA+HelveticaNeue-Bold AddT42Char 
1 5236 28 <00010006fffb015202a000190053ba0001000200032bb8000110b8000210
b80006d0b8000110b80016d000b800012fba0013000c00032bb8001310ba
0004000500032bb8000410b80000d0b8000c10b8000fd0b8000f2fb80005
10b80017d030311335231523153311141e0233323637350e012322263511
3335ea8e56561a2d3b21152c120a160c24186802059b9b5ffecf27301a09
02036e0202182401005f>QHKAAA+HelveticaNeue-Bold AddT42Char 
1 5544 30 <000100050000020302050007001900b800012fb800052fb800002fba0004
00000001111239303121132303230323130154af8d6d026d95b10205fe9f
0161fdfb>QHKAAA+HelveticaNeue-Bold AddT42Char 
1 0 0 <00020032000001c2020000030007000b00b800052fb800042f3031252111
212511211101bafe800180fe7801900801f008fe000200000000>QHKAAA+HelveticaNeue-Bold AddT42Char 
QHKAAA+HelveticaNeue-Bold /CharStrings get begin
/space 1 def
/zero 5 def
/one 6 def
/colon 9 def
/D 10 def
/R 14 def
/S 15 def
/a 16 def
/d 17 def
/e 18 def
/g 19 def
/i 21 def
/l 22 def
/m 23 def
/n 24 def
/o 25 def
/r 26 def
/s 27 def
/t 28 def
/v 30 def
end
QHKAAA+HelveticaNeue-Bold /Encoding get
dup 32 /space put
dup 48 /zero put
dup 49 /one put
dup 58 /colon put
dup 68 /D put
dup 82 /R put
dup 83 /S put
dup 97 /a put
dup 100 /d put
dup 101 /e put
dup 103 /g put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 118 /v put
pop
end
%ADOEndSubsetFont
/GTSTCE+HelveticaNeue-Bold /QHKAAA+HelveticaNeue-Bold findfont ct_VMDictPut/GTSTCE+HelveticaNeue-Bold*1 [32{/.notdef}rp /space 15{/.notdef}rp /zero /one 8{/.notdef}rp /colon 9{/.notdef}rp /D 13{/.notdef}rp /R /S 13{/.notdef}rp /a 2{/.notdef}rp /d /e /.notdef /g /.notdef /i 2{/.notdef}rp /l /m /n /o 2{/.notdef}rp /r /s /t /.notdef /v 137{/.notdef}rp]GTSTCE+HelveticaNeue-Bold nfGTSTCE+HelveticaNeue-Bold*1 [6.76758 0 0 -6.76758 0 0 ]msf315.07 20.4909 mo(Serial Server: 1000 Random Single Sensor Data Retreival)[4.39215 3.88464 2.63263 1.746 3.88461 1.74603 1.88138 4.39218 3.88461 2.63263 3.51917 3.88464 2.63263 1.88138 1.88141 3.76276 3.76279 3.76276 3.76279 1.88138 4.8862 3.88461 4.01318 4.13495 4.13495 6.13147 1.88138 4.39215 1.74603 4.01318 4.13495 1.746 3.88461 1.88138 4.39218 3.88461 4.01321 3.63419 4.13495 2.63263 1.88141 5.01474 3.88464 2.3822 3.88464 1.88138 4.8862 3.88461 2.38223 2.5108 3.88464 1.746 3.51917 3.88461 0 ]xsh345.556 162.398 mo
351.948 162.398 li
351.948 156.007 li
345.556 156.007 li
cp
.88098 .602106 .166445 .0199283 cmyk
f
gsave
203.6 225.4 mo
588.6 225.4 li
588.6 -62.4 li
203.6 -62.4 li
203.6 225.4 li
clp
.750271 .679713 .654902 .901945 cmyk
%ADOBeginSubsetFont: LKOBAA+HelveticaNeue AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal LKOBAA+HelveticaNeue gcheck setglobal} if
1 3180 14 <0002fffa0000029002ca0003000b002500b800042fb800052fb800092fba
0000000700032bb8000010ba00020005000411123930311b013313030133
3721173301c9790277abfeea6150012e4e69fee90127014dfeb301a3fd36
d7d702ca0000>LKOBAA+HelveticaNeue AddT42Char 
1 4024 18 <00020026ffc302d202db0016002d00e1b8002e2fb8002f2fb8002e10b800
26d0b800262fb8002f10b8001cdcba00020026001c111239b8002610b800
09dc411b0006000900160009002600090036000900460009005600090066
000900760009008600090096000900a6000900b6000900c60009000d5d41
0500d5000900e5000900025db8001c10b80013dc410500da001300ea0013
00025d411b00090013001900130029001300390013004900130059001300
69001300790013008900130099001300a9001300b9001300c90013000d5d
00b800172fba0004002b00032bb8000410ba0021000e00032bb800211030
312507170623222e0235343e0233321e02151406071737273e0135342e02
23220e0215141e0233323701c2324f3033415e3c1c1c3c5e41415e3c1c28
2a73305e36362b5680555580562b2b5680556348cc3a3f14335469363669
54333354693642792abd3c4a3694524987683e3e6887494987683d2a0000
>LKOBAA+HelveticaNeue AddT42Char 
1 4384 19 <0002004e0000029002ca0020002b009db8002d2fba0023000000032bb800
2310b80002d0b8002d10b8001ddcba001a0000001d111239b80027dc4105
00da002700ea002700025d411b0009002700190027002900270039002700
490027005900270069002700790027008900270099002700a9002700b900
2700c90027000d5d00b800012fb8000e2fba0000002300032bb8000010ba
0022000300032bb8002210ba001a0003002211123930311311331133321e
02171e0317332e03272e0327353e013534262303233533321615140e024e
5fe8232a1a0c04050202070a6a0f0f080202030b17271f413b73662bc6ec
433c1b2d3c02cafd36013115232f1a1a362f260b122f34361a1a30271c06
021262415764feb7f9443627311d0a000000>LKOBAA+HelveticaNeue AddT42Char 
1 4672 20 <000100020000023d02ca00070027ba0003000000032bb800031000b80001
2fba0006000700032bb8000610b8000710b80003d0303113113311333521
15f05feefdc5027afd86027a50500000>LKOBAA+HelveticaNeue AddT42Char 
1 4748 21 <00020024fff5020a02110030004200c3ba003c002400032bb8003c10ba00
07001a00032bb8000710411b0006003c0016003c0026003c0036003c0046
003c0056003c0066003c0076003c0086003c0096003c00a6003c00b6003c
00c6003c000d5d410500d5003c00e5003c00025dba00110024003c111239
b800112fb80012dcb8001a10b8002cd0b8002c2fb8001a10b80031d0b800
312fb8000710b80044dc00ba0037002900032bb8003710ba000c00150003
2bb8000c10b8003710b80003d0b8000c10b80012dcb8002910b8002fd030
312535062322263511342e0223220e0207333e0133321e0215140e02070e
0315141e0233323637141633320315140e0223222e0235343e04020a0f0b
1407223845232b4e3c240255034836142921151c303f23213f311e1b2f3e
23365d232721277412263c2a13251b111d2e3a39340242051c1e010a2d38
1f0a1229423039290612221c18190d0707061223382c2737230f252a2a25
0116571229231708121d1520251409070b000000>LKOBAA+HelveticaNeue AddT42Char 
1 5432 23 <00020024fff5020e02ca0013002c00bbb8002d2fba0015001600032bb800
1510b8002d10b80022d0b800222fb80000dc411b00060000001600000026
000000360000004600000056000000660000007600000086000000960000
00a6000000b6000000c60000000d5d410500d5000000e5000000025db800
1610b8000ad0b8000a2fb8001610b80018d0b800182fb8001610b8002ad0
b8002a2fba002b00220015111239b8001610b8002cd000b800152fba000f
002700032bb8000f10ba001d000500032bb8001d10303137343e0233321e
0215140e0223222e0205112311232e0323220e0215141e02333236373315
7e10243c2b2c3e271211263c2b293d2713019055020e292e2e143b593b1d
1e3b593c365a1502fe264838222136472624463722203645da02cafef617
1f13082b49623737624a2c262b460000>LKOBAA+HelveticaNeue AddT42Char 
1 6476 27 <000200450000009a02ca00030007002fba0001000200032bb8000110b800
0210b80004d0b8000110b80006d000b800052fba0001000000032bb80001
1030311335231d011133119a5555026268685dfdfb020500>LKOBAA+HelveticaNeue AddT42Char 
1 8068 36 <00010040fff501ec020500180051ba000c000d00032bb8000c10ba000100
0200032bb8000110b8000210b80016d0b800162fba001700020001111239
b8000210b80018d0b800182f00b800012fb8000c2fba0008001300032bb8
000810303121112311140e0223222635112311141e0233323637331501ec
5513263927313855112a443339541b020205fedc233b2c183830015efeac
2a45321b2d3052000000>LKOBAA+HelveticaNeue AddT42Char 
1 8228 37 <0001000e000001e602050007001900b800012fb800052fb800002fba0004
00000001111239303121132303230323130129bd598d02915fc00205fe51
01affdfb>LKOBAA+HelveticaNeue AddT42Char 
LKOBAA+HelveticaNeue /CharStrings get begin
/A 14 def
/Q 18 def
/R 19 def
/T 20 def
/a 21 def
/d 23 def
/i 27 def
/u 36 def
/v 37 def
end
LKOBAA+HelveticaNeue /Encoding get
dup 65 /A put
dup 81 /Q put
dup 82 /R put
dup 84 /T put
dup 97 /a put
dup 100 /d put
dup 105 /i put
dup 117 /u put
dup 118 /v put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/GTSTCD+HelveticaNeue*1 [32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /one /two /three /four /five /six /seven /eight 8{/.notdef}rp /A /B /.notdef /D 8{/.notdef}rp /M 3{/.notdef}rp /Q /R /.notdef /T 12{/.notdef}rp /a /b /.notdef /d /e /.notdef /g /.notdef /i /.notdef /k /l /m /n /o 2{/.notdef}rp /r /s /.notdef /u /v 2{/.notdef}rp /y 134{/.notdef}rp]GTSTCD+HelveticaNeue nfGTSTCD+HelveticaNeue*1 [6.76758 0 0 -6.76758 0 0 ]msf356.885 161.483 mo(Average Random Query Time)[4.26352 3.38379 3.63422 2.25354 3.63422 3.88461 3.63422 1.88138 4.63577 3.63422 3.76279 4.01318 3.88461 5.77274 1.88138 5.14334 3.76276 3.63422 2.25354 3.38379 1.88141 3.88461 1.50241 5.77271 0 ]xsh.5 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
203.85 225.15 mo
588.35 225.15 li
588.35 -62.35 li
203.85 -62.35 li
cp
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
@
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/GTSTCE+HelveticaNeue-Bold*1 uf/GTSTCE+HelveticaNeue-Bold uf/QHKAAA+HelveticaNeue-Bold uf/GTSTCD+HelveticaNeue*1 uf/GTSTCD+HelveticaNeue uf/LKOBAA+HelveticaNeue ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
