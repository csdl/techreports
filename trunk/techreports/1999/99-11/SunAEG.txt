=======================================================================
            S u n   M i c r o s y s t e m s,   I n c.

                  Academic Equipment Grant Form
=======================================================================
  

1. INSTITUTION NAME: University of Hawaii

2. DATE SUBMITTED: 1/7/99

3. PROJECT TITLE:  Java-based software engineering technology
                   for high quality development in "Internet Time"
                   organizations

4. PRINCIPAL INVESTIGATOR/REQUESTER:

Name:		Philip Johnson
Institution:	University of Hawaii
Department:	Collaborative Software Development Laboratory
		Dept. of Information and Computer Sciences
Address:	1680 East-West Rd
City, etc:	Honolulu, HI 96822, USA

Phone:		808 956-3489
FAX:		808 956-3548
Email:		johnson@hawaii.edu

ADDITIONAL CONTACT/REQUESTER (if any): none

5. EDUCATIONAL INSTITUTION INFORMATION

   Undergraduate Students	at institution:  ~12,000
				in department:	 ~500
				graduates per year in department: ~100

   Graduate Students 		at institution:   ~5,000
				in department:	  ~100
				graduates per year in department: ~25

   Faculty 			at institution:   ~2,000
				in department:	  ~20
				who would use granted Sun workstations: 2


6. EQUIPMENT AND SOFTWARE REQUESTED (please attach, or have your Sun
   Sales Rep attach, a budgetary quote, at full list value, for the
   hardware and software you are requesting):

We request one Enterprise 450 system configured to serve as a file,
compute, network, and web server for our research group. The Sun sales rep
provided the budgetary quote in postscript format. We converted it to
PDF and it is now available at:

    http://csdl.ics.hawaii.edu/SunAEG/sun-quote.pdf


7. PROJECT INFORMATION

   a. What non-Sun supplied software/hardware will be used for this
      project?

Hardware: six 500Mhz DEC Alphas will continue to serve as front-end
client-side work stations for the research.  There are also some
miscellaneous non-Sun peripherals (printers, etc.)

Software: a variety of (mostly open source) software development tools
(XEmacs, Netscape, RCS, LaTeX, etc.) will be used.

   b. Are other institutions/departments collaborating on this
      project?  If so, which ones?

No.

   c. Are there other sources of funding for this project?  If so, from
      where?

Portions of this research project are partially supported by a grant from
the National Science Foundation. However, the NSF grant does not budget for
the acquisition of this equipment.

   d. If a tangible product will be developed, please describe,
      including deliverable dates and distribution mechanism.

This project supports advanced development and evaluation of four software
products: the Leap toolset, OpenJavaDoc, MCS, and JavaWizard. All products
are distributed from our website, http://csdl.ics.hawaii.edu.  Versions
of the Leap toolset, MCS, and JavaWizard are currently available. 
We propose a final deliverable date for the software products of one year
from receipt of the hardware grant, with intermediate deliverable dates
determined through consultation with Sun development groups.

8. PROJECT TECHNICAL SUPPORT:  This program is for hardware donations 
   only.  Grants do not include maintenance, service or technical support.
   
   a. What are the technical resources available for this project?

The department includes some technical support personnel.  In addition,
members of the CSDL research group using this hardware have extensive unix
technical support experience.
   
   b. How will the maintenance and service be provided for the 
      equipment granted?

Maintenance and service will be provided through a combination of 
departmental and research group resources.
      
9. BRIEF PROJECT OVERVIEW (one paragraph or 100 words maximum):

This grant will support deployment and evaluation of four software
engineering technologies to support high quality development in "Internet
Time" environments.  The Leap toolset supports technical skill acquisition.
MCS supports improves the capability of mailing lists to provide technical
support. OpenJavaDoc facilitates open source distribution and software
development. The JavaWizard Internet Trial provides community-wide
statistics on Java programming errors.  The research projects will be
structured to allow Sun developers with early access to the systems, to
provide tangible software engineering benefits to Sun development groups,
and to enable Sun developers to provide feedback that can influence future
development.

10.SUMMARY OF PROJECT (1 page or 60 lines maximum):

Modern software development forces developers to balance two antagonistic
goals. On the one hand, "Internet Time" requires faster release schedules,
reduced cycle time, and higher responsiveness to customers from around the
world.  On the other hand, the increasing pervasiveness of software in
life-critical, business-critical, and communication-critical software means
that the need for high quality and reliability is more widespread than
ever before. 

The proposed research involves a suite of four software development
projects and associated evaluation activities intended to help support high
quality software development in "Internet Time" organizations.  The goal of
the Leap toolset is to provide technology for technical skill acquisition
by individual software engineers using empirically-guided data collection
and analysis. Project Leap overcomes several barriers to industrial
adoption of traditional process improvement techniques.  The OpenJavaDoc
project will provide explicit software support for open source publication,
review, and revision of Java software.  OpenJavaDoc will use the JavaDoc
API and JavaWebServer to build a system for both publishing the source code
for Java systems and commentary about the system's architecture, design,
and implementation from across the development community. The goal of the
Mailing List Condensation (MCS) project is to improve the efficiency and
effectiveness of technical support mailing lists through a process called
"condensation". This process enables a set of human editors to quickly and
efficiently filter extraneous conversational aspects of the data stream and
attach domain-specific keywords, storing the results in a web-accessible
database providing a variety of retrieval mechanisms. JavaWizard is a
static analysis mechanism that can detect certain forms of programmer
errors in Java programs that are not caught by the compiler (such as
creating a button but then failing to add it to a panel). The JavaWizard
Internet Trial will allow Java developers across the Internet access to a
locally running JavaWizard system. The results of analysis of the submitted
source code will be returned to the developer via a web page, and we will
gather statistics on each submission. The JavaWizard Internet Trial is
intended to determine large scale demographic characteristics of Java
programming errors, gathered by analysis of millions of lines of Java
source code submitted by thousands of developers world-wide.

All four of these development projects are designed to enable close
collaboration between CSDL and Sun development groups.  This collaboration
is intended to be mutually beneficial.  In general, Sun will benefit from
early access to our software and the ability to provide direct feedback and
requirements to our developers. This access will influence the future
course of research and development and result in systems more helpful to
Sun software developers who must produce and enhance high quality, reliable
software in short time periods. CSDL will benefit from the supplied
hardware and software, of course, but just as significantly from the
development of relationships with Sun software developers who can provide
valuable industrial perspectives on the functionality and usability of our
software.  A final benefit to both partners is that through this
interaction, Sun developers and managers will become familiar with
graduating CSDL students, providing a pre-qualified source of skilled
software engineering talent for Sun recruitment efforts.

11.PROJECT PROPOSAL:   (2-6 pages) including the following information:

   [1] Description of the research project or program.

Modern software development forces developers to balance two antagonistic
goals. On the one hand, "Internet Time" requires faster release schedules,
reduced cycle time, and higher responsiveness to customers from around the
world.  On the other hand, the increasing pervasiveness of software in
life-critical, business-critical, and communication-critical software means
that the need for high quality and reliability is more widespread than
ever before.

Since 1991, the Collaborative Software Development Laboratory has worked on
the design, implementation, and evaluation of software engineering tools
and technologies to support improved software quality in "Internet Time"
environments.  For example, our research on technical review produced both
technological innovation (CSRS, a Unix-based system for distributed,
agent-based, synchronous and asynchronous formal technical review) and
methodological innovation (controlled experimental studies indicating that
the review meeting could add substantial cost to the review process while
not significantly improving outcomes with respect to defect removal.)

Currently, CSDL is engaged in a suite of research projects intended to
provide near-term technological and methodological benefits to the software
development community.  Project LEAP involves development of software for
empirically-guided technical skill enhancement.  OpenJavaDoc involves
development of software for open source publication, distribution, and
enhancement of Java software systems.  The Mailing List Condensation System
(MCS) project involves development of software to enhance the quality,
efficiency, and effectiveness of technical support mailing lists.
JavaWizard involves software for static analysis of Java programs that can
reveal the presence of run-time errors and provide insights into
improvements to the language and libraries.  Each of these systems is
implemented in Java, and we intend to eventually distribute each to the
community in an open source format.  More details on these projects will be
provided in Section [3] of this Project Proposal.

We seek to partner with Sun Microsystems because we believe there will be
substantial mutual advantage from this partnership. In general, Sun will
benefit from early access to our software and the ability to provide direct
feedback and requirements to our developers. This access will influence the
future course of research and development and result in systems more
helpful to Sun developers who must produce and enhance high
quality, reliable software in short time periods. CSDL will benefit from
the supplied hardware and software, of course, but just as significantly
from the development of relationships with Sun developers who can
provide valuable industrial perspectives on the functionality and usability
of our software.  A final benefit to both partners is that through this
interaction, Sun developers and managers will become familiar with
graduating CSDL students, providing a pre-qualified source of skilled
software engineering talent for Sun recruitment efforts.

   [2] Description of how the requested hardware and software will be used.

Our current Unix software development hardware and software infrastructure
severely limits our progress on the development and evaluation of these
projects.  Currently, we use DEC Alpha Windows/NT workstations as client
front-ends to a set of Sun Sparc 10 and 20 workstations. Given the
inadequacies of Windows/NT hardware and software, our Sun environment
provides us with all file, compute, web, network, and software development
services. Due to its age, some of the limitations we have already
experienced with our Sun-based Unix infrastructure include: system
recompilation times of up to 60 minutes (for the Leap toolset); poor
JavaWizard run-time performance (several minutes to analyze moderately
sized systems); inadequate file space; frequent network and file system
service interruptions, and poor/intermittent web server responsiveness.
The proposed research and development activities (to be described in
Section [3]) will result in substantially increased demands for file,
compute, network, and web services that cannot be met by our current Unix
infrastructure.

We will use the requested Enterprise 450 Server system to provide reliable,
efficient, and most of all, *adequate* Unix-based file, compute, network,
and web services to meet the demands of the proposed research projects.

   [3] Description of potential research or educational results and benefits.

The proposed research involves a suite of four software development
projects and associated evaluation activities: the Leap toolset,
OpenJavaDoc, MCS, and JavaWizard Internet Trial.  Detailed descriptions of
these projects are available at the CSDL website:
http://csdl.ics.hawaii.edu. A brief overview follows.

[a] The Leap toolset. This goal of this project is to produce tools and
techniques to support technical skill acquisition by individual software
engineers using empirically-guided data collection and analysis.  Prior
research on "Personal Software Process" (PSP) has shown that such
empirically guided approaches can result in more accurate time and size
estimation skills, substantial reduction in product defect density, and
improved insight into high quality software engineering practice. However,
PSP does not appear well-suited to "Internet Time" development scenarios.
The Leap toolset adapts techniques from software review and the PSP to
support Internet Time developers using four guiding design principles: (1)
Lightweight: The toolset must be easy to learn, easy to integrate with
existing methods and tools, and above all, not impose significant new
overhead on the developer unless that investment of overhead will provide a
direct return-on-investment to that same developer.  (2) Empirical: Skill
acquisition should be demonstrable through measurements of effort, defects,
size, design patterns, etc. However, Leap runs counter to prevailing
"metrics programs" in industry which are management-initiated and oriented
and which can lead to measurement "dysfunction". (3) Automated: Leap should
take over all clerical and computational activities from the developer
related to process data analysis.  (4) Portable: Leap tools will form a
kind of "personal information assistant" for a developer's software
engineering skill set.  The Leap toolset is actively used by members of
CSDL and has been deployed in classroom settings to improve software
engineering skills. We propose to train one or more Sun development groups
to use the Leap toolset and incorporate feedback from their experiences
into the release cycle. We expect that use of the Leap toolset by 
Sun developers will help them improve their design, project estimation, 
and defect removal skills. 

[b] OpenJavaDoc.  Open source software (www.opensource.org) is gaining
rapid acceptance as a viable alternative model for high quality software
development and innovation.  The technical advantage of open source
software is that it can create an active development community of hundreds
or thousands of developers, leading to potentially radical increases in the
speed of enhancement, debugging, testing, and release of open source
software. However, no software oriented to the specific needs and goals of
open source software currently exists.  The OpenJavaDoc project will
provide explicit software support for open source publication, review, and
revision of Java software.  OpenJavaDoc will use the JavaDoc API and
JavaWebServer to build a system for publishing not only class and interface
documentation for a Java software system, but also links to the source code
itself in HTML format.  Each page containing class, interface, and source
code will contain a servlet-based form for submitting commentary and
suggestions for improvement, and/or links to patch files containing
proposed improvements to that part of the system.  Servlet-based mechanisms
will automatically update each page with links to all submitted commentary
in a threaded, cross-indexed format to enable focussed, context-specific
dialogue on the software architecture, design, and code.  The OpenJavaDoc
system will itself be published, extended, and enhanced using itself as
infrastructure. We propose to make OpenJavaDoc available to one or more Sun
development groups as a way to trial open source distribution.  It should
be noted that OpenJavaDoc also provides useful software support for internal
publication and review of Java software in non-open source contexts.
We expect that use of OpenJavaDoc by Sun developers will improve their
ability to obtain widespread feedback on the design and implementation of 
Java software. 

[c] MCS.  Electronic mailing lists are popular Internet information
sources. Many mailing lists maintain an archive of all messages sent to the
list which is often searchable using keywords. While useful, these archives
suffer from the fact that they include all messages sent to the
list. Because they include all messages, the ability of users to rapidly
find the information they want in the archive is hampered. Searches for
specific information often return pages of irrelevant or simply useless
messages. The Mailing List Condensation (MCS) project addresses these
issues through automated support for a process called condensation, in
which a set of human editors quickly and efficiently filter extraneous
conversational aspects of the data stream and attach domain-specific
keywords to the remaining information. The results are stored in a
web-accessible database that provides a variety of retrieval formats for
efficient access to the condensed information. MCS is currently intended
for pilot case study evaluation on two technical mailing lists:
ascend-users (a principal technical support channel for Ascend
Communications, a provider of modems, frame relay systems, and so forth to
the Internet Service Provider Industry), and bsdi-users (the technical
support list for the BSDI Unix operating system). We propose to deploy MCS
on one or more Sun technical support mailing lists, and to use feedback
from Sun users to help guide future development and enhancement of the
system. We expect that use of MCS will improve the efficiency and
effectiveness of Sun technical support mailing lists.

[d] JavaWizard Internet Trial. JavaWizard is a static analysis mechanism
that can detect certain forms of programmer errors in Java programs that
are not caught by the compiler (such as creating a button but then failing
to add it to a panel).  JavaWizard has an extensible database that
currently contains procedures to search for 50 kinds of programming
errors. JavaWizard has been piloted within a classroom setting.  From
analysis of approximately 12,800 lines of code produced by 14 student
programmers during a one semester Java software engineering course,
JavaWizard found 79 functional errors, 110 maintenance errors, and 78 false
positives.  In the case of functional errors, we were able to collect data
on the time spent by programmers to detect the errors that JavaWizard found
automatically. This data shows that JavaWizard could have eliminated a
total of five and a half hours, or 7.3 percent of the total time spent
debugging in the test phase. We propose to perform an "Internet Trial" of
JavaWizard. This involves deployment of an servlet-based interface enabling
Java developers anywhere on the Internet to run JavaWizard by
submitting an URL to their Java source.  The results of analysis will be
returned to the developer via a web page, and we will gather statistics on
each run. The goal of the Internet Trial is to determine large scale
demographic characteristics of Java programming errors, gathered by
analysis of millions of lines of Java source code submitted by thousands of
developers world-wide. We expect that this data can be used by Sun to help
guide future development of Java and its libraries. 

   [4] Summary of why Sun was selected as the preferred computing platform.

There are two reasons why Sun is our preferred computing platform:

(a) CSDL has been a Sun-based software development research group since its 
    inception in 1991.  We have thousands of lines of code developed to
    support our internal software engineering procedures. We have eight
    years of administration and user experience with Sun hardware and
    software.  We prefer the Sun computing platform because we are most
    efficient and productive when we use it.  

(b) Although we use currently use workstations running Windows/NT as our 
    front-end clients, we find this OS to be totally inadequate for any
    development activities beyond production of Microsoft Office documents
    (for which Windows/NT is remarkably well-suited, of course.)  Thus, we
    use our NT systems as a way to connect to our Sun workstations when we
    need to get work done. This proposal was written using XEmacs running
    within an X server to a Sun Sparc 20, for example.

   [5] Curriculum vitae of key personnel involved in project.

Curriculum vitae for Philip Johnson, Principal Investigator:
   http://www.ics.hawaii.edu/~johnson/CV/curriculum-vitae.pdf

Online resumes of other software development personnel:
  Robert Brewer:
    http://www.ics.hawaii.edu/~rbrewer/resume.html
  Joe Dane:
    http://www.ics.hawaii.edu/~jdane/resume.html
  Carleton Moore:
    http://www.ics.hawaii.edu/~cmoore/resume/resume.html
  Jennifer Geis:
    http://www.ics.hawaii.edu/~jgeis/



INQUIRIES
---------

Inquiries about proposal submissions are welcomed, and should be
addressed to the aeg program office.  For comments or questions,
contact Suzy Chung (sunhai.chung@sun.com), AEG Program Manager.

Address:	Sun Microsystems Computer Corporation
             	AEG Program Office, Attn:  Suzy Chung
          	901 San Antonio Road, MS MPK15-204
           	Palo Alto, CA 94303
Phone:       	650-786-7531
Fax:         	650-786-3451



