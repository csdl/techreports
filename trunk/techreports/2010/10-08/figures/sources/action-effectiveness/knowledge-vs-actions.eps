%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: knowledge-vs-actions.pdf
%%Creator: Adobe Acrobat 10.1.5
%%For: rbrewer
%%CreationDate: 1/31/13, 8:36 PM
%%BoundingBox: 0 0 684 411
%%HiResBoundingBox: 0 0 684 411
%%CropBox: 0 0 684 411
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_AGM_Core/driver_media_override gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 551 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.2-c001 63.139439, 2010/09/27-13:37:26        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2013-02-01T06:35:38Z"
   xmp:ModifyDate="2013-02-01T06:35:38Z"
   pdf:Producer="Mac OS X 10.8.2 Quartz PDFContext"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -411 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 411 li
684 411 li
684 0 li
cp
clp
684 411 mo
0 411 li
0 0 li
684 0 li
.499998 0 li
.499998 410.1 li
684 410.1 li
684 411 li
false sop
0 0 0 0 cmyk
f
.499998 0 mo
684 0 li
684 410.1 li
.499998 410.1 li
.499998 0 li
ef
33.2999 13 mo
668.528 13 li
668.528 353.283 li
33.2999 353.283 li
33.2999 13 li
ef
33.5 304.5 mo
668.5 304.5 li
668.5 305.5 li
33.5 305.5 li
33.5 304.5 li
33.5 255.5 mo
668.5 255.5 li
668.5 256.5 li
33.5 256.5 li
33.5 255.5 li
33.5 206.5 mo
668.5 206.5 li
668.5 207.5 li
33.5 207.5 li
33.5 206.5 li
33.5 158.5 mo
668.5 158.5 li
668.5 159.5 li
33.5 159.5 li
33.5 158.5 li
33.5 109.5 mo
668.5 109.5 li
668.5 110.5 li
33.5 110.5 li
33.5 109.5 li
33.5 61.4999 mo
668.5 61.4999 li
668.5 62.4999 li
33.5 62.4999 li
33.5 61.4999 li
33.5 12.5 mo
668.5 12.5 li
668.5 13.5 li
33.5 13.5 li
33.5 12.5 li
0 0 0 .473793 cmyk
f
223.368 353.283 mo
223.368 13 li
224.368 13 li
224.368 353.283 li
223.368 353.283 li
f
1 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
220.5 353 mo
223.5 353 li
220.5 305 mo
223.5 305 li
220.5 256 mo
223.5 256 li
220.5 207 mo
223.5 207 li
220.5 159 mo
223.5 159 li
220.5 110 mo
223.5 110 li
220.5 62 mo
223.5 62 li
220.5 13 mo
223.5 13 li
@
33.2999 352.783 mo
668.527 352.783 li
668.527 353.783 li
33.2999 353.783 li
33.2999 352.783 li
f
34 353 mo
34 357 li
33 357 li
33 353 li
34 353 li
97 353 mo
97 357 li
96 357 li
96 353 li
97 353 li
161 353 mo
161 357 li
160 357 li
160 353 li
161 353 li
224 353 mo
224 357 li
223 357 li
223 353 li
224 353 li
288 353 mo
288 357 li
287 357 li
287 353 li
288 353 li
351 353 mo
351 357 li
350 357 li
350 353 li
351 353 li
415 353 mo
415 357 li
414 357 li
414 353 li
415 353 li
478 353 mo
478 357 li
477 357 li
477 353 li
478 353 li
542 353 mo
542 357 li
541 357 li
541 353 li
542 353 li
606 353 mo
606 357 li
605 357 li
605 353 li
606 353 li
669 353 mo
669 357 li
668 357 li
668 353 li
669 353 li
f
674 61.9999 mo
668.528 61.9999 li
668.528 52 li
674 52 li
674 61.9999 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 411 ]ct
[7 0 0 12 668 348 ]ct
snap_to_device
<<
/T 1
/W 7 
/H 12 
/M[7 0 0 -12 0 12 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~S1"@;!!!"h-ia5I!!&dd-ia5I!26-Z-ia5ITqS3Q-ia7@TqS3Q-n(d_Tq\/-.&!?/T-s[>Tq\/-!!!"o
T-s[>!!&N;!!!!!!1YG;!!!!!~>
<~<u(c9!!!"#('"=7!!$,''`\46!*NH,'`\46=]nm0'`\5:=]nm0'bskS=]niA'j4[B=;:f9=]niA!!!"$
=;:f9!!$(9!!!!!!*9p9!!!!!~>
<~&Hi(6!!!!2"98E%!!!]F"TSN&!#$"X"TSN&',)#k"TSN9',)#k"U,PQ',(r]"VVO_&Hr.7',(r]!!!!5
&Hr.7!!!T6!!!!!!"f>6!!!!!~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
668.528 61.9999 mo
668.5 61.9999 li
668.5 61.4999 li
663 61.4999 li
663 52 li
668.528 52 li
668.528 61.9999 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 411 ]ct
[8 0 0 12 662 348 ]ct
snap_to_device
<<
/T 1
/W 8 
/H 12 
/M[8 0 0 -12 0 12 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!%=?c!!!!!!%=?c!!!!!.%d9,!!!!IT;&$R!!"F>U7n9S-n(^^TqS0R-n(^^TqS0R!!"F>U7n9S
!!!!IT;&$R!!!!!.%d9,!!!!!!%=?c!!!!!!%=?c~>
<~!!!!!!#AWO!!!!!!#AWO!!!!!'j+R?!!!!6=BSd0!!!a9=]nm1'bshR=]nm1'bshR=]nm1!!!a9=]nm1
!!!!6=BSd0!!!!!'j+R?!!!!!!#AWO!!!!!!#AWO~>
<~!!!!!!!El:!!!!!!!El:!!!!!"VDF\!!!!&&JGfk!!!07',)#m"U,JO',)#m"U,JO',)#m!!!07',)#m
!!!!&&JGfk!!!!!"VDF\!!!!!!!El:!!!!!!!El:~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
668.5 61.9999 mo
663 61.9999 li
663 61.4999 li
668.5 61.4999 li
668.5 61.9999 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 411 ]ct
[7 0 0 3 662 348 ]ct
snap_to_device
<<
/T 1
/W 7 
/H 3 
/M[7 0 0 -3 0 3 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!.%d77!!!!!.%C8;!!!!IS,~>
<~!!!!!'j+Q<!!!!!(0:J9!!!!7<r~>
<~!!!!!"VDFK!!!!!";(V6!!!!%&H~>
<~H$O[\>6P"PH$O[\>R,P"H$O[?#6~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
166 222 mo
155 222 li
155 212 li
166 212 li
166 222 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 411 ]ct
[13 0 0 12 154 188 ]ct
snap_to_device
<<
/T 1
/W 13 
/H 12 
/M[13 0 0 -12 0 12 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!%=?c!!!!!!!!!!!!"F;-ia5I!!!!!!!"F>URrq7!!!!!!!"F>U7n<R-ia5I!!"F>U7n9SU7Wh6
!%97fU7n9STqS3Q-n$JlT;&$QTqS0ST-u)f!%=J6TqS0ST-s[>!!!!IT;&$RT-s[>!!!!!!%=J7T-s[>
!!!!!!!!!IS1"@;!!!!!!!!!!.%D[c!!!!!~>
<~!!!!!!#AWO!!!!!!!!!!!!!d9('"=7!!!!!!!!a9=BH:<!!!!!!!!a9=]nm0'`\46!!!a9=]nm1=]cC=
!#65N=]nm1=]nm0'bqGu=BSd0=]nm1=;;PN!#8U==]nm1=;:f9!!!!6=BSd0=;:f9!!!!!!#8U<=;:f9
!!!!!!!!!7<u(c9!!!!!!!!!!(0;7O!!!!!~>
<~!!!!!!!El:!!!!!!!!!!!!!-6"98E%!!!!!!!!07'G1KK!!!!!!!!07',)#k"TSN&!!!07',)#m'+kBJ
!!NN<',)#m',)#k"U,&5&JGfk',)#m&Hr=<!!NrJ',)#m&Hr.7!!!!&&JGfk&Hr.7!!!!!!!NrK&Hr.7
!!!!!!!!!%&Hi(6!!!!!!!!!!";(b:!!!!!~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
356 352.783 mo
345 352.783 li
345 343 li
345 349 li
356 349 li
356 352.783 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 411 ]ct
[13 0 0 12 344 57 ]ct
snap_to_device
<<
/T 1
/W 13 
/H 12 
/M[13 0 0 -12 0 12 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!%=?c!!!!!!!!!!!!"F;-ia5I!!!!!!!"F>URrq7!!!!!!!"F>U7n<R-ia5I!!"F>U7n9SU7Wh6
!%97fU7n9STqS3Q-n$JlT;&$QTqS0ST-u)f!%=J6TqS0ST-s[>!!!!IT;&$RT-s[>!!!!!!%=J7T-s[>
!!!!!!!!!IS1"@;!!!!!!!!!!.%D[c!!!!!~>
<~!!!!!!#AWO!!!!!!!!!!!!!d9('"=7!!!!!!!!a9=BH:<!!!!!!!!a9=]nm0'`\46!!!a9=]nm1=]cC=
!#65N=]nm1=]nm0'bqGu=BSd0=]nm1=;;PN!#8U==]nm1=;:f9!!!!6=BSd0=;:f9!!!!!!#8U<=;:f9
!!!!!!!!!7<u(c9!!!!!!!!!!(0;7O!!!!!~>
<~!!!!!!!El:!!!!!!!!!!!!!-6"98E%!!!!!!!!07'G1KK!!!!!!!!07',)#k"TSN&!!!07',)#m'+kBJ
!!NN<',)#m',)#k"U,&5&JGfk',)#m&Hr=<!!NrJ',)#m&Hr.7!!!!&&JGfk&Hr.7!!!!!!!NrK&Hr.7
!!!!!!!!!%&Hi(6!!!!!!!!!!";(b:!!!!!~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
356 353 mo
351 353 li
350 353 li
345 353 li
345 352.783 li
356 352.783 li
356 353 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 411 ]ct
[13 0 0 3 344 56 ]ct
snap_to_device
<<
/T 1
/W 13 
/H 3 
/M[13 0 0 -3 0 3 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!%=?c!!!!!!!!!!!!"F;-ia5I!!!!!!!!!!!!!!!!!!!~>
<~!!!!!!#AWO!!!!!!!!!!!!!d9('"=7!!!!!!!!!!!!!!!!!!!~>
<~!!!!!!!El:!!!!!!!!!!!!!-6"98E%!!!!!!!!!!!!!!!!!!!~>
<~H$O[\H!CSZH$O[\H$O[\H$NX">^:U?H$O[\H$O[\H$O[\H$OZ~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
547 227 mo
536 227 li
536 217 li
547 217 li
547 227 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 411 ]ct
[13 0 0 12 535 183 ]ct
snap_to_device
<<
/T 1
/W 13 
/H 12 
/M[13 0 0 -12 0 12 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!%=?c!!!!!!!!!!!!"F;-ia5I!!!!!!!"F>URrq7!!!!!!!"F>U7n<R-ia5I!!"F>U7n9SU7Wh6
!%97fU7n9STqS3Q-n$JlT;&$QTqS0ST-u)f!%=J6TqS0ST-s[>!!!!IT;&$RT-s[>!!!!!!%=J7T-s[>
!!!!!!!!!IS1"@;!!!!!!!!!!.%D[c!!!!!~>
<~!!!!!!#AWO!!!!!!!!!!!!!d9('"=7!!!!!!!!a9=BH:<!!!!!!!!a9=]nm0'`\46!!!a9=]nm1=]cC=
!#65N=]nm1=]nm0'bqGu=BSd0=]nm1=;;PN!#8U==]nm1=;:f9!!!!6=BSd0=;:f9!!!!!!#8U<=;:f9
!!!!!!!!!7<u(c9!!!!!!!!!!(0;7O!!!!!~>
<~!!!!!!!El:!!!!!!!!!!!!!-6"98E%!!!!!!!!07'G1KK!!!!!!!!07',)#k"TSN&!!!07',)#m'+kBJ
!!NN<',)#m',)#k"U,&5&JGfk',)#m&Hr=<!!NrJ',)#m&Hr.7!!!!&&JGfk&Hr.7!!!!!!!NrK&Hr.7
!!!!!!!!!%&Hi(6!!!!!!!!!!";(b:!!!!!~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
102 349 mo
91 349 li
91 339 li
91 344 li
102 344 li
102 349 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 411 ]ct
[13 0 0 12 90 61 ]ct
snap_to_device
<<
/T 1
/W 13 
/H 12 
/M[13 0 0 -12 0 12 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!%=?c!!!!!!!!!!!!"F;-ia5I!!!!!!!"F>URrq7!!!!!!!"F>U7n<R-ia5I!!"F>U7n9SU7Wh6
!%97fU7n9STqS3Q-n$JlT;&$QTqS0ST-u)f!%=J6TqS0ST-s[>!!!!IT;&$RT-s[>!!!!!!%=J7T-s[>
!!!!!!!!!IS1"@;!!!!!!!!!!.%D[c!!!!!~>
<~!!!!!!#AWO!!!!!!!!!!!!!d9('"=7!!!!!!!!a9=BH:<!!!!!!!!a9=]nm0'`\46!!!a9=]nm1=]cC=
!#65N=]nm1=]nm0'bqGu=BSd0=]nm1=;;PN!#8U==]nm1=;:f9!!!!6=BSd0=;:f9!!!!!!#8U<=;:f9
!!!!!!!!!7<u(c9!!!!!!!!!!(0;7O!!!!!~>
<~!!!!!!!El:!!!!!!!!!!!!!-6"98E%!!!!!!!!07'G1KK!!!!!!!!07',)#k"TSN&!!!07',)#m'+kBJ
!!NN<',)#m',)#k"U,&5&JGfk',)#m&Hr=<!!NrJ',)#m&Hr.7!!!!&&JGfk&Hr.7!!!!!!!NrK&Hr.7
!!!!!!!!!%&Hi(6!!!!!!!!!!";(b:!!!!!~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
547 352.783 mo
536 352.783 li
536 343 li
547 343 li
547 352.783 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 411 ]ct
[13 0 0 12 535 57 ]ct
snap_to_device
<<
/T 1
/W 13 
/H 12 
/M[13 0 0 -12 0 12 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!%=?c!!!!!!!!!!!!"F;-ia5I!!!!!!!"F>URrq7!!!!!!!"F>U7n<R-ia5I!!"F>U7n9SU7Wh6
!%97fU7n9STqS3Q-n$JlT;&$QTqS0ST-u)f!%=J6TqS0ST-s[>!!!!IT;&$RT-s[>!!!!!!%=J7T-s[>
!!!!!!!!!IS1"@;!!!!!!!!!!.%D[c!!!!!~>
<~!!!!!!#AWO!!!!!!!!!!!!!d9('"=7!!!!!!!!a9=BH:<!!!!!!!!a9=]nm0'`\46!!!a9=]nm1=]cC=
!#65N=]nm1=]nm0'bqGu=BSd0=]nm1=;;PN!#8U==]nm1=;:f9!!!!6=BSd0=;:f9!!!!!!#8U<=;:f9
!!!!!!!!!7<u(c9!!!!!!!!!!(0;7O!!!!!~>
<~!!!!!!!El:!!!!!!!!!!!!!-6"98E%!!!!!!!!07'G1KK!!!!!!!!07',)#k"TSN&!!!07',)#m'+kBJ
!!NN<',)#m',)#k"U,&5&JGfk',)#m&Hr=<!!NrJ',)#m&Hr.7!!!!&&JGfk&Hr.7!!!!!!!NrK&Hr.7
!!!!!!!!!%&Hi(6!!!!!!!!!!";(b:!!!!!~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
547 353 mo
542 353 li
541 353 li
536 353 li
536 352.783 li
547 352.783 li
547 353 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 411 ]ct
[13 0 0 3 535 56 ]ct
snap_to_device
<<
/T 1
/W 13 
/H 3 
/M[13 0 0 -3 0 3 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!%=?c!!!!!!!!!!!!"F;-ia5I!!!!!!!!!!!!!!!!!!!~>
<~!!!!!!#AWO!!!!!!!!!!!!!d9('"=7!!!!!!!!!!!!!!!!!!!~>
<~!!!!!!!El:!!!!!!!!!!!!!-6"98E%!!!!!!!!!!!!!!!!!!!~>
<~H$O[\H!CSZH$O[\H$O[\H$NX">^:U?H$O[\H$O[\H$O[\H$OZ~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
547 22.9999 mo
536 22.9999 li
536 13.5 li
547 13.5 li
547 22.9999 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 411 ]ct
[13 0 0 12 535 387 ]ct
snap_to_device
<<
/T 1
/W 13 
/H 12 
/M[13 0 0 -12 0 12 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!%=?c!!!!!!!!!!!!"F;-ia5I!!!!!!!"F>URrq7!!!!!!!"F>U7n<R-ia5I!!"F>U7n9SU7Wh6
!%97fU7n9STqS3Q-n$JlT;&$QTqS0ST-u)f!%=J6TqS0ST-s[>!!!!IT;&$RT-s[>!!!!!!%=J7T-s[>
!!!!!!!!!IS1"@;!!!!!!!!!!.%D[c!!!!!~>
<~!!!!!!#AWO!!!!!!!!!!!!!d9('"=7!!!!!!!!a9=BH:<!!!!!!!!a9=]nm0'`\46!!!a9=]nm1=]cC=
!#65N=]nm1=]nm0'bqGu=BSd0=]nm1=;;PN!#8U==]nm1=;:f9!!!!6=BSd0=;:f9!!!!!!#8U<=;:f9
!!!!!!!!!7<u(c9!!!!!!!!!!(0;7O!!!!!~>
<~!!!!!!!El:!!!!!!!!!!!!!-6"98E%!!!!!!!!07'G1KK!!!!!!!!07',)#k"TSN&!!!07',)#m'+kBJ
!!NN<',)#m',)#k"U,&5&JGfk',)#m&Hr=<!!NrJ',)#m&Hr.7!!!!&&JGfk&Hr.7!!!!!!!NrK&Hr.7
!!!!!!!!!%&Hi(6!!!!!!!!!!";(b:!!!!!~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
547 13.5 mo
536 13.5 li
536 13 li
547 13 li
547 13.5 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 411 ]ct
[13 0 0 3 535 396 ]ct
snap_to_device
<<
/T 1
/W 13 
/H 3 
/M[13 0 0 -3 0 3 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!%=?c!!!!!!!!!!!!"F;-ia5I!!!!!!!"F>URrq7!!!!~>
<~!!!!!!#AWO!!!!!!!!!!!!!d9('"=7!!!!!!!!a9=BH:<!!!!~>
<~!!!!!!!El:!!!!!!!!!!!!!-6"98E%!!!!!!!!07'G1KK!!!!~>
<~H$O[\H!CSZH$O[\H$O[\H$NX">^:U?H$O[\H$NTt!!QSPH$OZ~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
33.2999 343 mo
28.0001 343 li
28.0001 339 li
33.2999 339 li
33.2999 343 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 411 ]ct
[7 0 0 6 27 67 ]ct
snap_to_device
<<
/T 1
/W 7 
/H 6 
/M[7 0 0 -6 0 6 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!%=?;!!!!!.%C8;!!"F>UAt8o.%d6-!!"F>U7n8/.%d6-TqM~>
<~!!!!!!#AW9!!!!!(0:J9!!!a9=9&=$'j+UA!!!a9=]nlB'j+UA=]k~>
<~!!!!!!!El6!!!!!";(V6!!!07'EA+5"VDC]!!!07',)#_"VDC]',(~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
39 343 mo
39 343 li
33.2999 343 li
33.2999 339 li
39 339 li
39 343 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 411 ]ct
[8 0 0 6 32 67 ]ct
snap_to_device
<<
/T 1
/W 8 
/H 6 
/M[8 0 0 -6 0 6 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~.%D[c!!!!!.%D[c!!!!!T;/#,!!!!!U7n<R-ia5ITqS0ST-s[>TqS0RU7Wh^~>
<~(0;7O!!!!!(0;7O!!!!!=BJZ?!!!!!=]nm0'`\46=]nm1=;:f9=]nm1=]cCR~>
<~";(b:!!!!!";(b:!!!!!&JPf\!!!!!',)#k"TSN&',)#m&Hr.7',)#m'+kBO~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
409 246 mo
409 246 li
409 236 li
420 236 li
420 241 li
409 241 li
409 246 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 411 ]ct
[13 0 0 12 408 164 ]ct
snap_to_device
<<
/T 1
/W 13 
/H 12 
/M[13 0 0 -12 0 12 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!%=?c!!!!!!!!!!!!"F;-ia5I!!!!!!!"F>URrq7!!!!!!!"F>U7n<R-ia5I!!"F>U7n9SU7Wh6
!%97fU7n9STqS3Q-n$JlT;&$QTqS0ST-u)f!%=J6TqS0ST-s[>!!!!IT;&$RT-s[>!!!!!!%=J7T-s[>
!!!!!!!!!IS1"@;!!!!!!!!!!.%D[c!!!!!~>
<~!!!!!!#AWO!!!!!!!!!!!!!d9('"=7!!!!!!!!a9=BH:<!!!!!!!!a9=]nm0'`\46!!!a9=]nm1=]cC=
!#65N=]nm1=]nm0'bqGu=BSd0=]nm1=;;PN!#8U==]nm1=;:f9!!!!6=BSd0=;:f9!!!!!!#8U<=;:f9
!!!!!!!!!7<u(c9!!!!!!!!!!(0;7O!!!!!~>
<~!!!!!!!El:!!!!!!!!!!!!!-6"98E%!!!!!!!!07'G1KK!!!!!!!!07',)#k"TSN&!!!07',)#m'+kBJ
!!NN<',)#m',)#k"U,&5&JGfk',)#m&Hr=<!!NrJ',)#m&Hr.7!!!!&&JGfk&Hr.7!!!!!!!NrK&Hr.7
!!!!!!!!!%&Hi(6!!!!!!!!!!";(b:!!!!!~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
420 251 mo
409 251 li
409 246 li
420 246 li
420 241 li
420 251 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 411 ]ct
[13 0 0 12 408 159 ]ct
snap_to_device
<<
/T 1
/W 13 
/H 12 
/M[13 0 0 -12 0 12 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!%=?c!!!!!!!!!!!!"F;-ia5I!!!!!!!"F>URrq7!!!!!!!"F>U7n<R-ia5I!!"F>U7n9SU7Wh6
!%97fU7n9STqS3Q-n$JlT;&$QTqS0ST-u)f!%=J6TqS0ST-s[>!!!!IT;&$RT-s[>!!!!!!%=J7T-s[>
!!!!!!!!!IS1"@;!!!!!!!!!!.%D[c!!!!!~>
<~!!!!!!#AWO!!!!!!!!!!!!!d9('"=7!!!!!!!!a9=BH:<!!!!!!!!a9=]nm0'`\46!!!a9=]nm1=]cC=
!#65N=]nm1=]nm0'bqGu=BSd0=]nm1=;;PN!#8U==]nm1=;:f9!!!!6=BSd0=;:f9!!!!!!#8U<=;:f9
!!!!!!!!!7<u(c9!!!!!!!!!!(0;7O!!!!!~>
<~!!!!!!!El:!!!!!!!!!!!!!-6"98E%!!!!!!!!07'G1KK!!!!!!!!07',)#k"TSN&!!!07',)#m'+kBJ
!!NN<',)#m',)#k"U,&5&JGfk',)#m&Hr=<!!NrJ',)#m&Hr.7!!!!&&JGfk&Hr.7!!!!!!!NrK&Hr.7
!!!!!!!!!%&Hi(6!!!!!!!!!!";(b:!!!!!~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
420 246 mo
409 246 li
409 241 li
420 241 li
420 246 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 411 ]ct
[11.4783 0 0 5.47619 408.761 164.762 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 48 
/H 23 
/M[48 0 0 -23 0 23 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 48 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 48 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 48 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 48 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
r[7t,:Mbl\TV;=Y';;+jT:r$SUSO`_UnaZZTq@mLU&C\iTqJ'8Celkd./jqc*%O*D=]nl(=oMM%=p%u6
>[.22r`Au"#$>#2904XDrY>D9"9o/@&/"mSr"B2G&J,Thq[ruE'+b`U')WFB&d/dX$jd.;"n;Qp$ka*R
q#CL!&/#EA!<+AN1J_hDTV/"WU(a5oSY)UNU8+N\V50l\US4<NTqVFZ#,.]_M/5sDr[@a\"ro-T93GD"
rE9/'r`B)&"']#8>Q.h*=8Q,)=BSd"4"D<M(&e@>"pk\L&cNF@'*Jp[&/,`S&d/j]&.oQQ'E/UI&J,?W
#6"er!!<WB&-M_.!s9)I%.jQ!!<+AN1J_hDTV/"WU(a5oSY)UNU8+N\V50l\US4<NTqVFZ#,.]_M/5sD
r[@a\"ro-T93GD"qcWo"r`TD.>[1M4>5hV#=U%u2=\Ch,*<$]P"U##9$kO$M')WCG&ePZg'DiCB'*AmZ
&JG!TrXo>G&.AjLrWVfl!t5eR"8Mp!!tZ(RnGrP6#V\n`JX)UmT:u7W#+hBWTqnHZrM9^oUSOTTSY#hR
#bdl\R$E579/->jrXoGQ-oa^q<)m$*=]nj/=&rC'r`TD.>[1M4=q=Y8<``C*=]nj,<)Z:H-lDprrW3<,
#Rq=V&ePcS'*8aW&,m7@')iOG%hK?N'*f-^&eGT`#m:/.rW`K1"pFf'#6=o0"q_Xc"Si$&";DXa"p>#/
qZ$[#"pk25rYc(e3DX=7KT2@mTDkAlStMgSUSO]^V50o^V4sWSrga@fTpUgmH>$)7,5rM[$jdIa,</%^
:/b:trDs,&<Er^2rEBD.>$P'.rDs;-=]8'e6T?;0&H3+8!"KAG%M03b&eP`h&.T*_')`IT',(um$k<g]
&eP`h&J,E]$i9r'&H`ad*!uNC#6bDC&/lT."8Mp%!u`4!&.JpLqu?g**#]Rk&cN7h'du+;?Z1IVTUhXF
TV/!QVPU)aV59u`V5Bu\TV.mISY2'pDdQ4"-l)^krW`Q5',r2R$p@'V=]\[*=&r=!?!@,0&R&I<<E<1%
='&O$7QiRR)\WSX#Q"K)!=B5F%hnpS":u%O$5E:L";D1O%M8UO"VVCV$jm%4!<*T5(EOV4qu?s-%h]No
*?,(U!!`QE*?#S(%g`.7"TSN;*Zc-s')i"H#T"gE6sF\hT:DLGU8"E[VPU-fU_9N#VP^,_U7e*JT8IYn
6o65,#lXu+!YPVD&f2iL5"o'[<``=$<*EO3>Q%\;>?kE:<)cn"<``Bs4u+E#&dnjA!r;m!#7:kNrXoGH
%h/m\'G;)X'F,9a'GLoa%hJXP!tYkJ#PnH"$NgtZ)AE&L#6>5G'+PZj#PS3'#8Im^'+t]Sr;Zp5)B'4e
$iU,T!=9G^/P9Q'R$aD:US=NZVPU,bUSFW]V5C&`U8+BOR$`A68hM2"#m'l&!!NN5%N$WS7fH@#<E`O/
>$P<:=]ed/>?kE:>$5$/r_s(k3%5^T$3g,'#mL_G&.oKb%MTTT&c`UD'EAgF&d]3c%M'-`&.JsNpAbR*
&/,QU!<N<*&/>fG!!3`I&-rC?!W`?4'+bBE!"&o>(*PV3BRP]"S,T/bUnso`rM'IjV5:!eUC*KRLj`r3
2^&qG#5J6.!s]2E)'h108ki,c>$:i/"^,#2=B\l,>7F_=>#7pc6oZG0%grUEo)Jq$%1N^R'`J^O',)&n
'GM2p',1?X"V_=Q%1N[:!"/o=&ebp!+r(V-*Z4>G$Q'p(%i$9/',(uf"Sr**!s]5K-pLUBI#OHlU].(h
U]7(gU].(gUC*BIHtQAB-km'p"8`',!!!$%"pu"b-9"4]9_hll=nu5.9LqH.-6<g-"p4ns!!EW8#m_7A
')rXA&d/mS#mgt1!"/l8%M9L(.ju&N*ZFJI$Q:'+'.5:W(D.,`"8W!)!<NB1)_aZ]F,?FcV#R4eUAq"e
U^EWKF&ta`)[QWK!VcX$!<NB6(a(@j6WX1jr`]2%r`];*$!'DS/0Gc>"9JVo!!EK2"q_LL'+t3Vq\/rA
"q_L^&I&IEo)K.!"UPPM-7^AQ()dJI!"0&N((VZ@-5-an"Te;s$4eCA88a9SV59u_rhB@brh9apUnsoX
M/GjD,S0_Op](X,&fN,Z93,;%>?^c($<gY<>ZOKZ-Q3U'mJmIu$kEp_',)#Q'*f-`'+tlf$jlA&!sT_j
)t!_&!!=/c*!Z*:&-2h8#obTe=*'4eUSFW[U8%OY&>GnoUna]RM/u`e0cLE%!Wi&r%06M5%2^0=4\8XW
>?Y5)=UeP<>?Y#u4Y7cn%0Q_5nGiRq$3^hM',(ukpCdcE&eboj$jm:3!"/f2#n%Cm.O#0+#QaAo$NUM?
#pCcE'+5*M!Vud,!s]5K.6pjHI>sYhUSFQXq4S=nU8+KXR>lW/<'VlH$jQn1!"&`/"pu%c-94If;uKno
=oDM2;bTS>-QWs/"p4ns!!EZ<%M0<Q')*(=&d/jZ%L`a:!"/l8%M9L'-R&g&#6XW!qZ%!+#71YZ-RBQ@
%LE76!"/u?'d5P5CO_8,S>#qVpS%S\$_a)TMgoM=3$B%H#5J6.!s]/D)'h439Mnem>$CT%%9cq<<DcFZ
3@#IQ$O6e*!!EZ>%hK?P'(lq;&d/dX%h9!>!"/o=&ebou*tADW"9S#l$N^G7":cLn',(uf"T&0,!=9G^
/P9T)R[ftBrhB(Zrh9XjSt)7"AP+QW*u#"^q>^g*$4[n%3(HtL=RB5t=B8El3%5^T$3g,'"9o2B&/"mS
mh>[5";)1S$3p5)$3h%T%fub4!!!$#pAjpf$3:/-!!**%%hfKYrW)p##m_=n1dkPgMP-X?U@k5XU'[Kc
MK2oh1aNqDrWN3%$3U_K(F:h#9NYG"m9'cu=]e?]1*m_K$O$G1q>^a*$4IIY',2)J'*f-a'+tib$4$D-
rX/f?)B':H!!<lQ)A2rVrXK2K-ot(0Dh*qBrh9@do:c2Yrh0@cO9U5R?VNR0(&e^B#6tSL)^I7'7Sr8N
#>dlQ1aF"R$N:;-!!NB1$k<d]rY"Z5rXoAJ%h9!T!W)lr&d&pk*Yn8Hm/R5'*Zc-s')idS+urG4H@q3E
rLj4cnY#rWrLjI`NIuOj:H9Wu)ZC-M&/lcQ6UsmMk?/$g:.IZ2,8q-m%/g/1!!!B9%M06O'($A3&d/dX
%LigC!<*Q4'cS,!hZ*`b*#fXl&cO$`0M?#/Q'e)6TqS3Tn"KcU$)+&bS=#RmAkOiW,lSD](aq@6;cHb!
k?/$l<E)me3%,XC')hq;!sf>I&/#Qfk7\(5&J>Wd%1*.9!r`E+#R1G)!9jIb"9o/2#Q?+U1J_hDTV/"W
U@"ZQU'@<aTS[J\1]Ag%'a>X.4%i^Z=QNZi=BSd"4"D<M'`\CA"U,):$kO$M''Br-&d/dX$jd.;"jm>L
-jDJ'Cl+gXU&C_SU&UhbU'@<aTS[J\1]Ag%'a>X.4%i^Z=QNZi=BSd"4"D<M(&e@>"pk\L&cNF+'E/UI
&J,?W#6"ec!:U!f-jDJ'Cl+gXU&C_QU&C\iTqJ'8Celkd./jqc*%O*D=]nkg=U%u2=\Ch,*<$]P"U##9
$kO$M')iR0'E/UI&J,?W#6"eR!.Y~>

%%EndBinary
grestore
np
229 222 mo
224.368 222 li
224.368 212 li
229 212 li
229 222 li
223.368 222 mo
218 222 li
218 212 li
223.368 212 li
223.368 222 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 411 ]ct
[13 0 0 12 217 188 ]ct
snap_to_device
<<
/T 1
/W 13 
/H 12 
/M[13 0 0 -12 0 12 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!%=?c!!!!!!!!!!!!"F;-ia5I!!!!!!!"F>URrq7!!!!!!!"F>U7n<R-ia5I!!"F>U7n9SU7Wh6
!%97fU7n9STqS3Q-n$JlT;&$QTqS0ST-u)f!%=J6TqS0ST-s[>!!!!IT;&$RT-s[>!!!!!!%=J7T-s[>
!!!!!!!!!IS1"@;!!!!!!!!!!.%D[c!!!!!~>
<~!!!!!!#AWO!!!!!!!!!!!!!d9('"=7!!!!!!!!a9=BH:<!!!!!!!!a9=]nm0'`\46!!!a9=]nm1=]cC=
!#65N=]nm1=]nm0'bqGu=BSd0=]nm1=;;PN!#8U==]nm1=;:f9!!!!6=BSd0=;:f9!!!!!!#8U<=;:f9
!!!!!!!!!7<u(c9!!!!!!!!!!(0;7O!!!!!~>
<~!!!!!!!El:!!!!!!!!!!!!!-6"98E%!!!!!!!!07'G1KK!!!!!!!!07',)#k"TSN&!!!07',)#m'+kBJ
!!NN<',)#m',)#k"U,&5&JGfk',)#m&Hr=<!!NrJ',)#m&Hr.7!!!!&&JGfk&Hr.7!!!!!!!NrK&Hr.7
!!!!!!!!!%&Hi(6!!!!!!!!!!";(b:!!!!!~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
224.368 222 mo
223.368 222 li
223.368 212 li
224.368 212 li
224.368 222 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 411 ]ct
[3 0 0 12 222 188 ]ct
snap_to_device
<<
/T 1
/W 3 
/H 12 
/M[3 0 0 -12 0 12 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~.%D\6S1(#)T;&$RTqS0RTqS0RTqS0RU7n<RURrs)-n(T6~>
<~(0;7e<u+n?=BSd0=]nm1=]nm1=]nm1=]nm0=BH>?()Bse~>
<~";(b>&Hi[[&JGfk',)#m',)#m',)#m',)#k'G1H["9];>~>
<~>R+M=#@%E4"TSN&!!!!!!!!!!!!!!!!!!!&!!QU4>[.M=~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
356 315 mo
345 315 li
345 305.5 li
356 305.5 li
356 315 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 411 ]ct
[13 0 0 11 344 95 ]ct
snap_to_device
<<
/T 1
/W 13 
/H 11 
/M[13 0 0 -11 0 11 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!-n(T6-ia5I!!!!!!%=J7T-s[>!!!!!!%=J6Tq\/-!!!!!!%=J6TqS0ST-s[>-n(^^TqS0RTq\/-
-n$L9U7n9STqS3Q-n#&q.%d6-TqS3Q-ia5I!!"F>U7n<R-ia5I!!!!!.%d9,-ia5I!!!!!!!"F;-ia5I
!!!!!!!!!IS1"@;!!!!~>
<~!!!!!'c'jd'`\46!!!!!!#8U<=;:f9!!!!!!#8U==]niA!!!!!!#8U==]nm1=;:f9'bshR=]nm1=]niA
'bqHc=]nm1=]nm0'bp]K'j+UA=]nm0'`\46!!!a9=]nm0'`\46!!!!!'j+R?'`\46!!!!!!!!d9('"=7
!!!!!!!!!7<u(c9!!!!~>
<~!!!!!"U#D?"TSN&!!!!!!!NrK&Hr.7!!!!!!!NrJ',(r]!!!!!!!NrJ',)#m&Hr.7"U,JO',)#m',(r]
"U,&A',)#m',)#k"U+l+"VDC]',)#k"TSN&!!!07',)#k"TSN&!!!!!"VDF\"TSN&!!!!!!!!-6"98E%
!!!!!!!!!%&Hi(6!!!!~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
356 305.5 mo
345 305.5 li
345 305 li
356 305 li
356 305.5 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 411 ]ct
[13 0 0 3 344 104 ]ct
snap_to_device
<<
/T 1
/W 13 
/H 3 
/M[13 0 0 -3 0 3 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!%=?c!!!!!!!!!!!!"F;-ia5I!!!!!!!"F>URrq7!!!!~>
<~!!!!!!#AWO!!!!!!!!!!!!!d9('"=7!!!!!!!!a9=BH:<!!!!~>
<~!!!!!!!El:!!!!!!!!!!!!!-6"98E%!!!!!!!!07'G1KK!!!!~>
<~H$O[\H!CSZH$O[\H$O[\H$NX">^:U?H$O[\H$NTt!!QSPH$OZ~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
166 149 mo
155 149 li
155 139 li
166 139 li
166 149 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 411 ]ct
[13 0 0 12 154 261 ]ct
snap_to_device
<<
/T 1
/W 13 
/H 12 
/M[13 0 0 -12 0 12 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!%=?c!!!!!!!!!!!!"F;-ia5I!!!!!!!"F>URrq7!!!!!!!"F>U7n<R-ia5I!!"F>U7n9SU7Wh6
!%97fU7n9STqS3Q-n$JlT;&$QTqS0ST-u)f!%=J6TqS0ST-s[>!!!!IT;&$RT-s[>!!!!!!%=J7T-s[>
!!!!!!!!!IS1"@;!!!!!!!!!!.%D[c!!!!!~>
<~!!!!!!#AWO!!!!!!!!!!!!!d9('"=7!!!!!!!!a9=BH:<!!!!!!!!a9=]nm0'`\46!!!a9=]nm1=]cC=
!#65N=]nm1=]nm0'bqGu=BSd0=]nm1=;;PN!#8U==]nm1=;:f9!!!!6=BSd0=;:f9!!!!!!#8U<=;:f9
!!!!!!!!!7<u(c9!!!!!!!!!!(0;7O!!!!!~>
<~!!!!!!!El:!!!!!!!!!!!!!-6"98E%!!!!!!!!07'G1KK!!!!!!!!07',)#k"TSN&!!!07',)#m'+kBJ
!!NN<',)#m',)#k"U,&5&JGfk',)#m&Hr=<!!NrJ',)#m&Hr.7!!!!&&JGfk&Hr.7!!!!!!!NrK&Hr.7
!!!!!!!!!%&Hi(6!!!!!!!!!!";(b:!!!!!~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
293 222 mo
282 222 li
282 212 li
293 212 li
293 222 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 411 ]ct
[13 0 0 12 281 188 ]ct
snap_to_device
<<
/T 1
/W 13 
/H 12 
/M[13 0 0 -12 0 12 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!%=?c!!!!!!!!!!!!"F;-ia5I!!!!!!!"F>URrq7!!!!!!!"F>U7n<R-ia5I!!"F>U7n9SU7Wh6
!%97fU7n9STqS3Q-n$JlT;&$QTqS0ST-u)f!%=J6TqS0ST-s[>!!!!IT;&$RT-s[>!!!!!!%=J7T-s[>
!!!!!!!!!IS1"@;!!!!!!!!!!.%D[c!!!!!~>
<~!!!!!!#AWO!!!!!!!!!!!!!d9('"=7!!!!!!!!a9=BH:<!!!!!!!!a9=]nm0'`\46!!!a9=]nm1=]cC=
!#65N=]nm1=]nm0'bqGu=BSd0=]nm1=;;PN!#8U==]nm1=;:f9!!!!6=BSd0=;:f9!!!!!!#8U<=;:f9
!!!!!!!!!7<u(c9!!!!!!!!!!(0;7O!!!!!~>
<~!!!!!!!El:!!!!!!!!!!!!!-6"98E%!!!!!!!!07'G1KK!!!!!!!!07',)#k"TSN&!!!07',)#m'+kBJ
!!NN<',)#m',)#k"U,&5&JGfk',)#m&Hr=<!!NrJ',)#m&Hr.7!!!!&&JGfk&Hr.7!!!!!!!NrK&Hr.7
!!!!!!!!!%&Hi(6!!!!!!!!!!";(b:!!!!!~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
102 344 mo
102 344 li
102 339 li
91 339 li
91 334 li
102 334 li
102 344 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 411 ]ct
[13 0 0 12 90 66 ]ct
snap_to_device
<<
/T 1
/W 13 
/H 12 
/M[13 0 0 -12 0 12 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!%=?c!!!!!!!!!!!!"F;-ia5I!!!!!!!"F>URrq7!!!!!!!"F>U7n<R-ia5I!!"F>U7n9SU7Wh6
!%97fU7n9STqS3Q-n$JlT;&$QTqS0ST-u)f!%=J6TqS0ST-s[>!!!!IT;&$RT-s[>!!!!!!%=J7T-s[>
!!!!!!!!!IS1"@;!!!!!!!!!!.%D[c!!!!!~>
<~!!!!!!#AWO!!!!!!!!!!!!!d9('"=7!!!!!!!!a9=BH:<!!!!!!!!a9=]nm0'`\46!!!a9=]nm1=]cC=
!#65N=]nm1=]nm0'bqGu=BSd0=]nm1=;;PN!#8U==]nm1=;:f9!!!!6=BSd0=;:f9!!!!!!#8U<=;:f9
!!!!!!!!!7<u(c9!!!!!!!!!!(0;7O!!!!!~>
<~!!!!!!!El:!!!!!!!!!!!!!-6"98E%!!!!!!!!07'G1KK!!!!!!!!07',)#k"TSN&!!!07',)#m'+kBJ
!!NN<',)#m',)#k"U,&5&JGfk',)#m&Hr=<!!NrJ',)#m&Hr.7!!!!&&JGfk&Hr.7!!!!!!!NrK&Hr.7
!!!!!!!!!%&Hi(6!!!!!!!!!!";(b:!!!!!~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
102 344 mo
91 344 li
91 339 li
102 339 li
102 344 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 411 ]ct
[11.4783 0 0 5.47619 90.7609 66.7619 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 48 
/H 23 
/M[48 0 0 -23 0 23 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 48 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 48 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 48 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 48 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
r[7t,:Mbl\TV;=Ym@jKQ#,.]_M/5sDr[@a\"ro-T93GD"j]Mdi=]nBZ.ieO'rWNE/#n.@WrY"T3q\/rA
";)1R#mUA4d/a.o"uB%kM4gN8rM&\QrLsLiTV.-X:G_turY5VW.m$C,=]kW*kue3m=]nBZ.ieO'rWNE/
#n.@WrY"B-rXo>G&.AjLrWUdOrW)pG"uB%kM4gN8rM&\QrLsLiTV.-X:G_turY5VW.m$C,=]jcg#$>#2
904XDrY>D9"9o/@&/"mSn.YR1rXo>G&.AjLrWU[LrZhk*94ia?R%0eBTq\:MTaRThTqS*KR$E579/->j
rXoGQ-oa^q<)m&`=U/&/<)Z:H-lDprrW3<,#Rq=V&ePc>'*f-^&eGT`#m:/.rW`K1"pE`^!X&]5rWiE@
#pMB*BR5>kR%^8?Ta@HeR#QcFBMUW4rYkbE#7qh!3($84;s.9g;bfnO3$T@RrXAZ(":GYK&/"mSp(R37
rXo>G&.T-WqZ-U-!u2^o$/Y^b#ojiurXo,>#SeaK9j_ghOJ)TH!2B"W!2BId#b[90DdQ4"-l)^krW`Q5
',r2R!^0"Lr`K5'mo]Wmr`KJ&7QiRR)\WSX#Q"K+!=B5F%hfQgm1T^;&ebcc$jm%4!<*T5(EOV4i;a#]
!#6Or(]G'H":5>M-8\+pEf-N_r1`kXr1XLjTSdbo6o65,#lXu+!X]&<&f2iL5"o']=RB5u=BSa"4u+E#
&dnjA!r;m%#7:kN&ebrlq@iQ9#8.^a&eGHY#PnH"$NgtZ)AD!.!tuRk&cN1;!"/f6'H\o!AUp5>StQ(W
oqDAZ$_X)]RXesA/ftc6!Vucr"UGGF(b%F7<E<5h=UA22<C]"t)%HuWp&G4"$4ROYrY"Z5rXo>G&.JsN
pAbO)&/,QU!<E0#!<MQfrrEB*!!**%%MKBXq>^m-%2L*H:htQ=PanHHUA(A\U'mZbP`($,:cKU6%0lV.
$j-_B%iHWQ7SHZZ=^(E"$sHe6;+sG>,T.+##6XPt#R_+Q&.oNf',1$P"qhO\&.]6YoDf7%%2'<f*$5Xn
"U"nq!"/i2"U#;W*"rtu%0ZM-%g*%F'Ic:HBmku/U8+KXUA:JnU8"EXU7%!hBiI>H'FY3KqZ%$)!!*0+
$5=O/3CHP>rEAqurE9P,9LLlg*Y\qc!s.rm":GVJ&/5$UpCmN=";;=V$k)Y,$Ng\F&Jl`@+p\J["7H3t
!s],<+X\QP&Io*Lq>_'-!X&fK0go)aM4137UnaZYqk4RqU8+NZURI$\=%+h_#m:;1p](a(!X&rL+"]WI
<E`U1>5)//>$>-6<Co>*+;bOj!Whfk":,>C&JG3Z&eapP#8.X_'+kW[#kJ$(!<ic;'.#+P#mpq=mf3^r
#RUk].O>`9#mCA'!"'5^3(RqDS>E'XU]."dU&LbnUSO`_S;D,S3$](3!;HO$#SJ%'4%iUZ>?b;*=UJ>:
>?k3%4!tpZ#jqZt#n.=V&ebokpCdcE',(uj%h&d5!!<EF,TH.Oq>^U:,TR*_!"&`.":6#$6s"GdSGf8`
U\gecU]$tqS;D;g6nfPd"9JW!!!rZ-":c7k/36.!r`fA*qcWo%r`]\06TQb@(_-ZM!V$-j"pY88&JGfi
rY#)ArXoDI',(r^#6sc"$NUD;$POj;,nCb0#k%a$#T=Hh,V(2T$OHt;q>^j)#7M:p5>l-AN0sU>rhTRh
s.]OgrhTOg$CHd"B2_#C'FY3Kq#Ca&!sT)G*[Wg385/h_s&o/$$;<uV2^TRZ$3gS5nc/e"#mgkOq@`fA
q@WoF#RLeEo)K.##n@O`-7^JX*$-$k!;ca()BKk3-S$M[&Io*Lq>^j,%2C$F:2#$2P+2HG"/MciV#@%j
Unso`rhBgiP)+L!:,a=3%0lV.$3LM?%iHWP6qU0Mr`];*"^,#2=B\l,>Q.e5:eaPM3$]@P$O6e*!!N]=
%1EUYrXoMN',2)o'GD/o'E/UJ'FP<Y%1;_-$NpnO',)B1'b;6))".G4(`jV,'d=Y3'+t`WqZ%oC#o"I5
8n<F=R%0hEU8+N]V59u_USO`_VPKu]US+-ER"&X=/d!10#m'l&"pG>D(b%F6r_sP2>$5$4>[(E8=BJ^1
>?k?8=^"i)<!GfO.2`U&"nhp&"pteN&J5N`'GLHYrtG>FrtGAE#nn!_%hTBb%13=6!"/uB'+Y-F!WiK9
((p<Ap]([6((^TM!W`?5'+bBI!<**6#T"dD6sF\hT:DLGU8"E[VPU-fU_9N#VP^,_U7e*JT8IYn6o62+
#lXu+!YPVD&Jl`K5"o'[<``=#<*EO3>Q%\;>?kE:<)Zh!<``Bs4u+E#&ISa@!r;m!#7:kNrXoGH%h/m\
'G;)X'F,9a'GLoa%hJXP!tYkJ#PnH"$NgtZ)AE&L#6>5G'+P]k#PS3'#8Ip_'+t]Sr;Zp5)B'4e$iUVJ
'du+;?Z1IVTUhXFTV8'RVPX0c$DjVoTqS-NSXlF8#(UW!9fa[;rXSo4#RV4a,W%YR:g*`u%ou\.?!:H:
=]ns5>$Y$+<rH)*=\qRN1aF"R$N:;-!"Ar9$k<d]&J5Qc%L`[YrY,;GrY#_T$4ICU&.oKf%h9!T!W)lr
&d&pk*YnSQ#RCqR',hl1!W`&s#6Ghb)A<_o#lFZ)'cnD4rY#2K&0a,1BR5;jR%^+BSXuFGU8@jbs/#^j
&>c+oSt;LDStVO2K6h3,3?nG@rX9)E)C%4/7nuuc=T);(<`NC.>5_Y.>$>02<rH)+=BSQt7mf6\)A)lV
r;[?.!"05G&.oNf&J>]f%La'I'+GWa%M06c&J>]g&.T-WqZ-U-!u2ap$2ac."UPVL)BKe!q#CX%)BKe.
%1*49!!<NI)\r>arZhb'94ia?R%0eBrh'IeSXuONUSRjb#c+5kTq7gHTV)UaTq@jBQ%<O?0`E?s&dT=&
3(HnH<ENE'=9DW*='#<("']#8>Q.e.<``='r`BG/=B/=!7lVn6rY#23#6P5@&.fHd')WCE&J,KP'E&RC
'*8[U&c<:I&eP`f&.JpJrW<'(!XJu5qZ$d$!sAf?(BG3Qq#CX&'Gh>c"9S`&!!39-#lY).-jDJ'Cl+gX
U&C]!TqS$LTqe?WUnso`US=NWT:M[LrLsLiTV.-X:G_turY5VW.m$C,=]kQ(r`B)&"']#8>Q.h*=8Q,)
=BSd"4"D<M'`\CA"U,):$kO$M')WCG&ePZg'DiCF',(oh')WFB&d/dX$jd.;"n;Qp$ka*Rq#CL!&/#EA
!<+AN1J_hDTV/"WU(O)mSY)UNU8+N\V50l\US4<Ns.TCc#,.]_M/5sDr[@a\"ro-T93GD"qcWo"r`TD.
>[1M4>5hV#=U%u2=\Ch,*<$]P"U##9$kO$M')WCG&ePZg'DiCF',(oh')WFB&d/dX$jd.;"n;Qp$ka*R
q#CHu&/"sOnGrP:"uB%kM4gN8rLst!Tq.gLUS=NZV59u_U8+ESSY;bUU'@<aTS[J\1]Ag%'a>X.4%i^Z
=Sl8#=8lA*>?kE;r`];&qcO,*=]nBZ.ieO'rWNE/#n.@WrY#2D"qqX_&J,Thq[s#F'+b`gr"K&B";)1R
#mUA4nGiY"&eG0@!!<<7&e+:1J,~>

%%EndBinary
grestore
np
166 174 mo
155 174 li
155 164 li
166 164 li
166 174 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 411 ]ct
[13 0 0 12 154 236 ]ct
snap_to_device
<<
/T 1
/W 13 
/H 12 
/M[13 0 0 -12 0 12 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!%=?c!!!!!!!!!!!!"F;-ia5I!!!!!!!"F>URrq7!!!!!!!"F>U7n<R-ia5I!!"F>U7n9SU7Wh6
!%97fU7n9STqS3Q-n$JlT;&$QTqS0ST-u)f!%=J6TqS0ST-s[>!!!!IT;&$RT-s[>!!!!!!%=J7T-s[>
!!!!!!!!!IS1"@;!!!!!!!!!!.%D[c!!!!!~>
<~!!!!!!#AWO!!!!!!!!!!!!!d9('"=7!!!!!!!!a9=BH:<!!!!!!!!a9=]nm0'`\46!!!a9=]nm1=]cC=
!#65N=]nm1=]nm0'bqGu=BSd0=]nm1=;;PN!#8U==]nm1=;:f9!!!!6=BSd0=;:f9!!!!!!#8U<=;:f9
!!!!!!!!!7<u(c9!!!!!!!!!!(0;7O!!!!!~>
<~!!!!!!!El:!!!!!!!!!!!!!-6"98E%!!!!!!!!07'G1KK!!!!!!!!07',)#k"TSN&!!!07',)#m'+kBJ
!!NN<',)#m',)#k"U,&5&JGfk',)#m&Hr=<!!NrJ',)#m&Hr.7!!!!&&JGfk&Hr.7!!!!!!!NrK&Hr.7
!!!!!!!!!%&Hi(6!!!!!!!!!!";(b:!!!!!~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
674 222 mo
668.528 222 li
668.528 212 li
674 212 li
674 222 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 411 ]ct
[7 0 0 12 668 188 ]ct
snap_to_device
<<
/T 1
/W 7 
/H 12 
/M[7 0 0 -12 0 12 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~S1"@;!!!"h-ia5I!!&dd-ia5I!26-Z-ia5ITqS3Q-ia7@TqS3Q-n(d_Tq\/-.&!?/T-s[>Tq\/-!!!"o
T-s[>!!&N;!!!!!!1YG;!!!!!~>
<~<u(c9!!!"#('"=7!!$,''`\46!*NH,'`\46=]nm0'`\5:=]nm0'bskS=]niA'j4[B=;:f9=]niA!!!"$
=;:f9!!$(9!!!!!!*9p9!!!!!~>
<~&Hi(6!!!!2"98E%!!!]F"TSN&!#$"X"TSN&',)#k"TSN9',)#k"U,PQ',(r]"VVO_&Hr.7',(r]!!!!5
&Hr.7!!!T6!!!!!!"f>6!!!!!~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
668.528 222 mo
663 222 li
663 212 li
668.528 212 li
668.528 222 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 411 ]ct
[8 0 0 12 662 188 ]ct
snap_to_device
<<
/T 1
/W 8 
/H 12 
/M[8 0 0 -12 0 12 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!%=?c!!!!!!%=?c!!!!!.%d9,!!!!IT;&$R!!"F>U7n9S-n(^^TqS0R-n(^^TqS0R!!"F>U7n9S
!!!!IT;&$R!!!!!.%d9,!!!!!!%=?c!!!!!!%=?c~>
<~!!!!!!#AWO!!!!!!#AWO!!!!!'j+R?!!!!6=BSd0!!!a9=]nm1'bshR=]nm1'bshR=]nm1!!!a9=]nm1
!!!!6=BSd0!!!!!'j+R?!!!!!!#AWO!!!!!!#AWO~>
<~!!!!!!!El:!!!!!!!El:!!!!!"VDF\!!!!&&JGfk!!!07',)#m"U,JO',)#m"U,JO',)#m!!!07',)#m
!!!!&&JGfk!!!!!"VDF\!!!!!!!El:!!!!!!!El:~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
356 349 mo
356 349 li
356 343 li
345 343 li
345 339 li
356 339 li
356 349 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 411 ]ct
[11.4783 0 0 10.4762 344.761 61.7619 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 48 
/H 44 
/M[48 0 0 -44 0 44 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 48 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 48 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 48 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 48 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
nGj(**ABliJ<lt*Q@NC30HCGX!"T2C(aV%0;d*@'7l;S0%g:_h$O7"K&/#Te%LNF@!8mhZ(Esn)q#CL$
*[2EZ!"T>U0LT?"QD:4@J71i"*=1[*&HDe6%i?TM7oNSp;b&\k(_6c+!!rl;%M06c&.T$Ph>dWo+s$sa
!!<EH+rBkOmJmb'*ABliJ<lt*Q@NC30HCGX!"T2C(aV%0;d*@'7l;S0%g:_h#R:\H&/#Te%LN1@h>dWo
+s$sa!!<EH+rB5=&HWOn5?)KTRA6OFLM^!T.1lXE!;lg-#o4R74A&UW>#e0W/fkc7h>dig$kO!`&ePZ`
$/tpi!X8o=+Y+fCq#CX),V(#H#R1A-!:Kn(!X9#E.RmchKp81(URm^(G@*fh&ISdEkPu>!"pl%i/j`-,
='Ad/;+X),,8LRi!oX+_%Ls'`',(H\&Io<1!!`iD)'1Ig.KoPI#6ZM50HM)E$L%O,":lCs6t1G'R%9tI
UnXEIOEk;',oR9sm/[(b(BOjO'-Stf;,^P!>?b63;c,M,+VP:j!oa1]&J5ZS'*8dY&`Ncq&02r>/h\XU
q#CX%.5*:u+rq6o!:0\%#T5'N=a6+%U8+KZUna]ZT9=G%3%5^Nkl;"m%20U-3DN[[>5_S1>$>$'3@GaY
%0Y_l"9K/K&ek3X";;C]&H_%o#6G\c,8q[I$MON*$6UH0,9dp*l2V##,s+k<Ln"C?"/M]eV#I1pRttlU
4!bL.!;Z[3#SJ(,3_NIW>[(?5=BSj5>?+<W.iT*,jo>Sn%1a$`&ek3X"qqU^&J#<Yl2V"i"9\uP-QhdW
!Zrd3!sf#4!q?7"!X&iA.RdZaKTi%(V54'b%A]hrT9FqK?:?=T$3UG"!$)+D#SnR65=eXR>?b66=BJa0
>?b3,83\UJ('k$Ekl:er%M03]',)&n'GM2p',(rh%M.k*#6G5F(`b=f..7-@-o<Y!(_R/Wnc0a7%iHT[
@<[ZqS=uaSUSFQXUSFW\Tq%C,G@<la)%QlE!;ca'!XK5I+Y>QH;-$ft>5qb(=peA4;,/u#+V>.h!pTae
&eGZQ')rXC&crXV''fN&";2^u,V_#%mf3S@0ejps*>/MG!!ruM.6(LTP+A8?rhK@brhBdoTUh6i=u[rK
$Ln*)":Z%`.Q("'=B\j2>5MG2>$>'4=BA9U.N0!1"R?$g%h\mU&cNF?'E/UH&J>]eli77p(a:.D,ps)h
!!`lZ,oe*Q(^BO2$4eCA88a9SV59u_rhB@brh9apUnsoXM/GjD,S0_Op](X,&fN,Z93,;%>?^c($<gY<
>ZOKZ-Q3U'mJmIu$kEp_',)#Q'*f-`'+tlf$jlA&!sT_j)t!_&!!=/c*!Z*:&-;t?&Lp1PD1n.HV50o^
U8%OY&>GnoUnji[P_<mW6n/cS"9S>u%0?Y<(*P(f85WJn>?Y5)=UeP<>?b3,8384C('k$EnGiS!%L!CU
',(ukpCdcE&eboj&.T0@!!`Q4&JZBB0dYu_#9trX*u,@p!r;m-"V)=p6t(4pPanGCUnaZYq4S=nU8+N[
Tq%@(G%!cb(CgWE!"/i4$kjd92+peI=^1l/pK@K!$X6b7;+if!+VP7g!qH<o%hK<c'E/X='E/UI'+tlg
&+]c+"qhjt-T!P)nGr:`#:)#\-Qj?@#5S<+$Q1<R>^)="T:u7Zs.]7]s.]Lf$)*u\O`t%l-lEEg!"&o>
',rDZ:0(J!=oMUt=oMS3=]ed,:,XR@'Fb9<!!3ZC&c<:7'DrIE&J5QG!!`cI+sS6[-k5>>#7W(1+<r'J
#l=T0!YH_<:32DcV59u_rhB(Zrh9XmUnsoYNH7kt3$f.<q>^^+',`8b:07F!!*\ho!*]A+#$4Pb.iB!,
p&G=)%h]Qh',)#I'*f-`'+tul%gr%2":Q=r)[#U1nGi[o)^?C4rW)p&$P4dR=)3GRTr"Q\U]."\U&Lbo
USO]^Tp:7G=$\;IrWiE*$O@Ig-TXdq=^,*5>45T%>$5'6=]%^N-QX!.rWN&t!XoPMrY#;H'(6J7&et<Y
!Y>hMq>gL0"!B9M+Q!/$+>,>jrY>DO$7A8LFbc0NU84T[rhB"Xrh9LiUnj^hS<J_N?UZ@A)u^9P'-Sqd
8l8Vm>Q.gp=oMS1>?Y')8iJ=F'E/I<!!NE7&.oKfrY"Z5rXoAJ&J5Qb!rDus+p0>P0d-&fm/R520f1E[
,5s8#4^N>oR[p/OU]."XU&LecUB[E_RZM`"4oR/7('bj12,.(N=BYW,m90El#?b//<D>>$*W?iQ!!E9%
%hTEO'($A1&crXW&,QA+*s3f?.Lb27!t6Y1-2o"c5Qao+Nh?<H!2KLen"KcU!huEarhKXgNc\1u5lMl/
.6^L/>Q.gh=oMS->?FWa.K1Ih":#)>&ekrl&ea@@#8.X_&ekrg"o\Z(%0@"H"n_l[!!3<2%fQq:7L)t=
OeASJUndp`m@jNR#G\)kVP'&r<rPSf,mQ(h:KUk+>$C)l#?k;8>Zacf0E*6t#RLbB$4[U[&ebljk7\(5
&eblj&.T'H#giYO7L)t=OeASJUndp`n"KcTrh9XmUnsr]Oa'q+7fF\=00rB9>[(B8k?/$n>$G66:I-Z5
-2n/T$4[U[&ebljk7\(5&eblj&.T'H#iYjR!<,Fm<d9b"VPU)`rhAeRrh9XmUnsr]Oa'q+7fF\=00rB9
>[(B8k?/$n>$G66:I-Z5-2n/T$4[U[&ebljrY+Q1#8.X_&eY`c$N:=Y!<,Fm<d9b"VPU)`rhAeRrh9Xm
Unsr]Oa'q+7fF\=00rB9>[(B8k?/$n>$G66:I-Z5-2n/T$4[U[&ebljk7\(5&eblj&.T'H#iu'R!<,4c
;KRqkrhKOhrM&bSrLs:erhKXgNc\1u5lMl/.6^L/>Q.gh=oMS->?FWa.K1Ih":#)>&ekrl&ea@@#8.X_
&ekrg"o\Z(%0@"H"l0.["UYb=%K8$c4^N>oR\$5PU]7(WU&UkdUB@3]RZISp?9S9ArY>_Z/2^.%='/W)
>4#Jl=pJ24=&hsP/04^*qZ$[.&J=pRm1]C1!YH"TqZ-U;"!oHI%.=2d!!<WZ.jb0:rYl7n7:11mPFSAC
UnaZYnY$AcU8+N[U7@F&F^IQbrYthG$54R72bHqJ>$G06m9'd">$G02;+`c!+VXhaqZ$Wu%g<LV&JGci
m1T^;&ebih&.\j>!<+/E.l8t'hZ*a$0f1E[,5qfT&1U"JCP.nGV50o^rhB(Zrh9RkUnji\Pm)eU=$eAJ
rWiE*$O@Ii-TXdq=^,*5>45T%>$5'6=]%^N-Qj-0rWN&t!XoPMrY#;H'(6J7&et<Y!Y>hMq>gL0"!B9L
+S#O#!!=>q0Hg?0rW!<-&LBD3F,c`eV50mcU@k5ZU'm`lV59`BF&+bA&H_e/"pkq\.R6a1r`]A+mo]Wo
r`]S.:-^<I'++F6#ljr4%h]Qh',)#I'*f-`'+tul%gr%2":Q=r)[#%!"9TPe*XqlF#n%V!4'ZulS=cMS
U]7(_U&UkdUB.'\#Fpp#>WX>O$i'c2"q;7c.Q1%&=BJ^0>4Yl*>$>'2=B80T.N9'2#4hfr%hTEP'(Ze8
&crXW&+fi,#T4g2+=S]Jq#Kj`#7W(1+<r'J#l4N3"qDFq6t(4pPanGCUnaZYq4S=nU8+N[Tq%@(G%!cb
(CgZF!"/i4$kjd92+peI=^1l/pK@K!$X6b7;+if!+VP7g!rDum!!EfD&J>cV')*(=&d/j\&J,KE!!`]@
)^$Lb0dc&`#:)#\-QsEA#5S<2!X&c@.R[HWKTr.+Unjc[UALVfU8"EYUnnEkP_<mW6n/cS"9S>u%0?Y<
(*P(f85WJn>?Y5)=UeP<>?b3,8384C('k$EnGie'%M03c'+trP'*f-_',(rh%Lr"0#6G5E'd#.b-2[c0
!!a`'0cq,B$3Ko$$4eCA88a9SV59u_rhB@brh9apUnsoXM/GjD,S0DF$4%7_-Tat%>[(E9pK7i,>?b?5
904L>&d\=6o`,4'$kEp_',)#Q'*f-`'+tlf$jlA&!sT_j)s72')^HC-nc/t')(@OKGESMiUAgqbUAgno
U7e'?G?QsT)%,m6$j7"R)CdU?='/X/>$Cf+rE9J/=&1\')AEV`lMq"t&eYfU')N@A&d&^Y&eF=/"U5ef
+rhm0-O]AC#7Dn**$QRD#4_a9":l@p6t(:uQ(4PDUna]ZU8+KZUnO<DN-A\u,8h!pnGimt#Rh:g/N$:#
<`o<(s&o;($<U>+:,OUH&I\pHr;c6c!YQ%Vr"B#Cr"9&C&/+:/#6YY[+XAcs..7-@-o!G%+WV0unc0+#
":>\i7:("fPFnYIV#@%gU^X)qT9FqK?:?=T$3UG"!$)+D#SnR65=eXR>?b66=BJa0>?b3,83\UJ('k$E
kl;;+%M03c',2)o'GD/o'+kcc&*j2s!X]PC(`b=f..7-@-o<Y!(_R/WmJmG'-9Ft>Ln"C?"/M]eV#I1p
RttoV4!kR(!!W]B)_4!C<W62)=]ed/r`]S,904XC'+"L9lMq+s%1a$`',1<Y"qqX_&J#<Yl2V"i"9\uP
.3J!Y"s599#Qt83m/RM")(@OJG`n\nUSFUmUna]ZT9=G%3%5^Nkl;"m%20U-3DN[[>5_S1>$>$'3@GaY
%0Y_l"9K/K&ek3X";;C]&H_1sr;['((Et(B+Wq-d!!`iR+W;RL(BWk%(Bb6e,t)3fOI2T5USFQSR#lT&
6mW`^"R,mm!XK5K+YG`O;cip#$Wg8(3%c?f%1!"8!9=+d&J5Wh'GM2n&J="&#7qn",;(Vu"8Mp%"">lU
,9e->kl:tj"q)"m7UL@o%[<Q[URm^)G@*fh&ISdEkPu>!"pl%i/j`-,='Ad/;+X),,8LRi!oX+c%M'-a
',(uj%h@k)q#CX,&fD`E1b&Y(!!`WV1b]sg&dmb$&HWOn5?)KTRA6OFLM^!T.1lX@!"TAO*\KQI<E`R+
8j"^I(('s?i;a/j$kO!`&ePZ`$/tpi"9o,?+Y+fCq#CX),V(#H#R1Fn!!*?G%5:1YJ<lt*Q@NC30HCGX
!"T2C(aV%0;d*@'7l;S0%g:_h#mUeI&/#Te%LNI.!:g*l(Esn)q#CL$*[2EZ!"T>U0LT?"QD:4@J71i"
*=1U(%g3C[,rJ1k>$=ip2'j(M"RuK[!!rl;%M06c&.T$Ph>dWo+s$sa!!<EH+rB2<%L=(/6t(V3USF-*
@72di!!qN`%g3C[,rJ1k>$=ip2'j(M"Ps+b#7:qP&eY`c$4#Jh"TSN=+s$sa!!<EH+rBbLJ,~>

%%EndBinary
grestore
np
356 349 mo
345 349 li
345 343 li
356 343 li
356 349 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 411 ]ct
[11.4783 0 0 6.42857 344.761 61.8095 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 48 
/H 27 
/M[48 0 0 -27 0 27 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 48 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 48 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 48 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 48 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
rYGnd5?`#XOIMr>Undp`o:c/X$DXDmTpq-qE*>LOrYPPA#SJ701Ik5@=^1l/mofWn#[:G3:Id2j+;4Y]
q>^X.&.oKfrY"`7rtGAE";;@Z&.\O:rZVFp2)$32!!=Au2(SYMr[SC;=`fUgS=lXQUSFQXnY$AcU8+KZ
US+-CN,r,^r[[s`#9,*L8l8Sj=oMUl=oMS0=]e[$9J\+:rYGA2!Y,eSr"AB1r"9&C&J+a=rZM@l0.[Xk
!!<Z_0.?fCr]LBXDMt$ZrM0@dn"K`TrM'LiS;V;Zr]U6""<fZr='>N+!*JJg!*K5("Bef!2Bi&=r;[$*
%hoZj&ea[Ip_*iE&ebom%gDn3rY5MR(^pH&!!<61)&iJhr^I,nG`eYrV50mcU@"ZRU'IHhV5BoJGZOf5
rZqe&5u1Tf>?Y4n=U/,6>?k9+5qi3`rWi`9%M06c'+tr@'*f-_'+toh%LW1@f)Y[Jr^I,nG`eYrV50mc
U@"ZRU'IHhV5BoJGZOf5rZqe&5u1Tf>?Y4n=U/,6>?k9+5qi3`rWi`9%M06c'+trL'D3"D&eYij&eGN[
rWpmOr^I,nG`eYrV50mcU@"ZRU'IHhV5BoJGZOf5rZq\#5u1Tf!aAi3k?/$n>$G66:I-Z5-2n/T$4[U[
&ebljk7\(5&eblj&.T'H#hf:R!<,Fm<d9b"VPU)`rhAeRrh9XmUnsr]Oa'q+7fF\=00rB9>[(B8k?/$n
>$G66:I-Z5-2n/T$4[U[&ebljp(R!1#8.X_&eY`c$N:=Y!<,Cl<HsXuV59u_rhAeRrh9XmUnso[Oa'n*
7K+S601#h>=Bo'6>3B#n>$>-8=A_C<r[%OM!=TS>&cr^Z''Bo0&eYlW&ciRQrX&N)i;iZRr;usS#!l^F
PanD@rhKLfn"KcUrhB[lTU_6n@R9uLrYPh\/N6O-=BYW,lWO3j#$G&/;)^'JrYYM4!YQ(Wr=\u@nItj6
!YH"WqZ-U9"!T0B#i>Ua#Uh,GrZ1t[$nP"^I#F;]U84QZU8%1O%&0JkUSOWTQA^-%8hBr`rt#PL(*kLp
92\en>?Y4t=UJ>9>?P!)90=gP(B+mB!!`]=&J5Wh&eaRF#8.X_&eP]d#5\E"+pKSS0H0um!U9[_!!WH)
!#mUJ/H-jm$Omh'8R6=lQ_L=PUnaZYo:ZVfU8+N[V4s<4EEu-g(&eU?"q(eU,:YiK;d!=/>$CAt$X-_<
>?Ols4XqZn$N:8+!!3T?&cNFF&eYlI'E8^E'*8aV%Jg)()$V?B0-L>t!Ta:c!<N9F0/FmQ)?'UD!YZqB
:N_bkVPU)`rhB(Zrh9jsUnsr\OEF>[-PHO]!;lg($54=.5>G<c>?b;"=UJ>:>?k9*5:[Wc$MFH)#n@IY
&ebokmh5p=',(uk%h8p?!!`oS,8^Fa!s.fiq>^a$!sAWA,9I?j!"KGZ/jsH.S"ZUPUna]ZUA(>kU8"EX
Una]YRtYTF/fkJt!!`]=(*51n;H`p$o3(up#?aqf0ch)@#4qlt!>,tXr=\]8r"9&E&HVP)#7DS'.OZu$
%-ITq$nF"[.OuPJq>_$4(*ttIH]FSgUSO]\US=LYTb!llUSFW\US+*:HX8]X(('d:%0[+Q*%a0:<*3:,
=^##%=UeP<=^"s1<'`Mr*"iV_o)K!r&J5Wg'G;&O'*f-_'G;#j&HVM(#72A!0K;B\/+EW6!!au869$YJ
*!uHA&-rjg0N<+NR%L+LV50l]U8%OY&>GnoUSO`_U7[g2F&Xh7&IA14#m1JD(FV1.;cd-$>Q7n$=oV\)
>7"G6;aWGk(CpfSo)Jdo&cNFC'E8^>'E8^F'E/UF&Hq_+#7)+j.PX:U.H^[9-pU-S.O,`8qZ%--#o"I5
;K@bgTqeH]V50mcUA^ebU'm`lV5C)aTq76a;D&%n'F=g:!"K/>%N$c\7oi\p>?kB:>5)/0>$G39>?Y*/
7m/FA%LNC5!!<E2#mpMB!YZ4[pCdT@',19V!so8>#58*&"qh^c&0`MCoDnL`#9>3:&/,im#6"W%";(nU
,r@qmG)i5gUo:/eUnjc\qk=[tUSO]^VPp;`TT42"68Tu)#lXu+!YGPC&Jl`K5YP*O;I!I2>?Y34qcOM5
>$>-7>[10%;bTG3,o7.$"TAK!!!``7$4I:J$5EIQrt>,@rt>;E#8@LN$Od@J#PnH"$O[Ob)A<;m+s@gK
)[Pm4$O@[r)'L1A"qqmn&cN1;%La(#3_`mqIZBtkTq\F_V#I.hUAgqdU]mWiTq@m9#(C>n9fa[;rXSo4
%13af,W%SN:/t1h9jCj!=p%l0=]kT*%9Zq1;,UCh6p!4N)\WSX#Q"K-!=B2C$k<RK";UeHr=f&@#o*RJ
#n@@P$OQq3!<*T=(EOV4";Dk#,;1\sqZ-9h$RRM[,9e-B";Mt!(]G'H)@RfM:M>'(LQ\-qT:r+\U]RBg
V#@%iUnjjdU^X)nT:274LOXV`:H9Wu)ZC-o&/lcQ6UaUC<Dudl>?Y35>?b66=BJa0>?b66>$Fg$;cQUc
770$Z)A)lVr;[3*!"05G%M''Y#mV4E&d]3b'GD/p',2)nrXoMP#71eL%h9'Y$i9r'&IT<m*!lZT'H/)M
1FV\l$Rdee+;tq&!XThc(&egE,Te^5Aq?55R$jG3SY;jRUnsrbV50l]UnsobV50i]Tq)LXS!fY0Q%<O?
0`E?s&h+YG3(HnF;cZms<)Qq'>$G69>?P'1=^,*8>?Y06;H-Rp<`;mp7lVn6rY#23%0HkF&.fHd&ebcb
$Pa?S')rXD'`SjG&e,Kh$OmU[&eP`f&.JpJrW<'($O?q>!!!-+$4\C6,5qT5!"0u%-4U@e"98E)"pk25
r[8C8:Mbl\TV8*QR[p(ETqnWbVPX6e&uDJ'W262]T:MFDU7n6QM/5sDr[@a\#TP?V93GD"=]t`(##eB#
?!U]>rE0>/>[:T8;,dHo#[(;4=]nBZ.ieO'!!NQ1"U58A&/"mS$54!^%L`XS'GM/nr=fSP&el&j#n.:S
&JP-V";)1R#mUA4p&G=!(a:+>*"iGL!!`Z?*#BbB(]sC2r[8aB:Mbl\TV8*SR[]h>T:r$YVPU,bUnsob
W2$&Y%%j&[R\HOMTV.-X:G_turY5\Y.m$C,=]eg0rD`qt:ek?r>Q7k*>6A2,:f@6l#[(;4=]nBZ.ieO'
rWNE/#n.@WrXoJM&J5N`$3p\LrY,;GrY#PQ":#8D%hTBerXo>G&.AjLrWVrp#8/%$,:kGq!Vl]s!@TQ'
/0c>Z'(l8(-jhb+Cl+gXTq\9ORf8cXT;/@\V#mQiTDk;eR[g+HTqJ'8Celkd./jqe*%O*D=]nj0=oD>&
<)QS!q-*r+;,UBl<<u`1=BSd"4"D<M(&e@>"pk\L&cNCE',(r]&J#<X#8R"I#6tSF%hTBe'E/UI&J,?W
#6"f!!!`oI)^$jm.KfJH#6ZM60d%DM%.sW"-k\=3Cl+gXTq\9SSsu.9S=ugUV>[8(V50u^S=,e7StMgP
TqJ'8Celkd./jqi*%O*D=]nj0=]\[)<W5r!>?Y80>QS,5>lI\2<E3+%=]nj0=\Ch,*<$]P"U##9$kO$M
')`IG&J#<YrY,5CrY#AA%1a'L'E/UI&J,?W#6"f!!!`W4%M:$?,mX5G#6cD+-4p^n"SDco,UkE?Aq?57
S=cLKU8"?LSY;mTUnsrcV50l_Tq.UFU8"?TT:D:6JS%P/rZqIU#8ejK7oNAe=Su>$<<?B.>Q%e.>?Y81
<W#u)=B/=!7lVn6rY#23#6P5@&.fHd')WCG&J#<a'DiCF',(fc&c<:I&eP`f&.JpJrW<'(!XJu5pAb:3
+s$sa!!<EH+rBtR!X&]5rWiE@#pMB*BR5>kR%^8RTb!Q^Tr"N[V5C,dUnac[SXKJN#,7fYNJ)Uk!`(g#
rYkbE#7qh!3($84;uBet<<?B.>Q%e.>?Y81<W#u);bfnO3$T@RrXAZ(":GYK&/"mS"qqX^%h00cq[s)H
'+GHa',1?X";)1T%1E%5rXf5I)B9(Y!!=#]*X;NBrW!$)*[2Eq!!<NI)AW5`rXK2K-ot(0Dh*qBrh0pu
R@U%JUSO``VPU)`V4jHJUAghlTTF\B?VNR0(&e^B#6tSL)^I7'7Ss(e!E`M(<<?B.>Q%e.>?Y81<<66)
r`KJ&7QiRR)\WSX#Q"K%!=B5D%M'3c&eboj%h00cq[sAP'+GHa',(uk'+YQ]$3C#(rXo;L*Zc'k!!=#]
*X;E?!sTej(\dt4'cnD4rXs_~>

%%EndBinary
grestore
np
420 349 mo
409 349 li
409 339 li
420 339 li
420 349 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 411 ]ct
[13 0 0 12 408 61 ]ct
snap_to_device
<<
/T 1
/W 13 
/H 12 
/M[13 0 0 -12 0 12 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!%=?c!!!!!!!!!!!!"F;-ia5I!!!!!!!"F>URrq7!!!!!!!"F>U7n<R-ia5I!!"F>U7n9SU7Wh6
!%97fU7n9STqS3Q-n$JlT;&$QTqS0ST-u)f!%=J6TqS0ST-s[>!!!!IT;&$RT-s[>!!!!!!%=J7T-s[>
!!!!!!!!!IS1"@;!!!!!!!!!!.%D[c!!!!!~>
<~!!!!!!#AWO!!!!!!!!!!!!!d9('"=7!!!!!!!!a9=BH:<!!!!!!!!a9=]nm0'`\46!!!a9=]nm1=]cC=
!#65N=]nm1=]nm0'bqGu=BSd0=]nm1=;;PN!#8U==]nm1=;:f9!!!!6=BSd0=;:f9!!!!!!#8U<=;:f9
!!!!!!!!!7<u(c9!!!!!!!!!!(0;7O!!!!!~>
<~!!!!!!!El:!!!!!!!!!!!!!-6"98E%!!!!!!!!07'G1KK!!!!!!!!07',)#k"TSN&!!!07',)#m'+kBJ
!!NN<',)#m',)#k"U,&5&JGfk',)#m&Hr=<!!NrJ',)#m&Hr.7!!!!&&JGfk&Hr.7!!!!!!!NrK&Hr.7
!!!!!!!!!%&Hi(6!!!!!!!!!!";(b:!!!!!~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
420 276 mo
409 276 li
409 266 li
420 266 li
420 276 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 411 ]ct
[13 0 0 12 408 134 ]ct
snap_to_device
<<
/T 1
/W 13 
/H 12 
/M[13 0 0 -12 0 12 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!%=?c!!!!!!!!!!!!"F;-ia5I!!!!!!!"F>URrq7!!!!!!!"F>U7n<R-ia5I!!"F>U7n9SU7Wh6
!%97fU7n9STqS3Q-n$JlT;&$QTqS0ST-u)f!%=J6TqS0ST-s[>!!!!IT;&$RT-s[>!!!!!!%=J7T-s[>
!!!!!!!!!IS1"@;!!!!!!!!!!.%D[c!!!!!~>
<~!!!!!!#AWO!!!!!!!!!!!!!d9('"=7!!!!!!!!a9=BH:<!!!!!!!!a9=]nm0'`\46!!!a9=]nm1=]cC=
!#65N=]nm1=]nm0'bqGu=BSd0=]nm1=;;PN!#8U==]nm1=;:f9!!!!6=BSd0=;:f9!!!!!!#8U<=;:f9
!!!!!!!!!7<u(c9!!!!!!!!!!(0;7O!!!!!~>
<~!!!!!!!El:!!!!!!!!!!!!!-6"98E%!!!!!!!!07'G1KK!!!!!!!!07',)#k"TSN&!!!07',)#m'+kBJ
!!NN<',)#m',)#k"U,&5&JGfk',)#m&Hr=<!!NrJ',)#m&Hr.7!!!!&&JGfk&Hr.7!!!!!!!NrK&Hr.7
!!!!!!!!!%&Hi(6!!!!!!!!!!";(b:!!!!!~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
229 334 mo
224.368 334 li
224.368 324 li
229 324 li
229 334 li
223.368 334 mo
218 334 li
218 324 li
223.368 324 li
223.368 334 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 411 ]ct
[13 0 0 12 217 76 ]ct
snap_to_device
<<
/T 1
/W 13 
/H 12 
/M[13 0 0 -12 0 12 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~!!!!!!%=?c!!!!!!!!!!!!"F;-ia5I!!!!!!!"F>URrq7!!!!!!!"F>U7n<R-ia5I!!"F>U7n9SU7Wh6
!%97fU7n9STqS3Q-n$JlT;&$QTqS0ST-u)f!%=J6TqS0ST-s[>!!!!IT;&$RT-s[>!!!!!!%=J7T-s[>
!!!!!!!!!IS1"@;!!!!!!!!!!.%D[c!!!!!~>
<~!!!!!!#AWO!!!!!!!!!!!!!d9('"=7!!!!!!!!a9=BH:<!!!!!!!!a9=]nm0'`\46!!!a9=]nm1=]cC=
!#65N=]nm1=]nm0'bqGu=BSd0=]nm1=;;PN!#8U==]nm1=;:f9!!!!6=BSd0=;:f9!!!!!!#8U<=;:f9
!!!!!!!!!7<u(c9!!!!!!!!!!(0;7O!!!!!~>
<~!!!!!!!El:!!!!!!!!!!!!!-6"98E%!!!!!!!!07'G1KK!!!!!!!!07',)#k"TSN&!!!07',)#m'+kBJ
!!NN<',)#m',)#k"U,&5&JGfk',)#m&Hr=<!!NrJ',)#m&Hr.7!!!!&&JGfk&Hr.7!!!!!!!NrK&Hr.7
!!!!!!!!!%&Hi(6!!!!!!!!!!";(b:!!!!!~>
<~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
224.368 334 mo
223.368 334 li
223.368 324 li
224.368 324 li
224.368 334 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 411 ]ct
[3 0 0 12 222 76 ]ct
snap_to_device
<<
/T 1
/W 3 
/H 12 
/M[3 0 0 -12 0 12 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~.%D\6S1(#)T;&$RTqS0RTqS0RTqS0RU7n<RURrs)-n(T6~>
<~(0;7e<u+n?=BSd0=]nm1=]nm1=]nm1=]nm0=BH>?()Bse~>
<~";(b>&Hi[[&JGfk',)#m',)#m',)#m',)#k'G1H["9];>~>
<~>R+M=#@%E4"TSN&!!!!!!!!!!!!!!!!!!!&!!QU4>[.M=~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
33.2999 353 mo
33 353 li
28.0001 353 li
28.0001 349 li
33.2999 349 li
33.2999 353 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 411 ]ct
[5.73913 0 0 4.52381 27.7609 57.7619 ]ct
snap_to_device
<<
/T 1
/W 24 
/H 19 
/M[24 0 0 -19 0 19 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~0JG1D??_L"StVpSUS=KVTqS0RTqS0R)]K_D7:11mPFSACUnaZYTqS0RTqS0R#6tJF.RI3PK9`.,Unjc[
U8"?TTqS0R!!!!#&LBD3F,c`eV50l\U8"?TTqS0R!!!!!$Q1?S>^)=#T:r$TUS=KVTqS0R!!!!!"qDFq
6t(4pPanGCUnaZYTqS0R!!!!!!X&c@.R[HWKTr.+Unjc[U7n9S!!!!!!!!!!%jX,*DMam[V50l\U8"?T
!!!!!!!!!!$5k9P>'H.#TVA3VUS=KW!!!!!!!!!!":l@p6t(:uQ(4PDUna]Z!!!!!!!!!!!X&iA.RdZa
KTi%(V50l]!!!!!!!!!!!!!!!&LKS7D2=[XV59u_!!!!!!!!!!!!!!!#T5'N=a6+%U8+KZ!!!!!!!!!!
!!!!!":lCs6t1G'R%9tH!!!!!!!!!!!!!!!!X9#E.RmchL6S:)!!!!!!!!!!!!!!!!!!!#&LfqDD24OS
!!!!!!!!!!!!!!!!!!!!#TYTe@=XZ=!!!!!!!!!!!!!!!!!!!!#TYTe@=XZ=!!!!!!!!!!!!!!!!!!!!
#TYTe@=XZ=~>
<~()@Z+/2^.%='/U/>$>'3=]nm1=]nm1%1Na[+Y>WF;-$k)>$>'3=]nm1=]nm1"9\i5'd+kb85WMo>?P-4
=]nm1=]nm1!!!!!#nn1+5YbBb>?b96=]nm1=]nm1!!!!!"q;7c.Q1%&=BJ^0>$5!2=]nm1!!!!!!X9&H
+Y>QE;-$h(>$>*4=]nm1!!!!!!!39/(*P(f85WJn>?Y35=]nm1!!!!!!!!!!#SJ%'4%iUZ>?b96=]nm1
!!!!!!!!!!":Z%`.Q("'=B\j2>$5!2!!!!!!!!!!!XK2H+Y>QH;-$e&>$>*4!!!!!!!!!!!!39/(*P1m
85WJn>?P-3!!!!!!!!!!!!!!!#SS.-4%iRX>?b64!!!!!!!!!!!!!!!":Z"^-ok%)>$>'3!!!!!!!!!!
!!!!!!XK5K+YG`O;cd+)!!!!!!!!!!!!!!!!!3?2(*bFu8PrPm!!!!!!!!!!!!!!!!!!!!#o4R74A&UW
!!!!!!!!!!!!!!!!!!!!":l=q2+LSK!!!!!!!!!!!!!!!!!!!!":l=q2+LSK!!!!!!!!!!!!!!!!!!!!
":l=q2+LSK~>
<~!!!!!!!!NA&J>]h&eYik',)#m',)#m!!!!!!!!'2&.oKf&eYik',)#m',)#m!!!!!!!!!-%M09e',2&m
',)#m',)#m!!!!!!!!!+%h]Qh',(ul',)#m',)#m!!!!!!!!!!!!!NA&J>]h&ebol',)#m!!!!!!!!!!
!!!!0&.oNg&eYfj',)#m!!!!!!!!!!!!!!.%M03c'+tok',)#m!!!!!!!!!!!!!!*$kEp_',(ul',)#m
!!!!!!!!!!!!!!!!!!NB&eP`h&ebol!!!!!!!!!!!!!!!!!!!3&.oNf&eYfj!!!!!!!!!!!!!!!!!!!0
%M03c',2)o!!!!!!!!!!!!!!!!!!!,%1a$`',)&o!!!!!!!!!!!!!!!!!!!!!!3`G&ebrn!!!!!!!!!!
!!!!!!!!!!!!!!2&J>`k!!!!!!!!!!!!!!!!!!!!!!!!/%hTEf!!!!!!!!!!!!!!!!!!!!!!!!*$kO!`
!!!!!!!!!!!!!!!!!!!!!!!!($4[U[!!!!!!!!!!!!!!!!!!!!!!!!($4[U[!!!!!!!!!!!!!!!!!!!!
!!!!($4[U[~>
<~+!2RN.k1r-!!!!!!!!!!!!!!!!!!!!+sJ3]1bg*Q!!!!!!!!!!!!!!!!!!!!'bqH+0J+CI!!!!!!!!!!
!!!!!!!!!!!!!!-*[;U+!!!!!!!!!!!!!!!!!!!!!!!!))'U:J.4>W*!!!!!!!!!!!!!!!!!!!'&fVr@
1bg<W!!!!!!!!!!!!!!!!!!!#$5"!p0ejsS!!!!!!!!!!!!!!!!!!!!!!!!'*$cI'!!!!!!!!!!!!!!!
!!!!!!!!!'(a:.D,ps'#!!!!!!!!!!!!!!!!!!!%&fi,@0ek'V!!!!!!!!!!!!!!!!!!!#$5+0r0f19Y
!!!!!!!!!!!!!!!!!!!!!X&W3+"893!!!!!!!!!!!!!!!!!!!!!!!!#(Et(B+Wq*l!!!!!!!!!!!!!!!
!!!!!&02r>/h\XU!!!!!!!!!!!!!!!!!!!!$5+3t0Jk6^!!!!!!!!!!!!!!!!!!!!"9o,?+Y+fC!!!!!
!!!!!!!!!!!!!!!!!!!!(Esn)!!!!!!!!!!!!!!!!!!!!!!!!!(Esn)!!!!!!!!!!!!!!!!!!!!!!!!!
(Esn)!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
33.2999 353 mo
33.2999 353 li
33.2999 349 li
39 349 li
39 352.783 li
33.2999 352.783 li
33.2999 353 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 411 ]ct
[6.21739 0 0 4.52381 33.0217 57.7619 ]ct
snap_to_device
<<
/T 1
/W 26 
/H 19 
/M[26 0 0 -19 0 19 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~TqS0RTqS0RTqS0SU8+KYTq7^7G@!Ed0JK2oTqS0RTqS0RU8"EYUnXBCLNQrm-Q=!DTqS0RTqS0RU8"BW
Unji\Q%NjR67NNO#7$rrTqS0RTqS3TU8+N\V4ETe:H0X4!WW3#TqS0RTqS0SU8+KYTq@j;G?d3X)%-EE
!!&^dTqS0RU8"EYUnO<CM0<;q,o7$q!!!!!TqS0RTq\9VUnji[P_<mW6n/cS"9JQ'!!&^dTqS3TU8+N\
V4<B[82qk+!!!!!!!!!!U8"BVU8+KYU7e'?G?QsT)%$?D!!!!!!!&dgU8+KZUnO<DN-A\u,8h!p!!!!!
!!!!!USFTZUnslZPD!s_74JiU"9JQ'!!!!!!!&giUSO`_V439X:-0d7!!!!!!!!!!!!!!!USO]\US=BD
GZd!T)$g3B!!!!!!!!!!!!&agUS=<HOEk;',oR9s!!!!!!!!!!!!!!!Sti'PP_OBh7OeuX"p+c)!!!!!
!!!!!!!&F^UR?mS<'MfD!WW3#!!!!!!!!!!!!!!!QD:4@J71i"*=)WF!!!!!!!!!!!!!!!!!&=[UR$F=
6nfVe!!!!!!!!!!!!!!!!!!!!QD:4@J71i"*=)WF!!!!!!!!!!!!!!!!!!~>
<~=]nm1=]nm1=]nm1>$>*4=BAKs2(Ta`()C%U=]nm1=]nm1=]np3>?Y')8iJ=F'+GB[=]nm1=]nm1=]nm2
=^,*5;+N_q+;G.b"9_k1=]nm1=]nm1=^#$6>?=Qb.iB!,!!!!!=]nm1=]nm1=^#!3=BJU!2C]X[%0ce4
!!$/)=]nm1=^#!4>?P!(9/\@F'+>'H!!!!!=]nm1=]nm2>$G35;+Nbs+Vk=d!WW3#!!$/)=]nm1=^#$6
>ZOKZ-Q3U'!!!!!!!!!!=]nm1=^#!4>$+j%2(BLY%0QY2!!!!!!!$2*=^#!4>$+g&:,OUH&I\pH!!!!!
!!!!!>$+m1=^,*4;+No%+Vk=d!WW3#!!!!!!!$/(=BSj4>?+<X.iT--!!!!!!!!!!!!!!!=]nm1>$>$'
3@GaY%0QY2!!!!!!!!!!!!$/)=]ng);)g0O'+G3K!!!!!!!!!!!!!!!='Ad/;+X),,8LRi!WW3#!!!!!
!!!!!!!$#&>#e0W/fkc7!!!!!!!!!!!!!!!!!!!!;d*@'7l;S0%g2k4!!!!!!!!!!!!!!!!!#r$>#RpK
,o@-q!!!!!!!!!!!!!!!!!!!!;d*@'7l;S0%g2k4!!!!!!!!!!!!!!!!!!~>
<~',)#m',)#m',)#m&eYfi&eP]d!!!!!!!!ZG',)#m',)#m',(uk'+kff%fu_2!!!!!',)#m',)#m',)#l
'GD,n&.T*K!!!!!!!!ZG',)#m',)#m'+trl&ekrh$31&+!!!!!',)#m',)#m'+toj&eP]d!!!!!!!!!!
!!!ZG',)#m'+toj'+tlg%fcS0!!!!!!!!!!',)#m',)#l&eboj&.T-L!!!!!!!!!!!!!ZG',)#m'+trl
&ePW_#ljr*!!!!!!!!!!',)#m'+toj&J>]e!!!!!!!!!!!!!!!!!!WF'+toj&eYcf&c_n3!!!!!!!!!!
!!!!!',2,o'GD,l&.T3N!!!!!!!!!!!!!!!!!!]I'GM2o&ePW`$NL/,!!!!!!!!!!!!!!!'GM5q'+trj
!WW3#!!!!!!!!!!!!!!!!!!ZH'GD)k&HDe2!!!!!!!!!!!!!!!!!!!!&ebok&J#?O!!!!!!!!!!!!!!!
!!!!!!!!TD&ePZ`#ljr*!!!!!!!!!!!!!!!!!!!!&/#Te%LNF@!!!!!!!!!!!!!!!!!!!!!!!QC&eGN[
#64`(!!!!!!!!!!!!!!!!!!!!&/#Te%LNF@!!!!!!!!!!!!!!!!!!!!!!!~>
<~!!!!!!!!!!!!!!!!!!!!!!!!-.Ouee+!1I_!!!!!!!!!!!!!!!!!!!!!$F!Q.j?/]!!!!!!!!!!!!!!!
!!!!!!!!!A/MJ:^'bp]K!!!!!!!!!!!!!!!!!!!!!u`C*$ig8-!!!!!!!!!!!!!!!!!!!.-n-8`+rLXd
!!!!!!!!!!!!!!!!!!!!!$j9U-QsEA"onW'!!!!!!!!!!!!!!!!!!!D0ejab&IJR>!!!!!!!!!!!!!!!
!!!!!!#m1("onW'!!!!!!!!!!!!!!!!!!!,-RB`V+rCLa!!!!!!!!!!!!!!!!!!!!!%9QV,U"0@"98E%
!!!!!!!!!!!!!!!!!!!I1bg!f&de[?!!!!!!!!!!!!!!!!!!!!!$<X3#Qt83!!!!!!!!!!!!!!!!!!!+
+<_XJ+r::\!!!!!!!!!!!!!!!!!!!!"">lU,9e->!!!!!!!!!!!!!!!!!!!!!!!-O1b]sg&deU=!!!!!
!!!!!!!!!!!!!!!#:(fC$j[%?!!!!!!!!!!!!!!!!!!!!!!!3E+r:4Z!!!!!!!!!!!!!!!!!!!!!!!!!
"s+s)!!!!!!!!!!!!!!!!!!!!!!!!!!!!3E+r:4Z!!!!!!!!!!!!!!!!!!~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
39 353 mo
34 353 li
33.2999 353 li
33.2999 352.783 li
39 352.783 li
39 353 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 411 ]ct
[6.21739 0 0 .714286 33.0217 57.7619 ]ct
snap_to_device
<<
/T 1
/W 26 
/H 3 
/M[26 0 0 -3 0 3 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~QD:4@J71i"*=)WF!!!!!!!!!!!!!!!!!&=[UR$F=6nfVe!!!!!!!!!!!!!!!!!!!!QD:4@J71i"*=)WF
!!!!!!!!!!!!!!!!!!~>
<~;d*@'7l;S0%g2k4!!!!!!!!!!!!!!!!!#r$>#RpK,o@-q!!!!!!!!!!!!!!!!!!!!;d*@'7l;S0%g2k4
!!!!!!!!!!!!!!!!!!~>
<~&/#Te%LNF@!!!!!!!!!!!!!!!!!!!!!!!QC&eGN[#64`(!!!!!!!!!!!!!!!!!!!!&/#Te%LNF@!!!!!
!!!!!!!!!!!!!!!!!!~>
<~$N^A;)_t31K7eGpH$O[\H$O[\H$O[\H$Kc!!Xfr&:NM/@H$O[\H$O[\H$O[\H$O[\$N^A;)_t31K7eGp
H$O[\H$O[\H$O[\H$K~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
34 353 mo
33 353 li
33.2999 353 li
34 353 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 411 ]ct
[1.43478 0 0 .714286 32.7826 57.5238 ]ct
snap_to_device
<<
/T 1
/W 6 
/H 3 
/M[6 0 0 -3 0 3 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~J<lt*Q@OLOUSF-*J<lt*Q@J~>
<~7oNSp;b'>V>$=ip7oNSp;b$~>
<~%M06c&.T0]&eY`c%M06c&.S~>
<~)[c]K$QC#m!Wi`K)[c]K$QB~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
33.2999 349 mo
28.0001 349 li
28.0001 343 li
33.2999 343 li
33.2999 349 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 411 ]ct
[5.73913 0 0 6.42857 27.7609 61.8095 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 24 
/H 27 
/M[24 0 0 -27 0 27 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 24 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 24 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 24 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 24 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
rX9&G,W81rCOM8:rh0UlStD^OU8+N\rWWZ9&fDiI4%)kI=T2J&=8lA(>?q")":>PI%hnpT"VVL\&/,`S
&d&pk*>S>L!t5eR"8r6!(DIuL94N'nMjC'1U7n<PT:r$SUSOac$j."X+uBBd78-YX=oMM%=ohi4qZ$a+
%1Wm\rXoDK'+tlg',16U!u;js$hs]($ka*Rr;cg@'J)^_I#jMZSYDgOU7n-MTqe?WUo"&$#SSC>78Hf\
='5E(r`B)&!F&h-!!<<2&.ngQrY#JL'+tlg',1?XrX8l>%gW42!!<WB&-Mk2r[8I::Mbl\TV8*STqJ$L
SXuONUSO`_rY5VW.m$C,=]kZ+"^"l.<``?$=ohi4rWNE/#n.@WrY#,B!YGtSrY,;Eo`,6u!sAf?(DHuP
rW)pG'JiO$M4gN8U8"9OSXl@FU8=W\Uo"&*#okHW93GD"=]nl*<sD]*>Zt<8>Q+d/"pk\L&cNFC'E/UI
&.T*_')iR;!!`Z6%1jF!)?]p<r[8%.:Mbl\TV8*SrgjCfTV8*WV50o`rY5DQ#:hl/=]nj0=oDD)<`N%'
>5hb*"U##9$kO$M&dT-`&ePZb$jm^I'D2>1#S.O])BBaur;cgF'JiO$M4gN8U7n0NT:qsRVP^2dUnmu)
#TP?V93GD"=]t`*#Zao(>$P<:=]t_-"9o/@&/"mS$kj6c&.]3X'GM/n'GU6@#6>5G'+PZj#Q+T$-PS=2
C5&+HSY)RHT:r$SUSOc`V50mc'a#F+4%fKQ!EWD&<X;l3>$>09>?P)-"Ut\E%1a$`&J>`i&.]Hgr=T/F
'GUKHr;[$&!WiK9'bUEFqZ-U8'I>k?DL[D#QCXV?U84QZUnso`USIet$P=@)4@Vq;;HHn!<;p)#>67r2
=Si()%1WmZ&.oE_$l&[R";;F_',:EW$POBs"p"o8%1aC!)#++1&.TO-5>u'4Js)^tU8"HYU].%kUSFOh
%L<=K'ce\\5"AFM<E)h"qH<l%qZ$p*$OdIS&.K!S'`&FB'E/UP(`j_2!t5eU'-&&3p]19t$k!q&3(RJ'
OJ/ACVksBgs.fRfrW<K3%29[-2*t&=<)NTur`];(q>^L$#mh"M%Li^W',(uW')iRD%1<gh)\`Gf(DRGs
)@6!9%fm"P+>-N4NhN2CV5C)bU]."fU&=s$"UY_W.m?U.=^#$7>?b;/=o&+%"UGGD&ek6W!YZ4[r"K&0
#6k_Q%0[Lb&cD_%!"]AJ*\UN7N1$<4Unsl_US=L^U&=rt!soGQ.5jRm='>N,s'#>'p](<q#lPD9'E8^C
'E.t:#8\U3.m,g7n,Nb#'dGVAHAn;bUAgqkUS=KVU&Uhb!"/o:&f`G_5ZCff>$Lu0r)rao"T]2I&eYlW
')WFB!!`fM-ndPJ4>$%&%La:,6"Y_9T;/0WUSFQXr1X&h#mLkS*\TWP=B\l+>5MJ#!;lfs%f-h8'E.t:
$6CZL/N>O#nGipu&LBD3G*&>mV50mcUALY_!"'#G)(IpK='Ss6>527s!!`iA&JGcj',('RrW!34+!hp5
$OHq9o`4sr$P4dR=)3GRTr"Q\U]."bU&G0&#SeC.3_3.O>?b66pf[Fn#7M(R&ebom')3.>'aGj8/g(3"
"p=JtrYl1l7:11lP+85AUndp`s.T@arXB,H+Y>WF:fU\'r`])"qZ$d$%hK<b'E/X>'E00\.l8t'!<WE*
oDnkE#!H::OID`5rhKIeq4[d'#9><P9iY1q=oMV!=oSL#!!3ZC&c<:9'E0'V,qLMS!<*#k!<,4g;KRqk
Unjc\rM'(\rZD=m5#,3ar`\qsrWEH0%2'?f'+trM'E/FB%LNC=!:g-h7L)t=OeASJUndp`pS%R4#;8A=
=Bo'6>4bts#R:\H&/#Th&eagMklC]P#?H)3TVeQ]U]."fU%tD],mQ(h:KUk+>$CQ$rWi`9%M06c'+trM
'BoMr7L)t=OeASJUndp`pS%R4#;8A==Bo'6>4l"u=oJ[3$4[U[&ebljoFpHhr^I,nG`eYrV50mcUA(A\
,mQ(h:KUk+>$CQ$rWi`9%M06c'+trM'Dhdu!<,4c;KRqkrhKOhrM'(\rZD=m5#,3ar`\qsrWEH0%2'?f
'+trM'E/FB%LNC.!<+YV4^N>oR\$5PU]7(`U&Gf4*@s'B<EE:*r`]&!qZ$[.&J=pRpCmNJ"!oHI%.F8r
)[n)_?Zh-fS>)gTUS=LYU&GK.'-Sqd8l8Vm>?Y5-=oDM#!!`Q9&.oKf&eapPrZVFp1bg-B!.Y~>

%%EndBinary
grestore
np
39 349 mo
33.2999 349 li
33.2999 343 li
39 343 li
39 349 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 411 ]ct
[6.21739 0 0 6.42857 33.0217 61.8095 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 26 
/H 27 
/M[26 0 0 -27 0 27 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 26 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 26 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 26 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 26 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
$DaMpUnaZZTq@pNrh0UjO*teH82__,rX8m5>[1M4>5hV&=UA25:II9!+W1n"rW`95"VVO\&J>cV&d/jY
%L`^:!!<<7&e+O8!u2gt(]G$_Unso`US=NWT:M^MU7n9HMgohY9/Rjk(B[lH>[.22r`B###?+;b5;jZ&
&,m"8&dB!_&.oNg'E/UI&J#?\$hXK%!tZ(Rp](C&*ZPsp&f.:>V50l\US4<NTq\6SU7I[9O*kD,/H-gq
>?kE;r`];&rE0;+=&`'n705=k'E/O?&d/j]&.oQQ'E/RG&.f3OpAb9t&/#EH!!<6-&.eaKrM:.&USOTT
SXuIHTq\9TTV.-X:G_tu"']#8>Q.e0<``='=BPQ*#$>#2904XDrY>AErY#>D&/"gRrt5JJ&J,?W#6"f'
!!`W@(D-iS!s/&p(8Re'Unjc^U7e*KSXuIJU7n6QM/5sDr[@_L"Bnu6<EB'"$!:>5=BSd"4"D<M(&S^J
&ek`a&H3=B'E/UI&J,?W#6"f'!!`TE*Z>S!#mKu%$DaMpUnjiaU7n6PrgjCiU7n6QM/5sDr[@\K"Bo)/
<EB'"#[(;4=]nBZ.ieO'q\'5L$4ICU&J>]irXo>G&.AjLrWW0!#6Ghb)A<_o#k\2rU^!ZlVP^,^TaRKb
StVmPTV.-X:G_turE0>/>[1H3<*'!"#[(;4=]nBZ.ieO'r=fSP&el#f%1a!^&ek6W";)1R#mUA4q>^a*
'b_&j&e"g7!#DB*USO`_VPKu]US4<OTV%dFRY>KO1B&X+=]ed/>?kE:!a8`1r`0&%=8l5&8inOCrY>AG
!#,;D%20Ed&/#Wh&J>Zd%1<F?"nhp#&JYi[!WiE$!;ursUCsB!V50l]UnXNRSX,7iIr81I-2nke>$+m1
=oMY)=pn;0<``0n8k(oh*"i/Z";;I`',:H[rXoMO$k<d[&.]9]%Ia?*(`jV,%13:?"reEnrX]4-U8"EX
rhL%!USOWYT:V3tEar$4.iA6s!a8`0qH=;3;,gOr:e*]--lj$2rWiQ<',13T#o!^S%1j!Y$k!46!;HO%
)BKk3'+t]U&fr)2rY#.'s.fRh%&KksTqRQn@7W@-)%6EJr)s#&rEBV+<)ua\2('7U%0c_5r"K&B$5!pb
&d]!W%L`XLmf3e&)A`o!(D-fb)]TM#%0-k9U&LbsUSO``V50iZNcS&M+;G4arW)dt%U*(@>[(B7=A(h.
)%HuWr;c[-!YQ.[rXoAJ&e#*Q"mZ-n&K)Ag%209WrW)ki&>GnoUnji_U7[j4F&ak7&dS@8qH<i%r`]\3
=&VOG.2EC""8r5r'E8^F'E&OE#Qa/i#9Prg.jcJW#Q=`#T`Us_U].%qU7[m6H<`?Q'aXa<qH<f$#[:J8
=&_FF/0"^'$3^;-q@ii@"VVL]&J5'-!!b#:6oZhJ*!uTEqOnCnU8+KZUSFHLJnID$)[uZFq-!Z"$!CG6
:cpBP((LQI!;R<)&c`F*!!a2o3@ug4*X_lHq4[e^$_sMoV4Wim:H0X4!r`2n=UJ>:>?k6+5q<fd$2jkt
'*f-`'+trj%gq\(#ljr.#n%"Z,p*Qp!;W>fU'm`lUnscMK54OS.M2Rap/qc,=^,*5;Fihr*Yet["SNK6
&ekum&eGN]lMq.l"pP,O/heFI(&4I&U(!cjUSO]ZS<AVL?UZ@A)tmG6=pS>9<DZ:H/Kkf,%JCJ7&d8p\
&J,HSli77l!s8QH0f1E[,57f1UAgnlTUhO5G@!H30`"rM=oMS0=]e[(9f4FArYG/?r"9&C&J+4.rW*-%
$n<eSrZCj-rLsOlUSO]XNc\1u5k8(W=p/&3:-L-++T2uI'*f-_'+tul%L)h7m/R1k$4d%EoqDAZ#G\)k
VP'&r<rPSZ=U/,6>?k9+5qi3`ne26@&eblj&.T'H#QOkg!;3&bU'IHhV5BoJGZOf5nlZ3$>$G66:I-Z5
-1V]S&eYij&eGN[rWq`grrD_crh9XmUnsr]Oa'q+7e0[e>$>-8=AM49r[%+K#8.X_&eY`c$N:=o!;3&b
U'7<fV5BoJ!I.ZE7e0[e>$>-8=AM49r[%+K#8.X_&eY`c$N:=o!;<,bU&^tfU][6LFAi*'nlbrq"C"u'
4t6IRne26@&ebll&e5*E"RQ0j"UYb=%JHLqUAgnlTq7^7G@!H30_JTJ=pJ24=&hsP/04^*ob7<;";2=Z
&J+(*!t6Y0-2o"\Ta[ZiUSO][S<J_N?UZ@A)td>@>$>-6<`)IJ/Kkf,%J:A>&eYii&J,HSmf<1a"!B<T
/,g`C~>

%%EndBinary
grestore
np
0 0 0 1 cmyk
%ADOBeginSubsetFont: KVXQMX+Calibri Initial
ct_T42Dict begin
-0.5 -0.305 1.238 0.961
 256 array 0 1 255 {1 index exch /.notdef put} for  /KVXQMX+Calibri
Type42DictBegin
[<00010000000b000b000b000b6376742000000000000000bc0000051c6670
676d00000000000005d80000091a676c796600000000000033ec00000d22
686561640000000000000ef400000036686865610000000000000f2c0000
0024686d74780000000000000f50000000306c6f63610000000000000f80
0000001a6d6178700000000000000f9c000000206e616d65000000000000
0fbc00000020707265700000000000000fdc000024106764697200000000
00000000000000000000079e0000fe930000000000000000000000000050
006a0073008000800086008d009300bf00db006200830093009900a000a6
00a900b000c100c900d70000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000fe79056d
000c03b7000600130000fffaffedfea6ffedfeb8050e000600130000fffa
ffedfe93050e00130420000600130000fffaffedff10ffee050e00130420
000600130000fffaffeefe93ff10feb80612000a050e0006000d02d2fffa
fff301fdfffa023f0006000dff36fffafff302870006000f0000fffafff1
079efeaffea700000000000000000000000000500051005a005b005c005d
006000610062006400680069006a006b006c006d006e00680069006e0060
0067006e00660068005f00610063006400660068006a006b006c006d006e
006f0070006f00720074007500760076007000720073007400750076006f
007000710072007300750077007700780079007a007b007c007d007b007c
007d00770079007a007c0078007a007c007d0078007d007e007f00800081
0082007e007f00810082007e007f00800081008200830084008500860087
008800890083008400850086008700880089008300840085008600870088
008900890086008700880089008a008b008c008d008e008f008a008b008c
008d008e008f008a008b008c008d008e008f008d008a008b008c008d008e
008f0090009000910092009300940095009600980099009b009c00900091
00920093009400950096009700980099009a009e009f00a6009000910095
0098009f009000910096009700bc00c600b500ae00af00b6006800690063
006a006f00700071006f0070007100720066006c006d00700079007c007f
00830086008700880089008a0074007500760077007a007b007c007d007e
008200850086008a0088008900830078007b008200830086008700880089
00760079007a007c007d007e0083008500880089008a0073007400750077
007a007d00880089008a008b008c008d008e00900094008b008c008d0091
0092009300940095008c008d00910095008f009000910092009300940095
008b008c008d008e008f009000910092009300940095008b008c008d008e
008f00900091009200930096009700980099009c0096009700980099009a
009b009c00960099009a009c0096009700980099009a009b009c00970098
0099009a009b009c009700980099009a009b009c0096009d00a000a1009d
009e009f00a000a100a2009d009f00a000a1009f00a2009d009e009f00a0
00a100a2009d009e00a000a1009d009e00a000a2009d00a300a400a500a6
00a700a300a400a600a700a300a400a500a600a700a600a300a700a800a9
00aa00ab00ac00ac00a800a900aa00ab00ac00a800a900aa00ab00ac00a8
00aa00ab00ac00ae00ad00ae00af00b000b100b200b300b400b500b600b7
00b800ad00ae00ad00ae00af00b000b100b200b300b400b500b600b700b8
00ad00ae00af00b000b100b200b300b400b500b600b700b800b300ae00af
00b000b200b500b600b700b800b900ba00bb00bc00be00c000c100c200c2
00b900ba00bb00bc00bd00be00bf00c000c100c200c400ba00bb00be00bf
00c000c200c300c400b900ba00bf00c000c200c600c700c900ca00cb00cc
00cf00c500c700ce00c500c700c800cf00d000d200d300d7010d00d000d1
00e900d000fd00d005e4000e0041000005ba009c009c005e005e4047645f
5e5d5c5b5a59585554535251504f4e4d4c4b4a494847464544434241403f
3e3d3c3b3a39383736352f2e2d2c2826252423221f181411100f0d0b0a09
0807060504030201002c4523466020b02660b004262348482d2c45234623
6120b02661b004262348482d2c45234660b0206120b04660b00426234848
2d2c4523462361b0206020b02661b02061b004262348482d2c45234660b0
406120b06660b004262348482d2c4523462361b0406020b02661b04061b0
04262348482d2c0110203c003c2d2c20452320b0cd442320b8015a515823
20b08d44235920b0ed51582320b04d44235920b0042651582320b00d4423
5921212d2c20204518684420b001602045b04676688a4560442d2c01b10b
0a432343650a2d2c00b10a0b4323430b2d2c00b0282370b101283e01b028
2370b10228453ab10200080d2d2c2045b00325456164b050515845441b21
21592d2c2045b0004360442d2c01b00643b00743650a2d2c2069b04061b0
008b20b12cc08a8cb8100062602b0c642364615c58b00361592d2c8a0345
8a8a87b0112bb0292344b0297ae4182d2c4565b02c234445b02b23442d2c
4b525845441b2121592d2c01b005251023208af500b0016023edec2d2c01
b005251023208af500b0016123edec2d2c01b0062510f500edec2d2c20b0
01600110203c003c2d2c20b001610110203c003c2d2c00b00743b006430b
2d2c21210c6423648bb84000622d2c21b08051580c6423648bb82000621b
b200402f2b59b002602d2c21b0c051580c6423648bb81555621bb200802f
2b59b002602d2c0c6423648bb84000626023212d2c452345602345602345
6023766818b08062202d2cb00426b00426b00425b0042545234520b00326
6062636820b0032661658a2344442d2c2045b0005458b040442045b04061
441b2121592d2c45b1302f4523456160b0016069442d2c4b5158b02f2370
b01423421b2121592d2c4b515820b0032545695358441b2121591b212159
2d2c45b01443b0006063b0016069442d2cb02f45442d2c452320458a6044
2d2c45234560442d2c4b235158b90033ffe0b134201bb333003400594444
2d2cb0164358b00326458a586466b01f601b64b020606620581b21b04059
b001615923586559b02923442310b029e01b2121212121592d2cb0164358
b004254564b020606620581b21b04059b0016123586559b0292344b00425
b00725082058021b0359b0052510b004252046b0042523423cb0072510b0
06252046b00425b0016023423c2058011b0059b0052510b00425b029e0b0
072510b00625b029e0b00425b00725082058021b0359b00425b003254348
b00625b00325b0016043481b2159212121212121212d2cb0164358b00425
4564b020606620581b21b04059b0016123581b6559b0292344b00525b008
25082058021b0359b0042510b005252046b0042523423cb00425b0072508
b0072510b006252046b00425b0016023423c2058011b0059b0042510b005
25b029e0b02920456544b0072510b00625b029e0b00525b0082508205802
1b0359b00525b003254348b00425b0072508b00625b00325b0016043481b
2159212121212121212d2c02b00425202046b004252342b0052508b00325
4548212121212d2c02b0032520b0042508b0022543482121212d2c452320
451820b00050205823652359236820b040505821b04059235865598a6044
2d2c4b53234b515a5820458a60441b2121592d2c4b545820458a60441b21
21592d2c4b53234b515a58381b2121592d2cb000214b5458381b2121592d
2cb002435458b0462b1b21212121592d2cb002435458b0472b1b21212159
2d2cb002435458b0482b1b21212121592d2cb002435458b0492b1b212121
592d2c208a08234b538a4b515a5823381b2121592d2c0020b200400325b0
062649618b3812342d2c014623466023466123201020468a61b8ff80628a
b140408a704560683a2d2c208a2349648a2353583c1b21592d2c4b52587d
1b7a592d2cb012004b014b54422d2cb1020042b123018851b1400188535a
58b910000020885458b202010243604259b12401885158b9200000408854
58b2020202436042b12401885458b2022002436042004b014b5258b20208
02436042591bb940000080885458b202040243604259b94000008063b801
00885458b202080243604259b94000010063b80200885458b20210024360
4259b94000020063b80400885458b202400243604259595959592d2c4518
68234b51582320452064b04050587c59688a6059442d2cb00016b00225b0
022501b001233e00b002233eb10102060cb00a236542b00b234201b00123
3f00b002233fb10102060cb006236542b0072342b00116012d2c20b82000
628a6023622d2cb0072558001b0159b0042510b00325b0022520b8ffff54
5821cd1bed5921b006255cb006255a58b0092b5920b005254ab0042547b0
04254760b0062547b0806361b00225b0005558b00325b00725496359b008
2558001b0159b00425b0062549b009255cb009255a58b0092b59b0072546
b0806361b0032520b0005558631b2159612320b0005558b080631b21b080
59b0592bb006255c586959b00425202010b00048233ab0062658001b0159
b0052658b003252f598a12233221212d2cb00625b00a2587b00625b00925
4ab0005358b00625b00a251bb00925b0072559b00225b00225070cb00525
6323b00625636020b94000040063535821b00426b00426b00a1bb9400004
0063655158b0042665b0042665b00a1bb00426b00426b000b00325b00325
0b0d0ab0092eb00725b007250b0d0ab00b2eb00525b0052507595920b000
5558b00525b0052587b00725b007250bb0092510b00b25b0092620b8ffff
545821cd1bed59b00525b0052507b00825b00b254923b00625b0062587b0
0a2510b00b25c15920b00051b800522378b00161b00225b00725b0072507
b00a25b00d254961b08062b00525b005250bb00a252338b00625b0062587
b00825b008250bb00a2510b00b25c4b00625b0062507b00925b00c2549b0
032554b8ffa723792121212121212121212121212d2c23b0005458b94000
00001bb900004000598ab0005458b9400000001bb90000400059b05b2b2d
2c08b0005458b9400000001bb900004000590db05b2b2d2c8a8a080d8ab0
005458b9400000001bb90000400059b05b2b2d2cb00426b00426080db004
26b00426080db05b2b2d2c204569442d00000001000000059eb88df7cb11
5f0f3cf50019080000000000bbeb7ccc00000000c787a88bfbfafd8b09ec
07b600000009000200000000000000010000079efdda00000aa0fbfafaa0
09ec00010000000000000000000000000000000c040e000001cf00000273
0045040e006b040e0048040e00ae040e0072040e0067040e0030040e0065
040e006b040e0063000000a100a100c40172022502dc037c0470053505ea
05f20691000000010000000c0120001000c3000700020010002f00650000
11900182000400010000000100120001000000000006000e000051464355
4a462b43616c69627269b2090320b80284b40918014a20b80283b4091801
4a20b80282b40918014a20b80281b40918014a20b80280b40918014a20b8
027fb40918014a20b8027eb40918014a20b8027db40918014a20b8027cb4
0918014a20b8027bb40918014a20b8027ab40918014a20b80279b4091801
4a20b80278b40918014a20b80277b40918014a20b80276b40918014a20b8
0275b40918014a20b80274b40918014a20b80273b40918014a20b80271b4
0918014a20b80270b40918014a20b8026fb40918014a20b8026eb4091801
4a20b8026db40918014a20b8026cb40918014a20b8026bb40918014a20b8
026ab40918014a20b80269b40918014a20b80268b40918014a20b80267b4
0918014a20b80266b40918014a20b80265b40918014a20b80264b4091801
4a20b80263b40918014a20b80262b40918014a20b80261b40918014a20b8
0260b40918014a20b8025fb40918014a20b8025eb40918014a20b8025db4
0918014a20b8025cb40918014a20b8025bb40918014a20b8025ab4091801
4a20b80259b40918014a20b80258b40918014a20b80257b40918014a20b8
0256b40918014a20b80255b40918014a20b80254b40918014a20b80253b4
0918014a20b80252b40918014a20b80251b40918014a20b80250b4091801
4a20b8024fb40918014a20b8024eb40918014a20b8024db40918014a20b8
024cb40918014a20b8024bb40918014a20b8024ab40918014a20b80249b4
0918014a20b80248b40918014a20b80247b40918014a20b80246b4091801
4a20b80245b40918014a20b80244b40918014a20b80243b40918014a20b8
0242b40918014a20b80241b40918014a20b80240b40918014a20b8023fb4
0918014a20b8023eb40918014a20b8023db40918014a20b8023cb4091801
4a20b8023bb40918014a20b8023ab40918014a20b80239b40918014a20b8
0238b40918014a20b80237b40918014a20b80236b40918014a20b80235b4
0918014a20b80234b40918014a20b80233b40918014a20b80232b4091801
4a20b80231b40918014a20b80230b40918014a20b8022fb40918014a20b8
022eb40918014a20b8022db40918014a20b8022cb40918014a20b8022bb4
0918014a20b8022ab40918014a20b80229b40918014a20b80228b4091801
4a20b80227b40918014a20b80226b40918014a20b80225b40918014a20b8
0224b40918014a20b80223b40918014a20b80222b40918014a20b80221b4
0918014a20b80220b40918014a20b8021fb40918014a20b8021eb4091801
4a20b8021db40918014a20b8021cb40918014a20b8021bb40918014a20b8
021ab40918014a20b80219b40918014a20b80218b40918014a20b80217b4
0918014a20b80216b40918014a20b80215b40918014a20b80214b4091801
4a20b80213b40918014a20b80212b40918014a20b80211b40918014a20b8
0210b40918014a20b8020fb40918014a20b8020eb40918014a20b8020db4
0918014a20b8020cb40918014a20b8020bb40918014a20b8020ab4091801
4a20b80209b40918014a20b80208b40918014a20b80207b40918014a20b8
0206b40918014a20b80205b40918014a20b80204b40918014a20b80203b4
0918014a20b80202b40918014a20b80201b40918014a20b80200b4091801
4a20b801ffb40918014a20b801feb40918014a20b801fdb40918014a20b8
01fcb40918014a20b801fbb40918014a20b801fab40918014a20b801f9b4
0918014a20b801f8b40918014a20b801f7b40918014a20b801f6b4091801
4a20b801f5b40918014a20b801f4b40918014a20b801f3b40918014a20b8
01f2b40918014a20b801f1b40918014a20b801f0b40918014a20b801efb4
0918014a20b801eeb40918014a20b801edb40918014a20b801ecb4091801
4a20b801ebb40918014a20b801eab40918014a20b801e9b40918014a20b8
01e8b40918014a20b801e7b40918014a20b801e6b40918014a20b801e5b4
0918014a20b801e4b40918014a20b801e3b40918014a20b801e2b4091801
4a20b801e1b40918014a20b801e0b40918014a20b801dfb40918014a20b8
01deb40918014a20b801ddb40918014a20b801dcb40918014a20b801dbb4
0918014a20b801dab40918014a20b801d9b40918014a20b801d8b4091801
4a20b801d7b40918014a20b801d6b40918014a20b801d5b40918014a20b8
01d4b40918014a20b801d3b40918014a20b801d2b40918014a20b801d1b4
0918014a20b801d0b40918014a20b801cfb40918014a20b801ceb4091801
4a20b801cdb40918014a20b801ccb40918014a20b801cbb40918014a20b8
01cab40918014a20b801c9b40918014a20b801c8b40918014a20b801c7b4
0918014a20b801c6b40918014a20b801c5b40918014a20b801c4b4091801
4a20b801c3b40918014a20b801c2b40918014a20b801c1b40918014a20b8
01c0b40918014a20b801bfb40918014a20b801beb40918014a20b801bdb4
0918014a20b801bcb40918014a20b801bbb40918014a20b801bab4091801
4a20b801b9b40918014a20b801b8b40918014a20b801b7b40918014a20b8
01b6b40918014a20b801b5b40918014a20b801b4b40918014a20b801b3b4
0918014a20b801b2b40918014a20b801b1b40918014a20b801b0b4091801
4a20b801afb40918014a20b801aeb40918014a20b801adb40918014a20b8
01acb40918014a20b801abb40918014a20b801aab40918014a20b801a9b4
0918014a20b801a8b40918014a20b801a7b40918014a20b801a6b4091801
4a20b801a5b40918014a20b801a4b40918014a20b801a3b40918014a20b8
01a2b40918014a20b801a1b40918014a20b801a0b40918014a20b8019fb4
0918014a20b8019eb40918014a20b8019db40918014a20b8019cb4091801
4a20b8019bb40918014a20b8019ab40918014a20b80199b40918014a20b8
0198b40918014a20b80197b40918014a20b80196b40918014a20b80195b4
0918014a20b80194b40918014a20b80193b40918014a20b80192b4091801
4a20b80191b40918014a20b80190b40918014a20b8018fb40918014a20b8
018eb40918014a20b8018db40918014a20b8018cb40918014a20b8018bb4
0918014a20b8018ab40918014a20b80189b40918014a20b80188b4091801
4a20b80187b40918014a20b80186b40918014a20b80185b40918014a20b8
0184b40918014a20b80183b40918014a20b80182b40918014a20b80181b4
0918014a20b80180b40918014a20b8017fb40918014a20b8017eb4091801
4a20b8017db40918014a20b8017cb40918014a20b8017bb40918014a20b8
017ab40918014a20b80179b40918014a20b80178b40918014a20b80177b4
0918014a20b80176b40918014a20b80175b40918014a20b80174b4091801
4a20b80173b40918014a20b80172b40918014a20b80171b40918014a20b8
0170b40918014a20b8016fb40918014a20b8016eb40918014a20b8016db4
0918014a20b8016cb40918014a20b8016bb40918014a20b8016ab4091801
4a20b80169b40918014a20b80168b40918014a20b80167b40918014a20b8
0166b40918014a20b80165b40918014a20b80164b40918014a20b80163b4
0918014a20b80162b40918014a20b80161b40918014a20b80160b4091801
4a20b8015fb40918014a20b8015eb40918014a20b8015db40918014a20b8
015cb40918014a20b8015bb40918014a20b8015ab40918014a20b80159b4
0918014a20b80158b40918014a20b80157b40918014a20b80156b4091801
4a20b80155b40918014a20b80154b40918014a20b80153b40918014a20b8
0152b40918014a20b80150b40918014a20b8014fb40918014a20b8014eb4
0918014a20b8014cb40918014a20b8014bb40918014a20b8014ab4091801
4a20b80149b40918014a20b80148b40918014a20b80147b40918014a20b8
0146b40918014a20b80145b40918014a20b80144b40918014a20b80143b3
0918014ab80284b21e3e1fb80283b21e151fb80282b21e3e1fb80281b21e
3a1fb80280b21e3e1fb8027fb21e3e1fb8027eb21e0c1fb8027db21e3e1f
b8027cb21e3e1fb8027bb21e3e1fb8027ab21e3e1fb80279b21d411fb802
78b21d431fb80277b21d431fb80276b21d431fb80275b21d411fb80274b2
1d431fb80273b21d431fb80272b21d411fb80271b21d421fb80270b21d42
1fb8026fb21d421fb8026eb21d431fb8026db21d431fb8026cb21d431fb8
026bb21c451fb8026ab21c451fb80269b21c451fb80268b21c451fb80267
b21c451fb80266b21c441fb80265b21c451fb80264b21c451fb80263b21c
451fb80262b21c451fb80261b21c451fb80260b21c451fb8025fb21c451f
b8025eb21c441fb8025db21c451fb8025cb21c451fb8025bb21c451fb802
5ab21c451fb80259b21c451fb80258b21c451fb80257b21c451fb80256b2
1c451fb80255b21c451fb80254b21c451fb80253b21c451fb80252b21c45
1fb80251b21c451fb80250b21c451fb8024fb21c451fb8024eb21c451fb8
024db21c451fb8024cb21c451fb8024bb21c451fb8024ab21b491fb80249
b21b491fb80248b21b4a1fb80247b21b4a1fb80246b21b4b1fb80245b21b
4c1fb80244b21b4c1fb80243b21b4c1fb80242b21b4b1fb80241b21b491f
b80240b21b491fb8023fb21b4a1fb8023eb21b4a1fb8023db21b4a1fb802
3cb21b4b1fb8023bb21b4b1fb8023ab21b4c1fb80239b21b4c1fb80238b2
1b4c1fb80237b21b4c1fb80236b21b4c1fb80235b21b491fb80234b21b49
1fb80233b21b4a1fb80232b21b4a1fb80231b21b4a1fb80230b21b4b1fb8
022fb21b4b1fb8022eb21b4c1fb8022db21b4c1fb8022cb21b4c1fb8022b
b21b4c1fb8022ab21b4c1fb80229b21b4c1fb80228b21b4c1fb80227b21b
491fb80226b21b491fb80225b21b4a1fb80224b21b4a1fb80223b21b4a1f
b80222b21b4b1fb80221b21b4b1fb80220b21b4c1fb8021fb21b4c1fb802
1eb21b4c1fb8021db21b4c1fb8021cb21b4c1fb8021bb21b4c1fb8021ab2
1a4e1fb80219b21a4e1fb80218b21a4f1fb80217b21a4f1fb80216b21a4e
1fb80215b21a4e1fb80214b21a4f1fb80213b21a4f1fb80212b21a4f1fb8
0211b21a4e1fb80210b21a4e1fb8020fb21a4f1fb8020eb21a4f1fb8020d
b21a4f1fb8020cb21a4e1fb8020bb21a4e1fb8020ab21a4e1fb80209b21a
4f1fb80208b21a4f1fb80207b21a4f1fb80206b219501fb80205b219511f
b80204b219511fb80203b219501fb80202b219511fb80201b219511fb802
00b219511fb801ffb219511fb801feb219501fb801fdb219511fb801fcb2
19511fb801fbb219511fb801fab219501fb801f9b219511fb801f8b21951
1fb801f7b219511fb801f6b219511fb801f5b218541fb801f4b218531fb8
01f3b218541fb801f2b218541fb801f1b218541fb801f0b218531fb801ef
b218541fb801eeb218541fb801edb218541fb801ecb218531fb801ebb218
531fb801eab218541fb801e9b218541fb801e8b218541fb801e7b218541f
b801e6b218531fb801e5b218541fb801e4b218531fb801e3b218541fb801
e2b218541fb801e1b218541fb801e0b218531fb801dfb218531fb801deb2
18541fb801ddb218541fb801dcb218541fb801dbb218541fb801dab21853
1fb801d9b218541fb801d8b218541fb801d7b217571fb801d6b217561fb8
01d5b217561fb801d4b217571fb801d3b217571fb801d2b217571fb801d1
b217571fb801d0b217561fb801cfb217561fb801ceb217571fb801cdb217
571fb801ccb217571fb801cbb217571fb801cab217561fb801c9b217561f
b801c8b217571fb801c7b217571fb801c6b217571fb801c5b217571fb801
c4b217571fb801c3b217561fb801c2b217571fb801c1b217571fb801c0b2
17571fb801bfb217561fb801beb217561fb801bdb217571fb801bcb21757
1fb801bbb217571fb801bab217571fb801b9b217571fb801b8b217561fb8
01b7b217571fb801b6b217571fb801b5b217571fb801b4b217571fb801b3
b2163f1fb801b2b2165b1fb801b1b2165b1fb801b0b2165b1fb801afb216
5b1fb801aeb2165b1fb801adb2165b1fb801acb2165b1fb801abb2165b1f
b801aab2163e1fb801a9b2163f1fb801a8b2163f1fb801a7b2165b1fb801
a6b2165b1fb801a5b2165b1fb801a4b2165b1fb801a3b2165b1fb801a2b2
165b1fb801a1b2165b1fb801a0b2165b1fb8019fb2163e1fb8019eb2163f
1fb8019db2163f1fb8019cb2165b1fb8019bb2165b1fb8019ab2165b1fb8
0199b2165b1fb80198b2163e1fb80197b2165b1fb80196b2165b1fb80195
b2165b1fb80194b2163e1fb80193b2163f1fb80192b2163f1fb80191b216
5b1fb80190b2165b1fb8018fb2165b1fb8018eb2165b1fb8018db2165b1f
b8018cb2163f1fb8018bb2165b1fb8018ab2165b1fb80189b2165b1fb801
88b2165b1fb80187b2165b1fb80186b215611fb80185b215621fb80184b2
15621fb80183b215661fb80182b215661fb80181b215551fb80180b21545
1fb8017fb215361fb8017eb215361fb8017db215611fb8017cb215621fb8
017bb215621fb8017ab215641fb80179b215661fb80178b215661fb80177
b215661fb80176b215661fb80175b215661fb80174b215661fb80173b215
451fb80172b215621fb80171b215621fb80170b215631fb8016fb215641f
b8016eb215661fb8016db215661fb8016cb215661fb8016bb215661fb801
6ab215661fb80169b215621fb80168b215621fb80167b215611fb80166b2
15641fb80165b215641fb80164b215661fb80163b215661fb80162b21566
1fb80161b215661fb80160b215661fb8015fb215661fb8015eb215551fb8
015db215451fb8015cb215451fb8015bb215361fb8015ab215611fb80159
b215621fb80158b215621fb80157b215631fb80156b215641fb80155b215
661fb80154b215661fb80153b215661fb80152b215661fb80151b214401f
b80150b214551fb8014fb214561fb8014eb214831fb8014db2142d1fb801
4cb214401fb8014bb214401fb8014ab214411fb80149b214401fb80148b2
14401fb80147b214411fb80146b2147e1fb80145b214871fb80144b2147f
1fb80143b214801fb80142b212461fb80141b212461fb80140b212461fb8
013fb212461fb8013eb212441fb8013db212461fb8013cb211591fb8013b
b211591fb8013ab2115b1fb80139b2115b1fb80138b211471fb80137b211
581fb80136b2115a1fb80135b2115b1fb80134b2115b1fb80133b2112c1f
b80132b211471fb80131b211551fb80130b211571fb8012fb211571fb801
2eb211581fb8012db211591fb8012cb211591fb8012bb2115a1fb8012ab2
115a1fb80129b2115b1fb80128b2115b1fb80127b2115b1fb80126b2115b
1fb80125b211561fb80124b211561fb80123b211571fb80122b211581fb8
0121b211591fb80120b2115a1fb8011fb2115a1fb8011eb2115b1fb8011d
b2115b1fb8011cb2115b1fb8011bb2115b1fb8011ab2115b1fb80119b210
5d1fb80118b2105e1fb80117b2105f1fb80116b2105f1fb80115b2105f1f
b80114b2105f1fb80113b2105f1fb80112b2105d1fb80111b2105e1fb801
10b2105f1fb8010fb2105f1fb8010eb2105f1fb8010db2105f1fb8010cb2
105d1fb8010bb2105e1fb8010ab2105f1fb80109b2105f1fb80108b2105f
1fb80107b2105f1fb80106b2105d1fb80105b2105e1fb80104b2105f1fb8
0103b2105f1fb80102b2105f1fb80101b2105f1fb8010040ff0f621fff0f
621ffe0f631ffd0f641ffc0f621ffb0f621ffa0f621ff90f631ff80f641f
f70f641ff60f641ff50f641ff40f621ff30f621ff20f631ff10f641ff00f
641fef0f641fee0f641fed0f621fec0f621feb0f631fea0f641fe90f641f
e80f641fe70f641fe60e671fe50e681fe40e681fe30e681fe20e681fe10e
671fe00e681fdf0e681fde0e681fdd0e671fdc0e681fdb0e681fda0e681f
d90e681fd80d6b1fd70d311fd60d6b1fd50d6c1fd40d261fd30d261fd20d
6c1fd10d2b1fd00d2b1fcf0d2b1fce0d6b1fcd0d6c1fcc0d6d1fcb0d6b1f
ca0d6c1fc90d6d1fc80d6a1fc70d691fc60d681fc50d671fc40d261fc30d
311fc20d311fc10d311f40ffc00d311fbf0d311fbe0d311fbd0c711fbc0c
721fbb0c731fba0c741fb90c741fb80c741fb70c711fb60c711fb50c721f
b40c731fb30c741fb20c741fb10c741fb00c741faf0b791fae0b7a1fad0b
7c1fac0b7d1fab0b7e1faa0b7e1fa90b7e1fa80b7e1fa70b7e1fa60b7e1f
a50b2d1fa40b7e1fa30b7e1fa20b791fa10b7e1fa00b6b1f9f0b791f9e0b
7e1f9d0b7e1f9c0b791f9b0b7a1f9a0b7c1f990b7d1f980b7e1f970b7e1f
960b7e1f950b7e1f940b7e1f930b7e1f920b6b1f910b2d1f900a4e1f8f0a
4f1f8e0a671f8d0aa51f8c0aa71f8503251f8403381f8301381f82558055
81ab80557f557d557eab7d550b7d010b7d1b7d4b7d7b7dab7ddb7d401206
0a7c557a557bab7a557955775578ab7755ba028600660285403c5576ab75
5504751475747503f47501ab750144750130750102007510752075030c74
55725573ab7255007250728072b072043bb072e072020072010ab8ffc0b3
721b1e46b8ffc0407c720d104671556f5570ab6f556e666d556a03251f69
38675568ab67556638645565ab645563386255613860555f385d555eab5d
555c385a555bab5a55593858555703251f5638545555ab54555338515552
ab51554f384e554e03251f4d384b554cab4b554a38485549ab4855473846
554503381f001c101c201c0310b8ffc0404e1c1b1e46001b0142301b401b
e01bf01b04001bb01bc01b03120f1a1f1a02290f1901434f19016f197f19
8f19030f18cf18024018292c460f17cf17df17ef1704134017292e460016
101620160315b8ffc0b3164d5446b8ffc0b3163f4446b8ffc0b316313546
b8ffc0404d162326460f15010f151f1502451f15010011e011f0110315bf
10cf10020f0f010f0fff0f02400f3135460f0e1f0e020f0e1f0eff0e0340
0e3137460f0d1f0d020f0d1f0dff0d0316400d313746b8ffc040270c5054
460f0b1f0b02553f0b4f0b02400b3f4346400b2d30460003012001010001
100120010308b8ffc0b301151f46b80100b316010501b80190b154532b2b
4bb80800524bb008505bb00188b02553b00188b040515ab00688b000555a
5b58b101018e59b101024354b0144b515a58b101018e59858d8d00421d4b
b01d5358b0a01d594bb0805358b0401d594bb0ff5358b0001db116004259
2b5e7375732b2b745e732b2b5e73742b73742b7374745e7301755e73742b
2b2b2b5e732b5e732b7374755e735e735e73755e732b5e73002b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b5e73755e73
2b2b5e735f73737373742b2b2b2b2b2b5e73742b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b01
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2bb1000243545841ff
0284006402830064028200640281006402800064027f0064027e0064027d
0064027c0064027b0064027a006402790064027800640277006402760064
0275006402740064027300640271006402700064026f0064026e0064026d
0064026c0064026b0064026a006402690064026800640267006402660064
026500640264006402630064026200640261006402600064025f0064025e
0064025d0064025c0064025b0064025a0064025900640258006402570064
02560064025500640254006402530064025200640251006402500064024f
0064024e0064024d0064024c0064024b0064024a00640249006402480064
024700640246006402450064024400640243006402420064024100640240
0064023f0064023e0064023d0064023c0064023b0064023a006402390064
023800640237006402360064023500640234006402330064023200640231
006402300064022f0064022e0064022d0064022c0064022b0064022a0064
022900640228006402270064022600640225006402240064022300640222
00640221006402200064021f0064021e0064021d0064021c0064021b0064
021a00640219006402180064021700640216006402150064021400640213
0064021200640211006402100064020f0064020e0064020d0064020c0064
020b0064020a006402090064020800640207006402060064020500640204
41ff00640203006402020064020100640200006401ff006401fe006401fd
006401fc006401fb006401fa006401f9006401f8006401f7006401f60064
01f5006401f4006401f3006401f2006401f1006401f0006401ef006401ee
006401ed006401ec006401eb006401ea006401e9006401e8006401e70064
01e6006401e5006401e4006401e3006401e2006401e1006401e0006401df
006401de006401dd006401dc006401db006401da006401d9006401d80064
01d7006401d6006401d5006401d4006401d3006401d2006401d1006401d0
006401cf006401ce006401cd006401cc006401cb006401ca006401c90064
01c8006401c7006401c6006401c5006401c4006401c3006401c2006401c1
006401c0006401bf006401be006401bd006401bc006401bb006401ba0064
01b9006401b8006401b7006401b6006401b5006401b4006401b3006401b2
006401b1006401b0006401af006401ae006401ad006401ac006401ab0064
01aa006401a9006401a8006401a7006401a6006401a5006401a4006401a3
006401a2006401a1006401a00064019f0064019e0064019d0064019c0064
019b0064019a006401990064019800640197006401960064019500640194
006401930064019200640191006401900064018f0064018e0064018d0064
018c0064018b0064018a0064018900640188006401870064018600640185
006441800184006401830064018200640181006401800064017f0064017e
0064017d0064017c0064017b0064017a0064017900640178006401770064
01760064017500640174006401730064017200640171006401700064016f
0064016e0064016d0064016c0064016b0064016a00640169006401680064
016700640166006401650064016400640163006401620064016100640160
0064015f0064015e0064015d0064015c0064015b0064015a006401590064
015800640157006401560064015500640154006401530064015200640150
0064014f0064014e0064014c0064014b0064014a00640149006401480064
01470064014600640145006401440064014300642b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b18
5f5e00>
[3363 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 740 4 <00020048ffed03c705210013002b00ea4019281201291101260d01260c01
2608012507012a03012902012db8ffc040250f024d602d01141810014d14
100f014d14160d014d140a0c014d14200b014d14180c014d14bb022d0000
0020ffe8b310014d20b8fff0b30f014d20b8ffeab30d014d20b8fff6b30c
014d20b8ffe8b60c014d24200120b8022d40090a200030004000030ab8ff
f040090f014d2f0a4f0a0200b8ffd040090f014d0a100f024d00b8ffc040
0a0f024d000a000a2d2c1bb8010ab20f5325b8010ab10556003fed3fed11
120139392f2f2b2b2b5d2b5d10e15d2b2b2b2b2b10e12b2b2b2b2b2b3130
5d2b5d5d5d5d5d5d5d5d01140e0223222e0235343e0233321e0207342e04
23220e0215141e0233323e0403c72f6db0817aa7662b306cb0807ba7662b
b00e1b2b3c4d30556a3d161e41654838553d281809028a95f6b16157a9f7
a094f7b16157a9f7ac619a76553719508cbc6c91cb803a24435e7285>KVXQMX+Calibri AddT42Char 

1 0 1 <> KVXQMX+Calibri AddT42Char 
1 1098 5 <000100ae0000039f0517002e00e54024241e01241d01241c01231b01241a
01241901261801261701291201291101122010014d30b8ffc0400d0f024d
60300100200b014d0029b8ffe8b310014d29b8fff0b30f014d29b8fff0b3
0d014d29b8fff6b30c014d29b8fff8b30b014d29b80211400e1e18200b01
4d180b200b014d0b11b8ffe0b30f014d11b8ffd4b30f024d11b8ffc0b310
014d11b8ffe0b30f014d11b8ffc0b30c014d11b8fff040090b014da01101
111312b8013fb323522910b80107b10654003fed323ffdcd012f5d2b2b2b
2b2b2bcd2bc42b33f12b2b2b2b2bc52b31305d2b002b015d5d5d5d5d5d5d
5d5d5d25140e022321222e0235343e02332111070606262635343e023725
3e0333321e02151133321e02039f060a0d07fd5c070c0b0606090d08010e
fa13170e0503060b09012a040c12181218201206ea080e090544131a1007
07101a13121a110903d8950a040d1e171118100c06bf0304040104070b06
fb8f09111a00>KVXQMX+Calibri AddT42Char 
1 1464 6 <000100720000039c0521003e0094400d2936012b1e01291d01261e0140b8
ffc040170f024d604001161810014d16100c0d014c16200b014d16b8022d
b633253325330039b8ffe8b310014d39ba027f000bffc0b30c014d0bb8ff
e0400b0f014d0b1138392020391bb8012eb63316062e531039b80128b106
54003fed323f123939ed11392f123939012f2b2be12bcd39392f2f10e12b
2b2b31305d2b005d015d5d5d25140e022321222e0235343e0237133e0335
342e0223220e0223222e0235343e0633321e0215140e02070721321e0203
9c05090f09fd350e150f07030a0f0cfb576939121c3550343d6149310c07
0b0704020508183b596b3b5e8d5d2e1647866fcd0233080f0b054a121c13
0907101e16141e17170d010a5c9278622b2b4d3a2222282208121e150f16
100e15242318355c7a453e7b8faf72d609121b00>KVXQMX+Calibri AddT42Char 
1 1784 7 <00010067ffed0392052100580105b9005affc0401c0f024d605a01310810
014d31100f014d31100c0d014c31200b014d31b80235400a4e53264e4e18
13014d40b8ffe840260f014d26200f014d40264e4e2640030e1b0810014d
1b100f014d1b100c0d014c1b200b014d1bb8fff8b30b014d1bb8022db500
080b014d00b8ffe8b40f024d000eb8ffe0b30f014d0eb8fff0b30f014d0e
b8ffc040130c014d0e3b400f014d3b400c0d014c2f3b0111b8ffc0b30f01
4d11b8ffc0400a0c0d014c3b113b111636b8010b400a49532cf320200549
5316b8010bb10556003fed3f12392fed3910ed1139392f2f2b2b5d2b2b01
2f2b2b2bd42b2be12b2b2b2b2b1217392f2f2f2b2b2b11123910e12b2b2b
2b31305d2b01140e0223222e0635343633321e0233323e0235342e022323
222e0235343e023333323e0235342e0223220e0223222e0235343e063332
1e0215140e0207151e0303923e74aa6b4171583a0f0806030e0d0935536f
44426444222b53794d7b080f0b07060b0e0971426949271a3451353a614c
320a070b0703020608133a556f405a885b2d203e5a3b436f502d0172598f
6637151d1f0e0e141d15241c202520223e55323758402207101a1513190f
07224059372849361f232823050f1b160f17110e132423182e5475473d69
51390b020735506b>KVXQMX+Calibri AddT42Char 
1 2272 8 <00020030fffa03d30514002a002e00fb403a252e01262d01272c01242701
242601251c01261b01231a01241901251801251701261601261501261401
261001260f012405012404012b1b0130b8ffc040120f024d6030012d1618
0f024d162010014d16b8ffe0b30f014d16b8ffe0b70c014d161c2e2e10b8
fffc401d0f024d101810014d10100f014d10100d014d100a0c014d10100b
014d10bb021100270004ffd4b30f024d04b8ffd0b30c014d04b8ffe0400a
0b014d0404302f271b2eb8010b400a042b2110100a21520a55003f3f1239
2f123933ed3232111201392f2b2b2b33e12b2b2b2b2b2b321133cd2b2b2b
2b3231305d2b005d015d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d011406
232311140e0223222e02351121222e0235343e0237013e0333321e021511
3332160123012103d31412920814201918201307fdea0c100d0502060a07
01d205131e2c1e21311e10921115fea102fe5b01a701702126fef0080b08
0404080b08011006101e18131e19170d0312080c080305080d09fcc62302
e9fd3a00>KVXQMX+Calibri AddT42Char 
1 2666 9 <00010065ffed0396050e003e00c1400d27370127360126080126030140b8
ffc0b60f024d60400137b8ffe8b310014d37b8fff0b40b0d014c37ba0211
0028ffc0402810014d28400f014d280e4f326f327f3203321d1810014d1d
100f014d1d100c0d014c1d200b014d1dba02330000ffe8b30f024d00b8ff
c0b50f014d004013b8ffc0b70f10014c13131836b8012c400c2c3af42022
012222052c5118b8010bb10556003fed3f12392f5ded10ed11392f2b0110
d62b2be12b2b2b2bc45dd4d42b2be12b2b31305d2b005d5d015d5d01140e
0223222e0635343e0233321e0233323e0235342e02232206232226351134
363321321e02151406232111363633321e0203964680b16c3c6c54360f06
050203080b070a2a4769484370512e27517c563d58261c181f1d023d080f
0a051412fe1d2349306fa66f3901a068a26f3a1119180e0c111a12111b11
08191d1a2044674a3e5f3f1f0c1a25020f212009121c132428fe95050235
618a>KVXQMX+Calibri AddT42Char 
1 392 3 <0002006bffed03bd0520003400480099b9004affc040170f024d604a012b
753f01663f01433f01343f01243f013fb8024340140c1c1c0c7a35016a35
014b35013a35012b350135b80243b670000120000100b8ffe0b30f014d00
b8ffe8b70f024d00300c010cb8fffa400a0f024d0c3aff30300526b80100
b2135944b80115b1055f003fed3fed12392fed012f2b5dd42b2b5d5de15d
5d5d5d5d12392f10e15d5d5d5d5d3231305d2b01140e0223222e0435343e
0433321e0615140e0223222e0223220e02073e0333321e0207342e022322
0e0207141e0233323e0203bd346ca671517c5c3d2510122e4f77a66e254c
402c0e07040201070b090b26364d335d865529031a414d563169905926ae
17365a42254a453f1a213f5e3f405e3e1d01a3559f7949284a6c8aa45e53
aa9e8b673c090f120b0d0f130e121a10080e110e4c80a95c0f1e180f3965
89603a5f42240d171f1281ae692d30516500>KVXQMX+Calibri AddT42Char 
1 3028 10 <ffff006bffed03bd0520020600030000>KVXQMX+Calibri AddT42Char 
1 3044 11 <00010063fffa03af050e001f00d7b90011ffe8400a1121014c111010014d
11b8ffe8b30f014d11b8fff0b30d014d11b8ffe8b30c014d11b8fff8400a
0b014d74110126110110b8ffe8400a1121014c101010014d10b8ffe8b30f
014d10b8fff0b30d014d10b8ffe8400b0b0c014c75100126100106b8fff0
b30b014d21b8ffc0b60f024d60210100b8ffc0b310014d00b8ffd8b40b01
4d0015b8ffc0b30c014d15b8ffe8b30b014d15b8ffe8b30f014d15b8ffe0
b50f024d150511b8012db31a510b55003f3fed32012f2b2b2b2bcd2b2b31
305d2b2b5d5d2b2b2b2b2b5d5d2b2b2b2b2b2b01140e0207010e03232226
2636370121222635343e023321321e0203af03050906fe2e050f17241a22
2611020601eafd931313050a0e0902f20e150b0604c4121d1b190efbce0c
0f0903060d130d044a2824131c130906121c>KVXQMX+Calibri AddT42Char 
1 322 2 <0001004501b4022e023d000f000eb400070bed04002fed012fcd31300114
06232122263534363321321e02022e1211fe5e1212121201a2080d090501
f9271e1f26261e06111a>KVXQMX+Calibri AddT42Char 
1 0 0 <00050000fe7303d2050e000300070039004d004e005bbc000d0152001600
3a01b5b5154444082d07be0143000200200154000800010143400f04020d
b71a1a3f23b735068d031149b8012db43f078d0202003ffddefdce2ffdde
ed12392fed012fdde1dee110f1ce11392f33e1d4e1313001112111011121
1101140e020707140623222e02352726363333323e0235342623220e0223
222e02353436373e0333321e0203140e0223222e0235343e0233321e0201
03d2fc5a034ffd06027e233f5633051e1a0f140d0605021c18122d3c2510
535b253c2e1d0703070603050807283742224b6c4522da07111d15161d12
0808121d16151d1107fddb050efaf2050efb43046cfb9403063b5c3f2403
980a0802040606b81e18192a3b2149560f1310040b13101116080712110c
28445cfd86151c120808121c15151d120808121dfd4d>KVXQMX+Calibri AddT42Char 
KVXQMX+Calibri /CharStrings get begin
/g4 4 def
/g1 1 def
/g5 5 def
/g6 6 def
/g7 7 def
/g8 8 def
/g9 9 def
/g10 10 def
/g11 11 def
/g2 2 def
end
KVXQMX+Calibri /Encoding get
dup 33 /g4 put
dup 34 /g1 put
dup 35 /g5 put
dup 36 /g6 put
dup 37 /g7 put
dup 38 /g8 put
dup 39 /g9 put
dup 40 /g10 put
dup 41 /g11 put
dup 42 /g2 put
pop
end
%ADOEndSubsetFont
/VRWYPZ+Calibri /KVXQMX+Calibri findfont ct_VMDictPut/VRWYPZ+Calibri*1 [33{/.notdef}rp /g4 /g1 /g5 /g6 /g7 /g8 /g9 /g10 /g11 /g2 213{/.notdef}rp]VRWYPZ+Calibri nfVRWYPZ+Calibri*1 [12 0 0 -12 0 0 ]msf206.655 358.083 mo(!")[6.08163 0 ]xsh200.573 309.471 mo(#!")[6.08163 6.08165 0 ]xsh200.573 260.859 mo($!")[6.08163 6.08165 0 ]xsh200.573 212.248 mo(%!")[6.08163 6.08165 0 ]xsh200.573 163.636 mo(&!")[6.08163 6.08165 0 ]xsh200.573 115.024 mo('!")[6.08163 6.08165 0 ]xsh200.573 66.4119 mo(\(!")[6.08163 6.08165 0 ]xsh200.573 17.8 mo(\)!")[6.08163 6.08165 0 ]xsh28.2999 372.9 mo(*%")[3.6744 6.08644 0 ]xsh91.8227 372.9 mo(*$")[3.67439 6.08645 0 ]xsh155.345 372.9 mo(*#")[3.67439 6.08644 0 ]xsh220.827 372.9 mo(!")[6.08163 0 ]xsh284.35 372.9 mo(#")[6.08163 0 ]xsh347.873 372.9 mo($")[6.08163 0 ]xsh411.395 372.9 mo(%")[6.08163 0 ]xsh474.918 372.9 mo(&")[6.08163 0 ]xsh538.441 372.9 mo('")[6.0816 0 ]xsh601.964 372.9 mo(\(")[6.0816 0 ]xshgsave
0 410 mo
684 410 li
684 0 li
0 0 li
0 410 li
clp
VRWYPZ+Calibri*1 [12 0 0 -12 0 0 ]msf665.487 372.9 mo(\)")[6.0816 0 ]xshgrestore
%ADOBeginSubsetFont: SBVPMX+Calibri-Bold Initial
ct_T42Dict begin
-0.516 -0.305 1.238 0.969
 256 array 0 1 255 {1 index exch /.notdef put} for  /SBVPMX+Calibri-Bold
Type42DictBegin
[<00010000000b000b000b000b6376742000000000000000bc000006086670
676d00000000000006c400000913676c796600000000000026c800001f84
686561640000000000000fd8000000366868656100000000000010100000
0024686d74780000000000001034000000746c6f636100000000000010a8
0000003c6d61787000000000000010e4000000206e616d65000000000000
11040000002870726570000000000000112c0000159c6764697200000000
00000000000000000000079e0000fe930000000000000000000000810081
009c00ab00b500ba00c100ca00d300f3010a0060008500bf00e300ea00f2
00fb010001070115011c0129000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000fe83056d
000d03c0000600170000fffaffe9fea9ffe90000050e000600170000fffa
ffe9fe93050e00170426000600170000fffaffe9ff12ffed050e00170426
000600170000fffaffe9fe93feb8fece060b0010050e0006001002cbfffa
fff001edfffa023f00060010ff36fffafff00287000600100000fffafff0
079efeaffe9f00000000000000000000000000700072007500780079007a
007b007d007e007f008300860087008800890085007f0086008b008c008d
008e008f0090009100920093009400950096009700980099009a009b009c
009d009e009f009200930094009b009c009e009e00960099009a009d009e
00a200a600a900ac00a200a300a400a500a700a800a900aa00ab00ac00ae
00a300a500a700a800aa00ab00ac00ad00ae00a000a100a300a600a700a9
00aa00ac00ad00af00af00b000b100b200b300b400b500af00af00b000b2
00b300b400b500b800c000b600b700b800b900ba00bb00bc00bd00be00bf
00c000c100c200b900ba00bc00bd00bf00c000c100c200b600b700b800b9
00ba00bb00bc00bd00be00bf00c000c100c200c000c100c200c300c400c5
00c600c700c800c900ca00cb00cc00cd00ce00cf00c300c400c500c600c7
00c800c900ca00cb00cc00cd00ce00cf00c300c400c500c600c700c800c9
00ca00cb00cc00cd00ce00cf00c500c800c900ca00cb00ce00cf00d000d1
00d200d300d400d500d600d700d900db00de00df00e000e200e300ec00d0
00d100d200d300d400d500d600d700d800d900da00db00dd00de00df00e0
00e100e300e500e900ec00ed00d100d300d400d500d800d900da00dc00e0
00e100e800d000d100d400d600e000e4010800f5010200fb00ff0108008f
009000960092009300990090009100970098009a009d00a400a600a700a8
00a900af009a00a200a300a700a900aa00ab00ac00ad00b000ad009b00aa
00ab00ad00b0009a00aa00ac00ad00ae00af00b100b900bb00bc00bd00be
00c100c200c300c400c500c600c700c800c900ca00cb00ce00b300b400b5
00b600b700b800bc00c200c500c800ca00cb00cd00ce00cf00d000c700b7
00b800b900bb00bc00be00c600c700c800c900cb00cf00d000b200b600b7
00c200c400c500c600c700cb00cc00cd00ce00cf00d000d100d400d500d7
00d800d900da00db00dc00de00df00e000e200e300e500e600d100d300d6
00d700d800da00db00dc00dd00de00df00e000e100e200e300e400e500d1
00d200d400d500da00db00dd00de00df00e000e100e200e600d200d300d4
00d700d800dd00de00e000e100e200e300e400e500e600d200da00e100e9
00ea00ec00e800e900ea00eb00ec00ed00eb00e700ea00eb00ec00ed00e7
00e900ea00ec00ed00ee00ef00f500ee00ef00f000f100f200f300f400f5
00f600ee00f000f200ef00f000f100f200f300f400f500f600ee00ef00f0
00f100f200f300f400f500f600f700f700f800f900fa00fb00fc00fd00f7
00f800f900fa00fb00fd00f700f800f900fa00fb00fc00fd00fd00fe00ff
010001010102010300fe010001010102010300fe00ff0100010101020103
01020103010401050106010701080109010a010c010d010e010f01100107
010401050106010701080109010a010b010d010e010f0110011101040105
0106010701080109010a010b010c010d010e010f01100111010401050106
01070109010e010f011201130114011501170118011a011b011c011d011e
011f01210122011201130114011501170119011b011c011d011e01200121
0123012401250113011401150116011701180119011a011b011c011d011f
01200117011c011d011e012001210129013001770129012b012e012f0130
01310134013501370139012b012d013001320134013a012e01300134013a
014200500062006c00fa05e802cc0114011400a000b140465f5e5d5c5b5a
59585554535251504f4e4d4c4b4a494847464544434241403f3e3d3c3b3a
39383736352f2e2d2c2826252423221f181411100f0d0b0a090807060504
030201002c4523466020b02660b004262348482d2c452346236120b02661
b004262348482d2c45234660b0206120b04660b004262348482d2c452346
2361b0206020b02661b02061b004262348482d2c45234660b0406120b066
60b004262348482d2c4523462361b0406020b02661b04061b00426234848
2d2c0110203c003c2d2c20452320b0cd442320b8015a51582320b08d4423
5920b0ed51582320b04d44235920b0042651582320b00d44235921212d2c
20204518684420b001602045b04676688a4560442d2c01b10b0a43234365
0a2d2c00b10a0b4323430b2d2c00b0282370b101283e01b0282370b10228
453ab10200080d2d2c2045b00325456164b050515845441b2121592d2c20
45b0004360442d2c01b00643b00743650a2d2c2069b04061b0008b20b12c
c08a8cb8100062602b0c642364615c58b00361592d2c8a03458a8a87b011
2bb0292344b0297ae4182d2c4565b02c234445b02b23442d2c4b52584544
1b2121592d2c01b005251023208af500b0016023edec2d2c01b005251023
208af500b0016123edec2d2c01b0062510f500edec2d2c20b00160011020
3c003c2d2c20b001610110203c003c2d2c00b00743b006430b2d2c21210c
6423648bb84000622d2c21b08051580c6423648bb82000621bb200402f2b
59b002602d2c21b0c051580c6423648bb81555621bb200802f2b59b00260
2d2c0c6423648bb84000626023212d2c4523456023456023456023766818
b08062202d2cb00426b00426b00425b0042545234520b003266062636820
b0032661658a2344442d2c2045b0005458b040442045b04061441b212159
2d2c45b1302f4523456160b0016069442d2c4b5158b02f2370b01423421b
2121592d2c4b515820b0032545695358441b2121591b2121592d2c45b014
43b0006063b0016069442d2cb02f45442d2c452320458a60442d2c452345
60442d2c4b235158b90033ffe0b134201bb3330034005944442d2cb01643
58b00326458a586466b01f601b64b020606620581b21b04059b001615923
586559b02923442310b029e01b2121212121592d2cb0164358b004254564
b020606620581b21b04059b0016123586559b0292344b00425b007250820
58021b0359b0052510b004252046b0042523423cb0072510b006252046b0
0425b0016023423c2058011b0059b0052510b00425b029e0b0072510b006
25b029e0b00425b00725082058021b0359b00425b003254348b00625b003
25b0016043481b2159212121212121212d2cb0164358b004254564b02060
6620581b21b04059b0016123581b6559b0292344b00525b0082508205802
1b0359b0042510b005252046b0042523423cb00425b0072508b0072510b0
06252046b00425b0016023423c2058011b0059b0042510b00525b029e0b0
2920456544b0072510b00625b029e0b00525b00825082058021b0359b005
25b003254348b00425b0072508b00625b00325b0016043481b2159212121
212121212d2c02b00425202046b004252342b0052508b003254548212121
212d2c02b0032520b0042508b0022543482121212d2c452320451820b000
50205823652359236820b040505821b04059235865598a60442d2c4b5323
4b515a5820458a60441b2121592d2c4b545820458a60441b2121592d2c4b
53234b515a58381b2121592d2cb000214b5458381b2121592d2cb0024354
58b0462b1b21212121592d2cb002435458b0472b1b212121592d2cb00243
5458b0482b1b21212121592d2cb002435458b0492b1b212121592d2c208a
08234b538a4b515a5823381b2121592d2c0020b200400325b0062649618b
3812342d2c014623466023466123201020468a61b8ff80628ab140408a70
4560683a2d2c208a2349648a2353583c1b21592d2c4b52587d1b7a592d2c
b012004b014b54422d2cb1020042b123018851b1400188535a58b9100000
20885458b202010243604259b12401885158b920000040885458b2020202
436042b12401885458b2022002436042004b014b5258b202080243604259
1bb940000080885458b202040243604259b94000008063b80100885458b2
02080243604259b94000010063b80200885458b202100243604259b94000
020063b80400885458b202400243604259595959592d2c451868234b5158
2320452064b04050587c59688a6059442d2cb00016b00225b0022501b001
233e00b002233eb10102060cb00a236542b00b234201b001233f00b00223
3fb10102060cb006236542b0072342b00116012d2c20b82000628a602362
2d2cb0072558001b0159b0042510b00325b0022520b8ffff545821cd1bed
5921b006255cb006255a58b0092b5920b005254ab0042547b004254760b0
062547b0806361b00225b0005558b00325b00725496359b0082558001b01
59b00425b0062549b009255cb009255a58b0092b59b0072546b0806361b0
032520b0005558631b2159612320b0005558b080631b21b08059b0592bb0
06255c586959b00425202010b00048233ab0062658001b0159b0052658b0
03252f598a12233221212d2cb00625b00a2587b00625b009254ab0005358
b00625b00a251bb00925b0072559b00225b00225070cb005256323b00625
636020b94000040063535821b00426b00426b00a1bb94000040063655158
b0042665b0042665b00a1bb00426b00426b000b00325b003250b0d0ab009
2eb00725b007250b0d0ab00b2eb00525b0052507595920b0005558b00525
b0052587b00725b007250bb0092510b00b25b0092620b8ffff545821cd1b
ed59b00525b0052507b00825b00b254923b00625b0062587b00a2510b00b
25c15920b00051b800522378b00161b00225b00725b0072507b00a25b00d
254961b08062b00525b005250bb00a252338b00625b0062587b00825b008
250bb00a2510b00b25c4b00625b0062507b00925b00c2549b0032554b8ff
a723792121212121212121212121212d2c23b0005458b9400000001bb900
004000598ab0005458b9400000001bb90000400059b05b2b2d2c08b00054
58b9400000001bb900004000590db05b2b2d2c8a8a080d8ab0005458b940
0000001bb90000400059b05b2b2d2cb00426b00426080db00426b0042608
0db05b2b2d000001000000059eb832f46b0a5f0f3cf50019080000000000
bbeb7ccc00000000c787a88bfbdafd8d09ec07c500010009000200000000
000000010000079efdda00000aa0fbdafa8609ec00010000000000000000
000000000000001d040e000001cf0000043c004f0545008d03f30047044b
007e03590048044b004b0407004a0288001903cb001b044b007e01f7006b
03d7007e01f7007e0682007e044b007e044d0048044b007e044b004b02d8
007e0331004902c6001704af001704af0017044b007905f6002303ca0016
01f700000000009e009e013101e302cf0371040704a3056f05f906ff077d
07d208520894095609dd0a500af20b930c120ce50d7c0d880dff0e7b0f2e
0f9e0fc200010000001d0120001000bd000700020010002f006000000c63
01410004000100000001001200010000000000060013000055464d4b5746
2b43616c696272692d426f6c64000000b10903b802f9b21e1d1fb802f8b2
1e2b1fb802f7b21e2c1fb802f6b21e2c1fb802f5b21e2c1fb802f4b21e2b
1fb802f3b21e2c1fb802f2b21e2c1fb802f1b21e2c1fb802f0b21e2c1fb8
02efb21e2c1fb802eeb21e2b1fb802edb21e2b1fb802ecb21e2c1fb802eb
b21e2c1fb802eab21e2c1fb802e9b21e2c1fb802e8b21e2c1fb802e7b21e
2c1fb802e6b21e2c1fb802e5b21e2c1fb802e4b21e091fb802e3b21e2c1f
b802e2b21e2c1fb802e1b21d121fb802e0b21d191fb802dfb21d2f1fb802
deb21d2f1fb802ddb21d2f1fb802dcb21d2f1fb802dbb21d191fb802dab2
1d2f1fb802d9b21d2f1fb802d8b21d2f1fb802d7b21d2f1fb802d6b21d2f
1fb802d5b21d2f1fb802d4b21d2f1fb802d3b21d2f1fb802d2b21d2f1fb8
02d1b21d2f1fb802d0b21d2f1fb802cfb21d2f1fb802ceb21d121fb802cd
b21d121fb802ccb21d121fb802cbb21d121fb802cab21d191fb802c9b21d
2f1fb802c8b21d2f1fb802c7b21d2f1fb802c6b21d2f1fb802c5b21d2f1f
b802c4b21d2f1fb802c3b21d2f1fb802c2b21d2f1fb802c1b21d2f1fb802
c0b21d2f1fb802bfb21d121fb802beb21d121fb802bdb21d2f1fb802bcb2
1d2f1fb802bbb21d2f1fb802bab21d2f1fb802b9b21d2f1fb802b8b21d2f
1fb802b7b21d2f1fb802b6b21d2f1fb802b5b21d2f1fb802b4b21d2f1fb8
02b3b21d2f1fb802b2b21d2f1fb802b1b21c321fb802b0b21c321fb802af
b21c331fb802aeb21c331fb802adb21c331fb802acb21c331fb802abb21c
331fb802aab21c311fb802a9b21c311fb802a8b21c321fb802a7b21c321f
b802a6b21c321fb802a5b21c321fb802a4b21c321fb802a3b21c321fb802
a2b21c331fb802a1b21c331fb802a0b21c331fb8029fb21c331fb8029eb2
1c331fb8029db21c331fb8029cb21c311fb8029bb21c311fb8029ab21c32
1fb80299b21c321fb80298b21c321fb80297b21c321fb80296b21c321fb8
0295b21c331fb80294b21c331fb80293b21c331fb80292b21c331fb80291
b21c331fb80290b21c331fb8028fb21c331fb8028eb21c311fb8028db21c
321fb8028cb21c321fb8028bb21c321fb8028ab21c321fb80289b21c321f
b80288b21c331fb80287b21c331fb80286b21c331fb80285b21c331fb802
84b21c331fb80283b21c331fb80282b21b341fb80281b21b341fb80280b2
1b341fb8027fb21b341fb8027eb21b341fb8027db21b341fb8027cb21b34
1fb8027bb21b341fb8027ab21b341fb80279b21b341fb80278b21b341fb8
0277b21b341fb80276b21b341fb80275b21b341fb80274b21b341fb80273
b21b341fb80272b21b341fb80271b21b341fb80270b21b341fb8026fb21a
351fb8026eb21a351fb8026db21a351fb8026cb21a351fb8026bb21a351f
b8026ab21a351fb80269b21a351fb80268b21a351fb80267b21a351fb802
66b21a351fb80265b21a351fb80264b21a351fb80263b21a351fb80262b2
1a351fb80261b21a351fb80260b21a351fb8025fb21a351fb8025eb21a35
1fb8025db21a351fb8025cb21a351fb8025bb21a351fb8025ab21a351fb8
0259b219371fb80258b219371fb80257b219371fb80256b219371fb80255
b219371fb80254b219371fb80253b219371fb80252b219371fb80251b219
371fb80250b219371fb8024fb219371fb8024eb219371fb8024db219371f
b8024cb219371fb8024bb219371fb8024ab219371fb80249b219371fb802
48b219371fb80247b219371fb80246b219371fb80245b219371fb80244b2
19371fb80243b219371fb80242b219371fb80241b219371fb80240b21937
1fb8023fb219371fb8023eb219371fb8023db219371fb8023cb219371fb8
023bb219371fb8023ab219371fb80239b218391fb80238b218391fb80237
b218391fb80236b218391fb80235b218391fb80234b218391fb80233b218
391fb80232b218391fb80231b218391fb80230b218391fb80301b2182e1f
b8022fb218391fb8022eb218391fb8022db218391fb8022cb218391fb802
2bb218391fb8022ab218391fb80229b218391fb80228b218391fb80227b2
18391fb80226b218391fb80225b2173b1fb80224b2173b1fb80223b21732
1fb80222b2173a1fb80221b2173b1fb80220b2173b1fb8021fb2173b1fb8
021eb2173b1fb8021db2173b1fb8021cb2173b1fb8021bb2173b1fb8021a
b2173b1fb80219b2173b1fb80218b2173b1fb80217b2173b1fb80216b217
3b1fb80215b217321fb80214b2173a1fb80213b2173b1fb80212b2173b1f
b80211b2173b1fb80210b2173b1fb8020fb2173b1fb8020eb2173b1fb802
0db2173b1fb8020cb2173b1fb8020bb2173b1fb8020ab2173b1fb80209b2
17321fb80208b217321fb80207b2173b1fb80206b2173b1fb80205b2173b
1fb80204b2173b1fb80203b2173b1fb80202b2173b1fb80201b2173b1fb8
0200b2173b1fb801ffb2173b1fb801feb2173b1fb801fdb2173b1fb801fc
b2173b1fb801fbb2173b1fb801fab2173b1fb801f9b2173b1fb801f8b217
3b1fb801f7b217321fb801f6b2173a1fb801f5b2173b1fb801f4b2173b1f
b801f3b2173b1fb801f2b2173b1fb801f1b2173b1fb801f0b2173b1fb801
efb2173b1fb801eeb2173b1fb801edb2173b1fb801ecb2173b1fb801ebb2
173b1fb801eab2173b1fb801e9b2173b1fb801e8b2173b1fb801e7b21732
1fb801e6b216231fb801e5b216231fb801e4b216371fb801e3b216371fb8
01e2b216381fb801e1b216381fb801e0b216431fb801dfb216441fb801de
b216441fb801ddb216441fb801dcb216451fb801dbb216461fb801dab216
461fb801d9b216461fb801d8b216231fb801d7b216231fb801d6b216381f
b801d5b216431fb801d4b216431fb801d3b216431fb801d2b216441fb801
d1b216461fb801d0b216461fb801cfb216461fb801ceb216461fb801cdb2
16461fb801ccb216461fb801cbb216431fb801cab216231fb801c9b21623
1fb801c8b216371fb801c7b216371fb801c6b216381fb801c5b216421fb8
01c4b216431fb801c3b216441fb801c2b216451fb801c1b216461fb801c0
b216461fb801bfb216461fb801beb216461fb801bdb216461fb801bcb216
461fb801bbb216461fb801bab216371fb801b9b216381fb801b8b216421f
b801b7b216431fb801b6b216431fb801b5b216431fb801b4b216441fb801
b3b216441fb801b2b216441fb801b1b216451fb801b0b216451fb801afb2
16451fb801aeb216461fb801adb216461fb801acb216461fb801abb21646
1fb801aab216461fb801a9b215341fb801a8b215411fb801a7b215411fb8
01a6b2154d1fb801a5b2154e1fb801a4b2154f1fb801a3b215521fb801a2
b215401fb801a1b2154d1fb801a0b2154e1fb8019fb2154f1fb8019eb215
521fb8019db2154d1fb8019cb215401fb8019bb2154d1fb8019ab2154e1f
b80199b2154e1fb80198b2154f1fb80197b2154f1fb80196b215501fb801
95b215521fb80194b215521fb80193b215521fb80192b215411fb80191b2
154f1fb80190b215501fb8018fb215501fb8018eb215511fb8018db21552
1fb8018cb215521fb8018bb215521fb8018ab214581fb80189b214591fb8
0188b2145c1fb80187b2145d1fb80186b2144a1fb80185b2145b1fb80184
b2145c1fb80183b214591fb80182b2145d1fb8018140af145d1ff00f451f
ef0e481fe00c4e1fc20c4e1fc10c4e1fc00c4e1fbf0b561fb20b561fb10b
561fb00b561faf0b561fae0b561fad0b561fac0b561fab0b561faa0b561f
a90b561fa80b561fa70b561fa60b561fa50b561fa40b561fa30b561fa20b
561fa10b561fa00b561f9f0b561f9e0a681f9a0a681f990a681f980a681f
970a681f960a681f950a681f940a681f930a681f920a681f910a681f9009
681f8f09681f8e09681f8d09681f8c09681f410902fc02fa0056001f02fb
02fa0068001f017fb213321fb8017eb212371fb80174b212371fb80173b2
11421fb80172b211421fb80171b211421fb80170b211421fb8016fb21142
1fb8016eb211421fb8016db211421fb8016cb211421fb8016bb211421fb8
016ab211421fb8013cb211421fb8013bb210421fb8013ab210421fb80139
b210421fb80138b210421fb80137b210421fb80136b210421fb80135b210
421fb80134b210421fb80133b210421fb80132b20f451fb80131b20f451f
b80130b20f451fb80112b20f451fb80111b20f451fb80110b20f451fb801
0fb20f451fb8010eb20f451fb8010db20e481fb8010cb20e481fb8010bb2
0e481fb8010ab20e481fb80109b20e481fb80108b20e481fb80107b20d4a
1fb80106405b0d4a1fee0d4a1fed0d4a1fec0d4a1feb0d4a1fea0d4a1fe9
0c4e1fdf0c4e1fde0c4e1fdd0c4e1fdc0c4e1fdb0c4e1fda0c4e1fd90b56
1fd80b561fd70b561fbe0b561fbd0b561fbc0b561fbb0b561fba0b561f9d
0a681f9c0a681fb80180b213321fb8017ab211401fb80179b211421fb801
78b211421fb80177b211421fb80176b211421fb80175b211421fb80143b2
11421fb80142b210421fb80141b210421fb80140b210421fb8013fb21042
1fb8013eb210421fb8013db20f451fb80115b20f451fb80114b20f451fb8
0113b20f451fb903030302b2401fa4be030200b4030200c4030200030300
b213321fb8017bb213321fb80153b212371fb80152b211401fb80151b211
401fb80150b211401fb8014fb211401fb8014eb211401fb8014db211401f
b8014cb211401fb8014bb211401fb8014ab211401fb80149b211401fb801
48b211401fb80147b211401fb80146b211401fb80145b211401fb80144b2
11401fb80122b211401fb80121b210421fb80120b210421fb8011fb21042
1fb8011eb210421fb8011db210421fb8011cb210421fb8011bb210421fb8
011ab210421fb80119b210421fb80118b20f451fb80117b20f451fb80116
409b0f451ffd0f451ffc0f451ffb0f451ffa0f451ff90e481ff80e481ff7
0e481ff60e481ff50e481ff40e481ff30d4a1ff20d4a1ff10d4a1fe70d4a
1fe60d4a1fe50d4a1fe40d4a1fe30d4a1fe20d4a1fe10c4e1fcd0c4e1fcc
0c4e1fcb0c4e1fca0c4e1fc90c4e1fc80c4e1fc70c4e1fc60c4e1fc50c4e
1fc40c4e1fc30c4e1fb80c4e1fb70b561fb60b561fb50b561fb40b561fb3
0b561f9b0a681fb802fdb212371fb8017db212371fb8017cb212371fb801
69b2112e1fb80168b2112e1fb80167b211401fb80166b211401fb80165b2
11401fb80164b211401fb80163b211401fb80162b211401fb80161b21140
1fb80160b211401fb8015fb211401fb8015eb211401fb8015db211401fb8
015cb211401fb8015bb211401fb8015ab211401fb80159b211401fb80158
b211401fb80157b211401fb80156b211401fb80155b211401fb80154b211
401fb8012fb211401fb8012eb210421fb8012db210421fb8012cb210421f
b8012bb210421fb8012ab210421fb80129b210421fb80128b210421fb801
27b210421fb80126b210421fb80125b20f451fb80124b20f451fb80123b2
0f451fb80105b20f451fb80104b20f451fb80103b20f451fb80102b20f45
1fb80101b20e481fb8010040a20e481fff0e481ffe0e481fe80c4e1fd60c
4e1fd50c4e1fd40c4e1fd30c4e1fd20c4e1fd10c4e1fd00c4e1fcf0c4e1f
ce0b561fb90b561f8503251f84032e1f83012e1f8248805581ab80557f48
7d557eab7d550b7d3b7d4b7d030b7d1b7d4b7d7b7dab7ddb7d067c487a55
7bab7a55047a147a020a7948775578ab77550b77010c764875555475e475
f4750314755475647574759475d475e47507a475b475c47503b8ffc04012
75383b46807590750214757475020075010fb8ffc04021750b0e46744872
5573ab725504723472023bf47201e07201023072015072607202b8ffc0b3
72242846b8ffc0403572161a461072307240720371486f5570ab6f554f6f
6f6f7f6f9f6fbf6f057f6f8f6f02af6fbf6f02406f090d466e486d55df6d
0100bc02ff001002ff00c002ffb2030a6fbb02fe000100ef02fe40ff016b
032e1f6a03251f692e675568ab6755662e645565ab6455632e6255612e60
555f2e5d555eab5d555c2e5a555bab5a55592e58555703251f562e545555
ab5455532e515552ab51554f2e4e554e03251f4d2e4b554cab4b554a2e48
5549ab4855504801472e46554503361f001f01001e01001e701e801ef01e
040b601d701d02701de01df01d03701cf01c027f1b010f1a7f1a8f1a030f
1a8f1a020f1a8f1a020f191f198f199f19af19050f198f199f19030c7012
801202701180110230114011d011e011040011a011020f8f0f9f0faf0f03
4f0f5f0fef0fff0f04af0f01af0ebf0ecf0e034f0e5f0e6f0e030f0eaf0e
bf0e0310400e2e31460f0d1f0d40472f0d033c2f0d3f0d4f0d038f0d0140
0d2e3246400d2427463f0c4f0c5f0c039f0c01400c262946ef0aff0a0240
0a242746ef09ff0902ff09010003012001010001100120010308b8ffc0b3
01151f46b80100b316010501b80190b154532b2b4bb807ff524bb008505b
b00188b02553b00188b040515ab00688b000555a5b58b101018e59b10102
4354b0144b515a58b101018e59858d8d00421d4bb01d5358b0a01d594bb0
805358b0401d594bb0ff5358b0001db1160042592b5e73757373742b732b
73742b2b73745e732b5e7374757374755e73747573015e73747374757574
73745e737473002b2b732b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b73745e73732b2b7374752b2b732b2b73755f75755e732b2b2b5e
7373732b7374752b5e732b2b5e732b2b73742b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b732b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b012b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b185f5e00>
[8069 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 610 3 <0001008dfffa04b80512003d00b5b10102435558b6270f0a2e0f0f14b802
34b21e2e32b80234b4001e385229b8fff040120f26024c29282e220c100f
26024c0c0b060fb8017db7270a19225119552eb8017db240065400183f1a
4ded3f3f123939ed1139392b111239392b3f012fd4ed3210ed322f113311
3331301bb2385229b8fff040120f26024c29282e220c100f26024c0c0b06
0fb8017db7270a19225119552eb8017db240065400183f1a4ded3f3f1239
39ed1139392b111239392b3f31305925140e022323222e02270126262723
16161511140e0223222e02351134363333321e0217131e03173326263511
343e0233321e021504b8101b25137023332b2819febe1c3a170204040b1b
2e24232e1a0a37288d2634292413fc162b2826120103030c1c2e24222e19
0a5c1724180b0e253f32025d367d3b488f4cfd5b0a100b06060b100a048b
2f2f0d1e3527fe272b53535028469845025f0a100c05050c100a>SBVPMX+Calibri-Bold AddT42Char 
1 7166 25 <00010079ffe903cc03c60032006bb10102435558b10b27bb025e0000001f
025f400f132d49270b05194924180b0f014c24b8014db4400e4d054c0018
3f3f1a4ded2b3f1239393f012fedd4ed3931301b400e2d49270b05194924
180b0f014c24b8014db4400e4d054c00183f3f1a4ded2b3f1239393f3130
5925140e0223222e023535060623222e023511343e0233321e021511141e
023332363711343e0233321e021503cc0a19291f2129180a4a99525c7d4d
210b1d312425301d0c122539263061370b1d302525301c0c220a0f0a0505
0a0f0a6750503c68896602220a0f0a05050a0f0afe08464a351d46430251
0a0f0a05050a0f0a>SBVPMX+Calibri-Bold AddT42Char 
1 4392 15 <0001007efffa060903d7005000abb10102435558b14613b8025fb31e1e32
0ab8025fb2503e27bb026000320010ffe8b40b0f014c10b8014db24b4a24
b8ffe8b40b0f014c24b8014d400e40414a3e462d38492d4c194c054c0018
3f3f3f3f1239393f1a4ded2b3fed2b012fed39d4ed11392fed3931301bb9
0010ffe8b40b0f014c10b8014db24b4a24b8ffe8b40b0f014c24b8014d40
0e40414a3e462d38492d4c194c054c00183f3f3f3f1239393f1a4ded2b3f
ed2b31305925140e0223222e023511342e022322060711140e0223222e02
3511342e022322060711140e0223222e023511343e0233321e0215153636
33321e02173e0333321e021506090c1c302526301d0b112335252d5c360c
1d302425301d0c112236242e5c350c1d302525301d0c0a1a291f202a170a
4a93503758453211284d4b4b27597a4b20220a0f0a05050a0f0a02112d4a
351d4643fdaf0a0f0a05050a0f0a02112d4a351d4643fdaf0a0f0a05050a
0f0a037c0a0f0a05050a0f0a675050172b3c252b3e27133c678a4d00>SBVPMX+Calibri-Bold AddT42Char 
1 1438 5 <0002007effe904000570002a003d0096b10102435558b20a2136bb026000
15002b0284400900150a363521040530b8ffe8b40b0f014c30b8014b400d
264a1b46104c39180b0f014c39b8014ab240054d00183f1a4ded2b3f3f3f
ed2b121739012fd4ed10ed323931301bb60a363521040530b8ffe8b40b0f
014c30b8014b400d264a1b46104c39180b0f014c39b8014ab240054d0018
3f1a4ded2b3f3f3fed2b12173931305901140e0223222e022715140e0223
222e023511343e0233321e0215113e0333321e0205342e0223220e020711
161633323e02040034628f5b2d4e4745240b192a1e1f29190a0c1d302525
301d0c2244444828638a5728fefb112a4333193033361e35613531442d14
01ec77be864811263a29610b0f0a04040a0f0b05230a100b06060b100afe
1322301f0e4f86b375396a52310e223628fed84447325066>SBVPMX+Calibri-Bold AddT42Char 
1 2374 8 <0002004affe903b603d7002b00340105b10102435558b31313212cb80243
b22b3404b80272400a21032c132c021b2cc304b8ffc040170d014d000410
04024c5004600402a004b0040204041c2fb8ffe8b30f014d2fb8ffe84020
0d014d2fe4264a18f6000e100e0211030e09180c014d09180f014d09f940
1c4d00183f1a4dfd2b2bd45f5e5ded3fed2b2b12392f5d715e5d2bed5e5d
012fed32dded12392f31301b4009032c132c021b2cc304b8ffc040170d01
4d00041004024c5004600402a004b0040204041c2fb8ffe8b30f014d2fb8
ffe840200d014d2fe4264a18f6000e100e0211030e09180c014d09180f01
4d09f9401c4d00183f1a4dfd2b2bd45f5e5ded3fed2b2b12392f5d715e5d
2bed5e5d3130590114062321141e0233323e0233321e0215140e0623222e
0235343e0233321e021527362623220e020703b62924fde11b3b5d414264
49300f090c08030204080d3a5a744277b3783b3e76a96a709f6630f4035b
5f30472f190201fa2e2c395d412213171307122119161f160f0e1817113c
7aba7d77bf85464275a05e206a79243d532f>SBVPMX+Calibri-Bold AddT42Char 
1 5926 20 <0001007efffa02bb03d700330070b10102435558b1260fb80260400c001a
0f0a1f0a2f0a030d030ab8ffe8b30b014d0ab80153400a402b4a260f1520
49154c00183f3f1239393f1a4ded2b5f5e5d012fc4ed3931301bb9000aff
e8b30b014d0ab80153400a402b4a260f152049154c00183f3f1239393f1a
4ded2b31305901140e0223222e0223220e020711140e0223222e02351134
3e0233321e0215153e0333321e0602bb04080d0a0814191e12152a2d311c
0c1d302525301d0c0a1a291f202a170a233e38381c0d1e20180b05040203
4b242e1a0a07080711243c2cfdd40a0f0a05050a0f0a037c0a0f0a05050a
0f0a6f3241260f0307090a0c152a>SBVPMX+Calibri-Bold AddT42Char 

1 0 1 <> SBVPMX+Calibri-Bold AddT42Char 
1 5050 17 <00020048ffe9040403d7001300270071b10102435558bf00140275000000
1e0275000a0019ffe8b40b0f014c19b8011a40090f4a23180b0f014c23b8
011cb240054d00183f1a4ded2b3fed2b012fedd4ed31301bb90019ffe8b4
0b0f014c19b8011a40090f4a23180b0f014c23b8011cb240054d00183f1a
4ded2b3fed2b31305901140e0223222e0235343e0233321e0205342e0223
220e0215141e0233323e0204043c7ab87b77b074383d7ab77b78b07338fe
fd1532533f3854361b1631543e3954361a01e972bc884a427eb87672bd87
4a417eb881426f522e294f6f47426f522d294e6f>SBVPMX+Calibri-Bold AddT42Char 
1 2782 9 <00010019fffa02980578003c0073b10102435558b31610001bb8025fb330
2a250ab8011db336471a26b8ffe8b40b0f014c26b8011fb6403048204c10
4800183f3f3f1a4ded2b323fed012fc433fdc433c431301bb9000a011db3
36471a26b8ffe8b40b0f014c26b8011fb6403048204c104800183f3f3f1a
4ded2b323fed31305901140e0223222e0223220e02151533321e02151406
232311140e0223222e02351123222635343e02333335343e0233321e0402
9804080a0607111922171b271a0ca3090f0a051413a30c1c322424311d0b
70131305090f0a6f244d77512746280e090404f21d23130707080711253b
2b520a17281d372ffd2e0a0f0a05050a0f0a02d22f371d28170a4b5b895b
2e0d0f0d1927>SBVPMX+Calibri-Bold AddT42Char 
1 966 4 <00020047ffe9037603d7003300400129b10102435558b2091734b8025bb4
002727003ab80245401011031701f3170117b80c3401fc340134b8ffc040
090c0d014c34342e412ab80118401be02201037d228d2202402250226022
030f221f22020c042222041db8ffe0400e0c0f014c1d1810014d1dfa2e4a
3db8ffe8400910014d3de4400c4d0400182f3f1a4ded2b3fed2b2b12392f
5f5e5d5d5d5f5ded1112392f2b5d71ed5d71012fedc4392f10ed32393130
1b400f031701f3170117b80c3401fc340134b8ffc040090c0d014c34342e
412ab80118401be02201037d228d2202402250226022030f221f22020c04
2222041db8ffe0400e0c0f014c1d1810014d1dfa2e4a3db8ffe840091001
4d3de4400c4d0400182f3f1a4ded2b3fed2b2b12392f5f5e5d5d5d5f5ded
1112392f2b5d71ed5d7131305925140606232226263535060623222e0235
343e02333335342e0223220e0223222e0235343e0433321e02150723220e
02151416333236370376142b2a2d2911378d56477757303d79b477571127
41303f634c33100b110b060a1c465e6f3b6995602cf7603d563619473f35
592e1f0e100707100e473b4225496c484e734b24362a3f2a141c221c0e1a
26171f241d231e132955865cda122433213840363400>SBVPMX+Calibri-Bold AddT42Char 
1 1762 6 <00010048ffea032103d60035009db10102435558b21c0027be0274000e00
18011f001f0024ffe8b40b0f014c24b8011fb2134a04ba01480031ffc040
0b0b014d312c180b0f014c2cb80146b240094d00183f1a4dfd2bd42bed3f
fd2bd4ed012fedc43231301bbc0018011f001f0024ffe8b40b0f014c24b8
011fb2134a04ba01480031ffc0400b0b014d312c180b0f014c2cb80146b2
40094d00183f1a4dfd2bd42bed3ffd2bd4ed31305925140e0623222e0235
343e0233321e0615140623222e0223220615141e0233323e0233321e0203
21030507183a4a572e679f6c374378a462284d4335160905031410112634
483262681a334d33344b38260d090c0704b01a23180f17211a10407db474
86c3803e0e181e160f1823193a2f1c221c9792486e4a251f261f0a1b2a00
>SBVPMX+Calibri-Bold AddT42Char 
1 6928 24 <00010017ffec043004b10041003fb22f4110b8025fb42b1e1e2b0fb8025f
b603352b4148102bb8011fb33b354814b80147b3254d094c003f3fed3fcd
ed323f012f32dded12392f10ed322f31300132161511140e0223222e0235
112111141633323e0233321e0215140e0423222e02351123222635343e02
333335343e0233321e02151503e52a210c1c312425311c0cfe6f2e3b1420
191107060b06050a12242f371c4b6e48226b1314050a0f0a6a0b1d312425
311c0c03c02422fca80a0f0a05050a0f0a02d2fe5d49490709070715241c
2c2d150f0b06264f785201c92f371d28170ac70a100b05050b100ac7>SBVPMX+Calibri-Bold AddT42Char 
1 7996 28 <0002000003c0018d054e000b000c0014b9000002bfb40609030c48003fde
cd012fed313001140623222635343633321601018d3e54553b3d55543cfe
7304cc4c3a38494c3b39feab>SBVPMX+Calibri-Bold AddT42Char 
1 6904 23 <ffff0017ffec0444054e0226001800000007001c02b70000>SBVPMX+Calibri-Bold AddT42Char 
1 4780 16 <0001007efffa03d203d700320081b10102435558b12a13bb0260001e000b
025fb2001e10b8fff0b30b014d10b8ffe8b40c0f014c10b8014d400b402d
4a2a192449194c054c00183f3f3f12393f1a4ded2b2b012fd4ed10ed3931
301bb90010fff0b30b014d10b8ffe8b40c0f014c10b8014d400b402d4a2a
192449194c054c00183f3f3f12393f1a4ded2b2b31305925140e0223222e
023511342e022322060711140e0223222e023511343e0233321e02151536
3633321e021503d20c1c312425311c0c132439263062350c1d302525301d
0c0a1a291f202a170a4a99535b7d4d22220a0f0a05050a0f0a01fd414a35
1d4643fdaf0a0f0a05050a0f0a037c0a0f0a05050a0f0a6750503c678a61
>SBVPMX+Calibri-Bold AddT42Char 
1 6180 21 <00010049ffe902f203d7004900e9b10102435558b90041022eb524322432
0c1bb802444022000c042e012ee4370b0a010ae71137400b014d10372037
020337113711160f3c013cb8fff0401b0b0f014c3ce4411b05294a16100c
0d014c001601100416f240054d00183f1a4ded5f5e5d2b3f123939ed2b5d
1139392f2f5f5d2b10ed5d10ed5d012fd4ed1239392f2fed31301b402004
2e012ee4370b0a010ae71137400b014d10372037020337113711160f3c01
3cb8fff0401b0b0f014c3ce4411b05294a16100c0d014c001601100416f2
40054d00183f1a4ded5f5e5d2b3f123939ed2b5d1139392f2f5f5d2b10ed
5d10ed5d31305901140e0223222e0435343e0233321e0233323e0235342e
0635343e0233321e0615140e0223222e0223220e0215141e0602f239688e
53325b4830160c04080c090b2b40553622352714253d4d514d3d25325e87
542a4f402c1308040303070c080926394b3022322010263e4f514f3e2601
1e4c744e270f1718152d2c1d231507191e1a0e1a281a1e2b201c222c405a
3f406b4c2a0c12150f0f151f171b2214071518150e1a23141f2a201c212c
4059>SBVPMX+Calibri-Bold AddT42Char 
1 5280 18 <0002007efe95040003d7002a003d0096b10102435558b221360abb026000
15002b0285400900150a363521040530b8ffe8b40b0f014c30b8014b400d
264a1b49104f39180b0f014c39b8014ab240054d00183f1a4ded2b3f3f3f
ed2b121739012fd4ed10ed323931301bb60a363521040530b8ffe8b40b0f
014c30b8014b400d264a1b49104f39180b0f014c39b8014ab240054d0018
3f1a4ded2b3f3f3fed2b12173931305901140e0223222e022711140e0223
222e023511343e0233321e0215153e0333321e0205342e0223220e020711
161633323e0204003362925e27413d3c200c1d302525301d0c0a19291f1e
29190a274b4e532f628a5728fefa11294332193133361e35603431452c15
01ed77bf86480f1f2e1ffe5c0a100b06060b100a04de0a0f0a05050a0f0a
69283d29144d86b277396952310f223628feda4349325166>SBVPMX+Calibri-Bold AddT42Char 
1 4260 14 <0001007efffa017a05700015003fb10102435558400f0d15010b0b010b0a
010d00010b0400b80260b5400a1046054c00183f3f012f1a4ded31305f5e
5d5d5d5d1bb31046054c00183f3f31305925140e0223222e023511343e02
33321e0215017a0c1d302525301d0c0c1d302525301d0c220a0f0a05050a
0f0a05230a100b06060b100a>SBVPMX+Calibri-Bold AddT42Char 
1 6602 22 <00010017ffec028e04b1003a0093b10102435558b711110d3b2900232db8
025fb2170d2db8ffe8b40b0f014c2db8011fb323481d0db8ffe8b40b0f01
4c0db8011fb2174831b80147b240074d00183f1a4ded3fed2bcd3fed2b01
2f33fd32c4321112392f31301bb9002dffe8b40b0f014c2db8011fb32348
1d0db8ffe8b40b0f014c0db8011fb2174831b80147b240074d00183f1a4d
ed3fed2bcd3fed2b31305925140e0423222e02351123222635343e023333
35343e0233321e02151533321e02151406232311141633323e0233321e02
028e0b12232f371c4b6e48226b1314050a0f0a6a0b1d312425311c0cc20a
0f0a051413c32e3b1420191107060b06057a2c2f130f0b06264f785201c9
2f371d28170ac70a100b05050b100ac70a17281d372ffe5d494907090707
1524>SBVPMX+Calibri-Bold AddT42Char 
1 2062 7 <0002004bffe903cc056d002600390095b10102435558b20b1b39bb025e00
00002f0272400a1321460b39271b040e2ab8ffe8b40b0f014c2ab8014940
09184a34180b0f014c34b80149b4400e4d054c00183f3f1a4ded2b3fed2b
1217393f012fedd4ed323931301b400921460b39271b040e2ab8ffe8b40b
0f014c2ab801494009184a34180b0f014c34b80149b4400e4d054c00183f
3f1a4ded2b3fed2b1217393f31305925140e0223222e023535060623222e
0235343e023332161711343e0233321e021503262623220e0215141e0233
323e023703cc0a18291e2028190b45975c668d59283362925f4b7a3c0b1d
302525301c0cfa36633631472b15122944341a31333620220b0f0a04040a
0f0b634a524f86b36377be86483d3b01e30a100b06060b100afd34444831
526535386a53320f22372800>SBVPMX+Calibri-Bold AddT42Char 
1 316 2 <0001004fffeb040c05230039008bb10102435558b21c002bbe02c7000e00
18016100210026ffe8b40b0f014c26b80160b2135304b8015ab73530180b
0f014c30b80162b240095600183f1a4dfd2bd4ed3ffd2bd4ed012fedd4c4
31301bbc0018016100210026ffe8b40b0f014c26b80160b2135304b8015a
b73530180b0f014c30b80162b240095600183f1a4dfd2bd4ed3ffd2bd4ed
31305925140e0623222e02353412363633321e0615140e0223222e022322
0e0215141e0233323e0233321e02040c03060a163f5b754485d69650589e
dd85366455441b0a0603040a0e090f2e4965464d79552c2f577b4d466649
2f0d0a0c0804c4192319121724211652a3f4a2a50100ae5a121d261b121c
261c1e2a1a0c232b233f75a66872a76c3521282008182b00>SBVPMX+Calibri-Bold AddT42Char 
1 3582 11 <0001007efffa03d205700032006db10102435558b9000b025fb2322a14b8
0260b31e2a1910b8ffe8b40b0f014c10b8014d4009402d4a2446194c054c
00183f3f3f3f1a4ded2b1239012fed32d4ed31301bb22a1910b8ffe8b40b
0f014c10b8014d4009402d4a2446194c054c00183f3f3f3f1a4ded2b1239
31305925140e0223222e023511342e022322060711140e0223222e023511
343e0233321e021511363633321e021503d20c1c312425311c0c13243926
3062350c1d302525301d0c0c1d302525301d0c4187495b7d4d22220a0f0a
05050a0f0a01fd414a351d4643fdaf0a0f0a05050a0f0a05230a100b0606
0b100afe13403f3c688b6300>SBVPMX+Calibri-Bold AddT42Char 
1 3058 10 <0003001bfe9303a203d3003e004e005f0102b10102435558404f0f300703
38234a334ac34a031f4a014ae1c90c01180c010cc953011e530118530153
f1cd150117150100151015020f1515603803f93c482a202c42bc42020042
0142cd384a0f5b0110035bcc40204f00183f1a4ded5f5e5d3fed5d5d1239
3fed1112392f5e5d5d5ded5d5d5dd65d5ded5d5d12173931301b40550f30
070338234a334ac34a030b4a011f4a014ae1c90c01180c010cc953011e53
0118530153f1cd150117150100151015021515603803f93c482a203c42cc
42020442010f00420142cd384a0f5b0110035bcc40204f00183f1a4ded5f
5e5d3fed5d5e5d5d12393fed1112392f5d5d5ded5d5d5dd65d5ded5d5d5d
1217393130590114062323161615140e0223222627060615141617171e03
15140e0223222e0235343e0237262635343637262635343e023332161721
321601342623220e0215141633323e0213342627270e0315141633323e02
03a21610691613346189542b4e150c13332ed94c77512b3a74af7572a167
2f1121301f2b2f362b232a376288522a4d21011b1115febd504925382512
5047263825133b483fb31a1f1306655c394e30140360302e183d214e7953
2b150e0d24161d2502080325435e3c4275563224405935213c373217174f
2f3b61272362494e7b552d0a092cfef94850192b391f444f182a37fd562d
3002051323201e10323417262f00>SBVPMX+Calibri-Bold AddT42Char 
1 3834 12 <0002006bfffa018d054e001500210045b10102435558bf001602bf001c00
150260000a001f017bb540191049054c00183f3fd61a4ded012fedd4ed31
301bb9001f017bb540191049054c00183f3fd61a4ded31305925140e0223
222e023511343e0233321e0215131406232226353436333216017a0c1d30
2525301d0c0c1d302525301d0c133e54553b3d55543c220a0f0a05050a0f
0a037a0a0f0b06060b0f0a01304c3a38494c3b39>SBVPMX+Calibri-Bold AddT42Char 
1 7772 27 <00010016fe9503b403c600240068b10102435558b60109090e001a1bb802
42b640241a200a1a18b80273400f400e1a1f49190a13490a4b044f004b00
183f3f3f3f12393f01192f18d41a4ded12391a10dd1aed123912392fcd31
301b400c1f49190a13490a4b044f004b00183f3f3f3f12393f3130592103
060623222e023713262627012634363633321e02171333133e0233321616
140702836c09504d2830180207770d1505fecd0d18392f2b321c0e07d203
c006132c372b391b08fec4191607101811012b06190e033423251508030c
1917fdab02611a11080816251900>SBVPMX+Calibri-Bold AddT42Char 
1 7414 26 <00010023fffa05d303c600450097b10102435558b71c1d122e2c2c102ab8
0243400b1d10380e1004033a3a103cb8022b400d4003104149334910300b
0f483ab8ffd0b30b0f482cb8ffd0400e0b0f482c3a1003172549174c094c
00183f3f3f1217392b2b2b3f3f01192f18d41a4ded1239192f1239123939
1810d4ed1239192f3939123931301b400f414933492c3a1003172549174c
094c00183f3f3f1217393f3f31305901140607030e0323222e0227032707
030e0323222e022703262635343e0233321e0217131737133e0333321e02
17131737133e0333321e0205d30608ee0510213d31313e2310049602028a
040f243e31323d231004ec09050b1d312528321c0b03b10202a6030d1a2f
25252e1b0b03b20302aa020c1c3025252f1b0a03a00b201efcd911150c04
050c1510021e0909fde211150c04050c151003271d210b0a0f0904040a11
0cfd710c0c028f0c110a0405090f0afd6c0b0c028f0c110a0404090f>SBVPMX+Calibri-Bold AddT42Char 
1 4004 13 <0001007efffa03bb057000340062b10102435558bf003102600022000c02
600016002302b6b32d2d160ab802b7400e400016220b0528491c46114c05
4c00183f3f3f3f123939012fd41a4ded12392fed10fd32e431301b400b22
0b0528491c46114c054c00183f3f3f3f12393931305925140e0223222e02
270111140e0223222e023511343e0233321e021511013e0333321e021514
06070101161603bb0b1d32282933211207fed70c1d302525301d0c0c1d30
2525301d0c0108081421312625331f0c0f0ffefb012e0c0b210a0f090504
09100d01d6fe280a0f0a05050a0f0a05230a100b06060b100afcf101630c
120a05050a0f0b0f2213fed8fe2d141d>SBVPMX+Calibri-Bold AddT42Char 
1 5604 19 <0002004bfe9503cc03d7002a003d0095b10102435558b21f0b2bbb025e00
2a00330272400a1525490b3d2b1f04102eb8ffe8b40b0f014c2eb8014940
091a4a38180b0f014c38b80149b440104d054f00183f3f1a4ded2b3fed2b
1217393f012fedd4ed323931301b400925490b3d2b1f04102eb8ffe8b40b
0f014c2eb8014940091a4a38180b0f014c38b80149b440104d054f00183f
3f1a4ded2b3fed2b1217393f31305901140e0223222e0235110e0323222e
0235343e0233321e021735343e0233321e021503262623220e0215141e02
33323e023703cc0c1c302525301d0b2444444828628a5728346492602544
44492c0b1928201e29180afa36633631472b15122944341a31333620fec0
0a100b06060b100a01a821311f0e4f86b36377be86480f253b2b610a0f0a
05050a0f0afed8444831526535386b52320f22372800>SBVPMX+Calibri-Bold AddT42Char 
1 0 0 <00050000fe7303db050e000300070039004d004e0054bc000d019d001700
3a01cbb44444082d07be019d0002002001cb00080001019d401304020d1b
1b3f2335068c035111493f078c0254003ffddeddc63ffddecd12392fcd01
2fddedd6ed10fdc611392fedd4ed3130011121110111211101140e020707
060623222e02352726363333323e0235342623220e0223222e0235343637
3e0333321e0203140e0223222e0235343e0233321e020103dbfc4f0345fd
240279213b533105012b25171f130808031f1e0d2533200f4b4d2336281a
05040806030508072736422355774a22ce0a18271c1d27180a0a18271d1c
27180afdc2050efaf2050efb570444fbbc02e839583e2406790d0b020509
089d281e1524311c3d4b0d0f0d050e1b171a1c0708110e0a2a4861fd991a
25170a0a17251a1c25180a0a1825fd3b>SBVPMX+Calibri-Bold AddT42Char 
SBVPMX+Calibri-Bold /CharStrings get begin
/g3 3 def
/g25 25 def
/g15 15 def
/g5 5 def
/g8 8 def
/g20 20 def
/g1 1 def
/g17 17 def
/g9 9 def
/g4 4 def
/g6 6 def
/g23 23 def
/g16 16 def
/g21 21 def
/g18 18 def
/g14 14 def
/g22 22 def
/g7 7 def
/g2 2 def
/g11 11 def
/g10 10 def
/g12 12 def
/g27 27 def
/g26 26 def
/g13 13 def
/g19 19 def
end
SBVPMX+Calibri-Bold /Encoding get
dup 33 /g3 put
dup 34 /g25 put
dup 35 /g15 put
dup 36 /g5 put
dup 37 /g8 put
dup 38 /g20 put
dup 39 /g1 put
dup 40 /g17 put
dup 41 /g9 put
dup 42 /g4 put
dup 43 /g6 put
dup 44 /g23 put
dup 45 /g16 put
dup 46 /g21 put
dup 47 /g18 put
dup 48 /g14 put
dup 49 /g22 put
dup 50 /g7 put
dup 51 /g2 put
dup 52 /g11 put
dup 53 /g10 put
dup 54 /g12 put
dup 55 /g27 put
dup 56 /g26 put
dup 57 /g13 put
dup 58 /g19 put
pop
end
%ADOEndSubsetFont
/VRWYQA+Calibri-Bold /SBVPMX+Calibri-Bold findfont ct_VMDictPut/VRWYQA+Calibri-Bold*1 [33{/.notdef}rp /g3 /g25 /g15 /g5 /g8 /g20 /g1 /g17 /g9 /g4 /g6 /g23 /g16 /g21 /g18 /g14 /g22 /g7 /g2 /g11 /g10 /g12 /g27 /g26 /g13 /g19 197{/.notdef}rp]VRWYQA+Calibri-Bold nfVRWYQA+Calibri-Bold*1 [0 -14 -14 0 0 0 ]msf29 273.342 mo(!"#$%&'\(\)'*+,\(-.'+\(/#/0%1%2')[-9.22174 -7.51385 -11.3918 -7.51384 -7.05188 -4.97974 -3.15977 -7.52773 -4.43372 -3.15977 -6.91185 -5.86179 -8.19989 -7.52773 -7.51384 -5.58182 -3.15979 -5.86177 -7.52773 -7.51382 -11.3918 -7.51384 -3.43982 -7.05188 -4.85381 -7.05188 -7.51382 0 ]yshVRWYQA+Calibri-Bold*1 [14 0 0 -14 0 0 ]msf169.591 392.8 mo(34*-5%'6-'-"#$%&'\(\)'+\(&&%+107'*-.8%&%2'9-\(80%25%':"%.,\(-.')[7.41029 7.51244 6.91185 7.51244 6.63737 7.04768 3.16537 3.43843 7.51242 3.16537 7.51245 7.51242 11.3891 7.51242 7.0477 4.97693 3.16537 7.52634 4.4295 3.16537 5.85898 7.52634 4.97693 4.97693 7.0477 5.85898 4.85379 3.43845 6.6304 3.16534 6.91187 7.51242 5.58463 10.4313 7.0477 4.97693 7.04767 7.51242 3.16537 6.71994 7.51242 7.52631 10.4313 3.43842 7.0477 7.51242 6.63739 7.04767 3.16537 7.51242 7.51242 7.0477 5.58466 8.19568 7.52628 7.51245 5.58466 0 ]xsh535.348 392.8 mo(')shgrestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/VRWYPZ+Calibri*1 uf/VRWYPZ+Calibri uf/KVXQMX+Calibri uf/VRWYQA+Calibri-Bold*1 uf/VRWYQA+Calibri-Bold uf/SBVPMX+Calibri-Bold ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
