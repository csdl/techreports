<?xml version="1.0"?>
<table>
<row>
<column>0437415</column>
<column>SoD: A Normative Theory for the Design of Discrete Event Dynamic Systems for Supervisory Control                                                                                    </column>
<column>CNS </column>
<column>ITR-SCIENCE OF DESIGN</column>
<column>April 1, 2005</column>
<column>February 16,  2005</column>
<column>Sreenivas, Ramavarapu</column>
<column>IL</column>
<column>University of Illinois at Urbana-Champaign                      </column>
<column>Standard Grant                               </column>
<column>Anita J. LaSalle                        </column>
<column>March 31,  2008</column>
<column>365091</column>
<column></column>
<column>rsree@uiuc.edu</column>
<column>SUITE A                         </column>
<column>CHAMPAIGN                 </column>
<column>IL</column>
<column>61820</column>
<column>2173332187</column>
<column>CSE </column>
<column>7372</column>
<column>HPCC|9218</column>
<column>0000912 Computer Science                        |</column>
<column>0437415</column>
<column>This project addresses a problem domain related to the design of Discrete Event Dynamic Systems (DEDS). The goal of the project is to identify tractable synthesis of supervisory policies that control those systems. Examples of DEDS include: air-traffic control systems; automated manufacturing systems; computer networks; integrated command, control, communication and information (C3I ) systems; operations-management of multi-component organizations with event-driven dynamics like shipyards, airports, hospitals, etc. Despite the myriad and diverse applications for DEDS, advances in core aspects of supervisory control of DEDS have not found application beyond academia, primarily due to the fact that synthesis procedures require complete specification of the desired behavior of the system, a difficult, if not impossible task. Even when complete specifications are available, the synthesis of the appropriate supervisory policy can be intractable. This project develops a normative theory of how DEDS should be structured so that, starting from a supervisory policy that enforces an incompletely specified behavior, progressive supervisory corrections can be applied such that the (complete) desired specification is eventually enforced.&lt;br&gt;&lt;br&gt;The supervisory policy advocated by this project is based on analysis of observed &quot;desirable&quot; and &quot;undesirable&quot; states of a system. This project focuses on three areas of DEDS: (1) Learning phase: the development of learning algorithms for supervisory systems where desired behavior can be easily earned/identified using examples/counter-examples, (2) Supervisory policy synthesis phase: the identification of DEDS structures where learning is tractable, and (3) Progressive improvement phase: the development of methods for improving learned behavior that can be progressively improved with little computational effort as additional information is made available.&lt;br&gt;&lt;br&gt; The successful resolution of the open research topics related to this project may mean that idiosyncratic problems in each of the examples of DEDS described above (air-traffic bottlenecks, dead-lock/live-lock in automated manufacturing, poor quality of service in networks, poor triage services in the emergency room of a hospital, etc.) could be eliminated.&lt;br&gt;</column>
</row>
<row>
<column>0438786</column>
<column>SoD: A Generative Model of Feature Interactions                                                                                                                                     </column>
<column>CCF </column>
<column>ITR-SCIENCE OF DESIGN</column>
<column>December 15, 2004</column>
<column>December 13,  2004</column>
<column>Batory, Don</column>
<column>TX</column>
<column>University of Texas at Austin                                   </column>
<column>Standard Grant                               </column>
<column>Sol J. Greenspan                        </column>
<column>November 30,  2007</column>
<column>414713</column>
<column></column>
<column>batory@cs.utexas.edu</column>
<column>P.O Box 7726                    </column>
<column>Austin                    </column>
<column>TX</column>
<column>78713</column>
<column>5124716424</column>
<column>CSE </column>
<column>7372</column>
<column>HPCC|9218|7372|1658</column>
<column>0000912 Computer Science                        |</column>
<column>0438786</column>
<column>0438786&lt;br&gt;Don Batory&lt;br&gt;U of Texas Austin&lt;br&gt;&lt;br&gt;A Generative Model of Feature Interactions&lt;br&gt;&lt;br&gt;This research extends work in the area of Generative Programming, which explains how programs in a domain are designed from features. A generative programming model is both constructive and predictive because it tells us how to synthesize programs in a domain with particular properties. A program&apos;s design can be specified as a base program plus a set of features, which are units of program functionality. Programs consisting of features can be formalized mathematically as an algebra with suitable composition operators. Research in generative programming shows that evaluation of algebraic expressions synthesizes the target program, and expression optimization optimizes the program&apos;s design. &lt;br&gt;&lt;br&gt;Feature interaction occurs when one or more features modify or influence another feature. We focus on interactions that are static and structural: how a feature influences (or changes) the source code of another feature. Our research contributes to a Science of Design by showing how feature interactions obey algebraic laws that lead to highly structured programs that are amenable to synthesis, optimization, and evolution. We will demonstrate practical applications of our work: (1) refactoring Java legacy applications into feature-based designs (so that features can be more easily added and removed), and (2) realizing a form of on-demand modularization, where a query specifies a particular concern and our theory tells us how to extract software that satisfies that query.&lt;br&gt;</column>
</row>
<row>
<column>0438806</column>
<column>SoD: Algorithmic Differentiation of Functional Programs                                                                                                                             </column>
<column>CCF </column>
<column>ITR-SCIENCE OF DESIGN</column>
<column>May 1, 2005</column>
<column>February 14,  2005</column>
<column>Siskind, Jeffrey</column>
<column>IN</column>
<column>Purdue University                                               </column>
<column>Standard Grant                               </column>
<column>Sol J. Greenspan                        </column>
<column>April 30,  2008</column>
<column>420000</column>
<column></column>
<column>qobi@purdue.edu</column>
<column>302 Wood Street                 </column>
<column>West Lafayette            </column>
<column>IN</column>
<column>47907</column>
<column>7654944600</column>
<column>CSE </column>
<column>7372</column>
<column>HPCC|9218|1658</column>
<column>0000912 Computer Science                        |</column>
<column>0438806</column>
<column>CCF-0438806&lt;br&gt;Jeffrey Mark Siskind&lt;br&gt;Purdue University&lt;br&gt;Algorithmic Differentiation of Functional Programs&lt;br&gt;&lt;br&gt;&lt;br&gt;Automatic Differentiation (AD) is an established enterprise that seeks to take the derivatives of functions specified as imperative programs through symbolic manipulation rather than finite differencing.  A framework for applying AD techniques to modern functional-programming languages, instead of imperative&lt;br&gt;programs, will be investigated.  This framework will treat AD operators as higher-order functions that map function objects to function objects.  These operators will be compositional and will apply to more general functions than the maps between real vectors to which traditional AD transformations are limited.  This framework offers several advantages:&lt;br&gt;&lt;br&gt;- a callee can perform the necessary AD rather than insisting that callers   provide appropriately transformed functions, making it practical to   compositionally build an efficient library of functions based on derivatives &lt;br&gt;- higher-order derivatives can be constructed naturally, without special   mechanisms&lt;br&gt;- gradients can be taken through processes that themselves involve AD-based   optimization or approximate iterate-to-fixedpoint operators such as PDE   solvers&lt;br&gt;&lt;br&gt;The proposed work will have broad impact in such diverse fields as engineering design, scientific computing, and machine learning, where researchers regularly need to take derivatives of complex programs.  It has intellectual merit as it offers a novel synthesis of the differential calculus with the lambda calculus.&lt;br&gt;</column>
</row>
<row>
<column>0438847</column>
<column>SoD: Language Towers as Design Frameworks                                                                                                                                           </column>
<column>CCF </column>
<column>ITR-SCIENCE OF DESIGN</column>
<column>January 1, 2005</column>
<column>December 21,  2004</column>
<column>Flatt, Matthew</column>
<column>UT</column>
<column>University of Utah                                              </column>
<column>Standard Grant                               </column>
<column>Sol J. Greenspan                        </column>
<column>December 31,  2007</column>
<column>179999</column>
<column></column>
<column>mflatt@cs.utah.edu</column>
<column>75 S 2000 E                     </column>
<column>SALT LAKE CITY            </column>
<column>UT</column>
<column>84112</column>
<column>8015816903</column>
<column>CSE </column>
<column>7372</column>
<column>HPCC|9218|7372|1658</column>
<column>0000912 Computer Science                        |</column>
<column>0438847</column>
<column>Abstract&lt;br&gt;Language Towers as Desigh Frameworks&lt;br&gt;Olin Shivers, Panagiotis Manolios (Georgia Tech)  0438871; &lt;br&gt;Matthew Flatt (University of Utah) 0438847&lt;br&gt;&lt;br&gt;Good notations enable good design: they channel designer effort away from infeasible designs, highlight novel aspects of a specific design, supress inessential detail, and enable both human and automated reasoning about the artifact being described. Unfortunately, a tremendous amount of labor is required at the meta-design level to implement the tool suites supporting design in a new, extended, or domains-specific notation. This labor overhead means it is not practical for most designers and engineers to incorporate notation design, or meta-design, into their design methodology.&lt;br&gt;&lt;br&gt;This research explores developing the meta-tools to allow the development of specialized notations, allowing designers to better express and reason about their artifacts. The focus of the research is on enabling design-time reasoning---what the programming-language community refers to as &quot;static semantics&quot;---of the designed artifact.&lt;br&gt;&lt;br&gt;The resulting framework allows the construction of &quot;language towers,&quot; that is, notations defined at varying levels of abstraction, linked by procedurally-encoded static semantics (analyses) and dynamic semantics (translations) between the levels of the tower.  While the work has its origin in the research underlying the Scheme macro system, it is intended to be applied to language frameworks that have much greater static-semantic content.&lt;br&gt;&lt;br&gt;&lt;br&gt;</column>
</row>
<row>
<column>0438866</column>
<column>SoD: Data and Meta-Data Integration Maintenance                                                                                                                                     </column>
<column>IIS </column>
<column>|ITR-SCIENCE OF DESIGN</column>
<column>January 1, 2005</column>
<column>August 4,  2006</column>
<column>Getoor, Lise</column>
<column>MD</column>
<column>University of Maryland College Park                             </column>
<column>Standard Grant                               </column>
<column>Ephraim P. Glinert                      </column>
<column>December 31,  2007</column>
<column>610200</column>
<column></column>
<column>getoor@cs.umd.edu</column>
<column>3112 LEE BLDG                   </column>
<column>COLLEGE PARK              </column>
<column>MD</column>
<column>20742</column>
<column>3014056269</column>
<column>CSE </column>
<column>T510|7372</column>
<column>HPCC|9218|9216|1658</column>
<column>0000912 Computer Science                        |</column>
<column>0438866</column>
<column>This research project focuses on developing a data integration and transformation process that supports maintainability, adaptability, and evolution. Data integration systems are software systems that permit the transformation, integration, and exchange of structured data that has been designed and developed independently. The often subtle and complex interdependencies within data can make the creation, maintenance, and use of such systems quite challenging. The PI, with the collaborator Renee Miller (University of Toronto) have available a robust arsenal of tools and mechanisms for reconciling semantic differences in how data is represented including views, mappings, and transformation languages. The major focus is on the maintenance of the metadata necessary to achieve semantic integration and sharing of data. This project develops an integration and transformation process that is designed for evolution. The research will develop a new theory of metadata discovery and adaptation based on modern statistical learning and a new theory of the data integration process, that supports not only automation, but also maintainability, adaptability and evolution. The major contribution of this research will be the development of a design process that supports robust data sharing, an crucial aspect in the  Science of Design. As part of the broader impacts of this work, the expected results will contribute to an enhanced infrastructure for research by developing a benchmark for schema and mapping discovery and management tasks. The research results and the benchmark that will be accessible on the project Web site (http:/www.cs.umd.edu/~getoor/sod) to facilitate dissemination of knowledge and tools to a variety of scientific communities. The methods developed in this project will be of particular value to scientists who routinely need to gather, manage, and integrate diverse data sets. The researchers also plan to partner with industry collaborators in order to learn from and address industry needs, receive feedback, and facilitate technology transfer.</column>
</row>
<row>
<column>0438871</column>
<column>SoD: Collaborative: Language towers as design frameworks                                                                                                                            </column>
<column>CCF </column>
<column>ITR-SCIENCE OF DESIGN</column>
<column>January 1, 2005</column>
<column>December 21,  2004</column>
<column>Shivers, Olin</column>
<column>GA</column>
<column>Georgia Tech Research Corporation - GA Institute of Technology  </column>
<column>Standard Grant                               </column>
<column>Sol J. Greenspan                        </column>
<column>December 31,  2007</column>
<column>450000</column>
<column>Panagiotis      Manolios                |</column>
<column>shivers@cc.gatech.edu</column>
<column>Office of Sponsored Programs    </column>
<column>Atlanta                   </column>
<column>GA</column>
<column>30332</column>
<column>4043850866</column>
<column>CSE </column>
<column>7372</column>
<column>HPCC|9218|7372|1658</column>
<column>0000912 Computer Science                        |</column>
<column>0438871</column>
<column>Abstract&lt;br&gt;Language Towers as Desigh Frameworks&lt;br&gt;Olin Shivers, Panagiotis Manolios (Georgia Tech)  0438871; &lt;br&gt;Matthew Flatt (University of Utah) 0438847&lt;br&gt;&lt;br&gt;Good notations enable good design: they channel designer effort away from infeasible designs, highlight novel aspects of a specific design, supress inessential detail, and enable both human and automated reasoning about the artifact being described. Unfortunately, a tremendous amount of labor is required at the meta-design level to implement the tool suites supporting design in a new, extended, or domains-specific notation. This labor overhead means it is not practical for most designers and engineers to incorporate notation design, or meta-design, into their design methodology.&lt;br&gt;&lt;br&gt;This research explores developing the meta-tools to allow the development of specialized notations, allowing designers to better express and reason about their artifacts. The focus of the research is on enabling design-time reasoning---what the programming-language community refers to as &quot;static semantics&quot;---of the designed artifact.&lt;br&gt;&lt;br&gt;The resulting framework allows the construction of &quot;language towers,&quot; that is, notations defined at varying levels of abstraction, linked by procedurally-encoded static semantics (analyses) and dynamic semantics (translations) between the levels of the tower.  While the work has its origin in the research underlying the Scheme macro system, it is intended to be applied to language frameworks that have much greater static-semantic content.&lt;br&gt;&lt;br&gt;&lt;br&gt;</column>
</row>
<row>
<column>0438887</column>
<column>SoD: Design Exploration -- Supporting A Design Process for Engaging Users                                                                                                           </column>
<column>IIS </column>
<column>ITR-SCIENCE OF DESIGN</column>
<column>February 1, 2005</column>
<column>January 26,  2005</column>
<column>Shipman, Frank</column>
<column>TX</column>
<column>Texas Engineering Experiment Station                            </column>
<column>Standard Grant                               </column>
<column>Ephraim P. Glinert                      </column>
<column>January 31,  2008</column>
<column>475000</column>
<column></column>
<column>shipman@cs.tamu.edu</column>
<column>TEES State Headquarters Bldg.   </column>
<column>College Station           </column>
<column>TX</column>
<column>77843</column>
<column>9798621696</column>
<column>CSE </column>
<column>7372</column>
<column>HPCC|9218|1658</column>
<column>0000912 Computer Science                        |0116000 Human Subjects                          |</column>
<column>0438887</column>
<column>This project builds tools supporting user expression and the collection and use of this information by software designers. The design exploration process provides users and other stakeholders a construction kit where they create annotated partial designs. A design repository collects partial designs and performs automatic analysis, including textual analysis of annotations and spatial analysis of graphical designs, to help identify interesting examples and patterns within the collection. Finally, an exploration interface is provided to software designers that provides for searching and browsing within the collection in order to better understand the task domain and user expectations and work practices. The design repository includes algorithms combining the analysis of text and the analysis of graphical layouts to index, cluster, and associate the user responses. Based on these results the exploration interface provides a variety of search and navigation features to the software designer. This approach leaves the software designer in control of deciding what to see and when to see it but supports these decisions. Additionally, combining search and browse options allows for a variety of work practices based on the software designers&apos; understanding of the collection, their prior access to associated/related items, the focus of their current activity, and their preferences. This combination is prevalent today on the Web. The results of this project will have an impact on the design process by enabling the inclusion of a greater number of users and stakeholders in design and will facilitate communication about different perspectives on issues surrounding the design of software. The project Web site (http://www.csdl.tamu.edu/DesignExploration/) will be used to disseminate the research results, including the tools developed in this project that will be freely distributed for use in software development efforts.</column>
</row>
<row>
<column>0438897</column>
<column>SoD Collaborative Research:  Constraint-based Architecture Evaluation                                                                                                               </column>
<column>IIS </column>
<column>ITR-SCIENCE OF DESIGN</column>
<column>March 1, 2005</column>
<column>March 1,  2005</column>
<column>Jackson, Daniel</column>
<column>MA</column>
<column>Massachusetts Institute of Technology                           </column>
<column>Standard Grant                               </column>
<column>Ephraim P. Glinert                      </column>
<column>February 28,  2009</column>
<column>250000</column>
<column></column>
<column>dnj@csail.mit.edu</column>
<column>77 MASSACHUSETTS AVE            </column>
<column>Cambridge                 </column>
<column>MA</column>
<column>02139</column>
<column>6172531000</column>
<column>CSE </column>
<column>7372</column>
<column>HPCC|9218|1658</column>
<column>0000912 Computer Science                        |</column>
<column>0438897</column>
<column>This is a collaborative research project including Dewayne Perry, James Brown and Sarfraz Khurshid at the University of Texas at Austin (award # 0438967), and Daniel Jackson at the Massachusetts Institute of Technology (award # 0438897). The aim of this project is to develop new languages, methods, analyses and tools for &apos;prescriptive&apos; software architecture descriptions, to help the designers of complex software systems express and explore their architectural commitments prior to implementation, and to support families of systems that share architectural features. &lt;br&gt;&lt;br&gt;Two underpinning technologies are used: Jackson&apos;s Alloy constraint language and analyzer, and Browne&apos;s compositional compiler. Alloy&apos;s underlying logic is expanded, new analysis capabilities are added, and the Alloy system is packaged as a software component.  The compositional compiler is extended to utilize constraints and property specifications in order to support both constraint and performance analyses.  On the basis of these technologies, an abstract model of software architecture is created, an architecture constraint specification language is defined, the rules of composition and evaluation are defined, and an integrated tool suite for constraint-based architectural evaluation is constructed.  The research is evaluated first by simple specific examples and then with realistic case studies, revising and extending the research as needed to satisfy the overall evaluation goals.&lt;br&gt;&lt;br&gt;The results of this project will have a significant and broad impact in terms architectural research, architecture education and architecture support technology.  Further, it is expected that the technology will enable deeper understandings of design trade-offs, will improve design quality, and will significantly improve the component composition process. The project Web site (http://www.ece.utexas.edu/~perry/work/projects/nsf-cbae/) will provide access to the resulting techniques and tools.&lt;br&gt;</column>
</row>
<row>
<column>0438909</column>
<column>SoD: Incremental Design of Complex Information Systems                                                                                                                              </column>
<column>IIS </column>
<column>ITR-SCIENCE OF DESIGN</column>
<column>January 1, 2005</column>
<column>December 8,  2004</column>
<column>Jagadish, H.</column>
<column>MI</column>
<column>University of Michigan Ann Arbor                                </column>
<column>Standard Grant                               </column>
<column>Ephraim P. Glinert                      </column>
<column>December 31,  2007</column>
<column>600000</column>
<column></column>
<column>jag@eecs.umich.edu</column>
<column>3003 South State St.            </column>
<column>Ann Arbor                 </column>
<column>MI</column>
<column>48109</column>
<column>7347641817</column>
<column>CSE </column>
<column>7372</column>
<column>HPCC|9218|1658</column>
<column>0000912 Computer Science                        |</column>
<column>0438909</column>
<column>Often today, the tools used to design a small personal database are as complex as the tools used to design enterprise-size information systems. This challenges the human ability to deal effectively with the complex structures employed in these tools. In addition, as the world gets increasingly networked, we find it possible and desirable to access, and integrate information from multiple autonomously created data stores. Even if each of these data stores individually is simple, the entire collection may be very complex. Finally, information stores persist over time, and our needs change over this period. In consequence, the stores need to evolve with time, as do our queries of them. Information systems must be designed to adapt to this change. &lt;br&gt;&lt;br&gt;This project develops techniques for the incremental design of XML-based information systems. Techniques are developed for the hierarchical decomposition of schemas and through this, resolution of multiple incomplete schema specifications considered as &quot;views&quot; of related information contexts. Automated techniques are also developed for mapping these into XML schema that are both suited for efficient query processing as well as being normalized to satisfy known functional dependencies and avoid update anomalies. &lt;br&gt;&lt;br&gt;This project develops a formal conceptual basis for the design of complex heterogeneous information systems. It also develops incremental techniques to deal with evolutionary change over time, as well as with the merger (and loss) of data stores. If successful, this project will greatly reduce the human effort involved in the design and maintenance of information stores, particularly for designers and users of information systems who may not be familiar with the underlying technical details, such as domain experts who are interested in bringing together information from many heterogeneous information sources and whose information needs change rapidly. The likelihood of such impact will be maximized by working closely with a group of biologists who will serve as local users of the technology and provide feedback. The project Web site http://www.eecs.umich.edu/~jag/design/ will be used to disseminate the results, including software tools created in this project that we will make available free of charge for academic use.&lt;br&gt;</column>
</row>
<row>
<column>0438923</column>
<column>SoD: Collaborative Research: Flexible High Quality Design for Software Intensive Systems                                                                                            </column>
<column>CCF </column>
<column>ITR-SCIENCE OF DESIGN</column>
<column>February 1, 2005</column>
<column>February 16,  2005</column>
<column>Carver, Jeffrey</column>
<column>MS</column>
<column>Mississippi State University                                    </column>
<column>Standard Grant                               </column>
<column>Sol J. Greenspan                        </column>
<column>January 31,  2009</column>
<column>215000</column>
<column></column>
<column>carver@cse.msstate.edu</column>
<column>PO Box 6156                     </column>
<column>Mississippi State         </column>
<column>MS</column>
<column>39762</column>
<column>6623257404</column>
<column>CSE </column>
<column>7372</column>
<column>HPCC|9218|7372|1658</column>
<column>0000912 Computer Science                        |</column>
<column>0438923</column>
<column>ABSTRACT&lt;br&gt;0438923&lt;br&gt;PI: Jeff, Carver    Victor R. Basili&lt;br&gt;&lt;br&gt;SoD: Flexible High Quality Design for Software Intensive Systems&lt;br&gt;&lt;br&gt;Responding to late software changes is one of the key areas of risk in software development, but is often unavoidable. The major way to deal with the problem is during software design, making the architecture flexible, which is too often not achieved.  This research addresses this problem by studying the relationship between changes and software architecture. The project involves the mining of existing change and defect data&lt;br&gt;from our collaborators to formulate representative taxonomies of changes, and defects, and to understand how effective various QA strategies are for dealing with them, running of classroom studies to test specific hypotheses resulting from the data mining, and the analysis of the changes and defects encountered on industrial projects; recommendation of a suite of QA strategies for the expected defect profile; and controlled observation of the effectiveness of recommendations.&lt;br&gt;&lt;br&gt;The research will contribute to Science of Design by producing a model that allows software developers to reason about proposed changes and their impact on system quality; a method for evaluating technique composability; increased understanding of the relations between faults, changes and architecture; and increased understanding of the relationship between design process and the quality of the &lt;br&gt;</column>
</row>
<row>
<column>0438929</column>
<column>SoD:  Early Predictive Design Evaluation for Software                                                                                                                               </column>
<column>CCF </column>
<column>ITR-SCIENCE OF DESIGN</column>
<column>December 15, 2004</column>
<column>December 7,  2004</column>
<column>Shaw, Mary</column>
<column>PA</column>
<column>Carnegie-Mellon University                                      </column>
<column>Standard Grant                               </column>
<column>Sol J. Greenspan                        </column>
<column>November 30,  2007</column>
<column>660000</column>
<column>Ashish          Arora                   |Shawn           Butler                  |</column>
<column>mary.shaw@cs.cmu.edu</column>
<column>5000 Forbes Avenue              </column>
<column>PITTSBURGH                </column>
<column>PA</column>
<column>15213</column>
<column>4122688746</column>
<column>CSE </column>
<column>7372</column>
<column>HPCC|9218|7372|1658</column>
<column>0000912 Computer Science                        |</column>
<column>0438929</column>
<column>ABSTRACT&lt;br&gt;0438929&lt;br&gt;Mary Shaw, Ashish Arora, Shawn Butler&lt;br&gt;CMU&lt;br&gt;&lt;br&gt;Early Predictive Design Evaluation for Software&lt;br&gt;&lt;br&gt;This research seeks to establish a scientific basis for analyzing designs of software-intensive systems when the code implementing the designs is unavailable. This is the situation early in system design, when decisions that profoundly affect the implementation must be made; these decisions are much easier and cheaper to change during early design than after implementation has yielded running code. By substantially improving the ability of software designers to predict properties of an implementation without actually inspecting the code, this work enables designers to understand better the consequences of early design decisions and facilitates comparison of design alternatives to a degree not currently possible.&lt;br&gt;The common thread of the analysis techniques developed through this research is prediction of properties an implementation, to determine the value of the design to a client with a particular set of preferences. The techniques draw on models from economics to account for the uncertainties associated with prediction and future user needs. Predictive analysis techniques for two specific tasks are being developed: dynamic reconfiguration of mobile device application suites to satisfy changing user needs and defect profile prediction for future releases of multi-release systems. Further, the research explores a unified framework for predictive evaluations of this type&lt;br&gt;&lt;br&gt;</column>
</row>
<row>
<column>0438931</column>
<column>SoD: Value-Based Science of Design                                                                                                                                                  </column>
<column>CCF </column>
<column>ITR-SCIENCE OF DESIGN</column>
<column>December 15, 2004</column>
<column>December 6,  2004</column>
<column>Boehm, Barry</column>
<column>CA</column>
<column>University of Southern California                               </column>
<column>Standard Grant                               </column>
<column>Sol J. Greenspan                        </column>
<column>November 30,  2007</column>
<column>400000</column>
<column>Nenad           Medvidovic              |Raymond         Madachy                 |</column>
<column>boehm@sunset.usc.edu</column>
<column>University Park                 </column>
<column>Los Angeles               </column>
<column>CA</column>
<column>90089</column>
<column>2137407762</column>
<column>CSE </column>
<column>7372</column>
<column>HPCC|9218|1658</column>
<column>0000912 Computer Science                        |</column>
<column>0438931</column>
<column>ABSTRACT&lt;br&gt;0438931&lt;br&gt;Barry W. Boehm&lt;br&gt;U of Southern California&lt;br&gt;&lt;br&gt;Title: Value-Based Science of Design&lt;br&gt;&lt;br&gt;The grant&apos;s research objectives are to develop the foundations for a science of value-based design of software-intensive systems.  It is based on the PI&apos;s stakeholder win-win Theory W, which emphasizes that &quot;value&quot; includes not only monetary factors, but also any non-monetary factors that strongly motivate or demotivate a project or organization&apos;s success-critical stakeholders.&lt;br&gt;&lt;br&gt;Phase I of the research will use value considerations to parse and better understand the design space.  It will focus on two areas, COTS-based design and design to achieve quality attributes.  Phase I will also consider other areas such as transformational design, modular and agile design, and cost/schedule constrained design.&lt;br&gt;&lt;br&gt;Phase II will test the hypotheses formulated in Phase I by experimentally applying, evaluating, and iterating value-based design capabilities in two areas -- COTS-based design and design to achieve quality attributes -- using both small and large project testbeds.&lt;br&gt;&lt;br&gt;Phase III will develop working abstractions and composability relations based on Phase II results.  The abstractions will include composable process patterns for value-based software design, tested for composability across the focus areas.&lt;br&gt;&lt;br&gt;Research benefits will include a tested framework with principles, processes, methods, and tools for better performing value-based software design.&lt;br&gt;</column>
</row>
<row>
<column>0438933</column>
<column>SoD: Collaborative Research: Flexible High Quality Design for Software Intensive Systems                                                                                            </column>
<column>CCF </column>
<column>ITR-SCIENCE OF DESIGN</column>
<column>February 1, 2005</column>
<column>February 16,  2005</column>
<column>Basili, Victor</column>
<column>MD</column>
<column>University of Maryland College Park                             </column>
<column>Standard Grant                               </column>
<column>Sol J. Greenspan                        </column>
<column>January 31,  2009</column>
<column>850000</column>
<column></column>
<column>basili@cs.umd.edu</column>
<column>3112 LEE BLDG                   </column>
<column>COLLEGE PARK              </column>
<column>MD</column>
<column>20742</column>
<column>3014056269</column>
<column>CSE </column>
<column>7372</column>
<column>HPCC|9218|7372|1658</column>
<column>0000912 Computer Science                        |</column>
<column>0438933</column>
<column>ABSTRACT&lt;br&gt;0438933&lt;br&gt;PI: Victor R. Basili, Jeff Carver&lt;br&gt;&lt;br&gt;SoD: Flexible High Quality Design for Software Intensive Systems&lt;br&gt;&lt;br&gt;Responding to late software changes is one of the key areas of risk in software development, but is often unavoidable. The major way to deal with the problem is during software design, making the architecture flexible, which is too often not achieved.  This research addresses this problem by studying the relationship between changes and software architecture. The project involves the mining of existing change and defect data&lt;br&gt;from our collaborators to formulate representative taxonomies of changes, and defects, and to understand how effective various QA strategies are for dealing with them, running of classroom studies to test specific hypotheses resulting from the data mining, and the analysis of the changes and defects encountered on industrial projects; recommendation of a suite of QA strategies for the expected defect profile; and controlled observation of the effectiveness of recommendations.&lt;br&gt;&lt;br&gt;The research will contribute to Science of Design by producing a model that allows software developers to reason about proposed changes and their impact on system quality; a method for evaluating technique composability; increased understanding of the relations between faults, changes and architecture; and increased understanding of the relationship between design process and the quality of the resulting product.&lt;br&gt; </column>
</row>
<row>
<column>0438967</column>
<column>SoD Collaborative Research: Constraint-based Architecture Evaluation                                                                                                                </column>
<column>IIS </column>
<column>ITR-SCIENCE OF DESIGN</column>
<column>March 1, 2005</column>
<column>April 20,  2006</column>
<column>Perry, Dewayne</column>
<column>TX</column>
<column>University of Texas at Austin                                   </column>
<column>Standard Grant                               </column>
<column>Ephraim P. Glinert                      </column>
<column>February 28,  2009</column>
<column>762000</column>
<column>James           Browne                  |Sarfraz         Khurshid                |</column>
<column>perry@ece.utexas.edu</column>
<column>P.O Box 7726                    </column>
<column>Austin                    </column>
<column>TX</column>
<column>78713</column>
<column>5124716424</column>
<column>CSE </column>
<column>7372</column>
<column>SMET|HPCC|9251|9218|9178|1658</column>
<column>0000912 Computer Science                        |0104000 Information Systems                     |</column>
<column>0438967</column>
<column>This is a collaborative research project including Dewayne Perry, James Brown and Sarfraz Khurshid at the University of Texas at Austin (award # 0438967), and Daniel Jackson at the Massachusetts Institute of Technology (award # 0438897). The aim of this project is to develop new languages, methods, analyses and tools for &apos;prescriptive&apos; software architecture descriptions, to help the designers of complex software systems express and explore their architectural commitments prior to implementation, and to support families of systems that share architectural features. &lt;br&gt;&lt;br&gt;Two underpinning technologies are used: Jackson&apos;s Alloy constraint language and analyzer, and Browne&apos;s compositional compiler. Alloy&apos;s underlying logic is expanded, new analysis capabilities are added, and the Alloy system is packaged as a software component.  The compositional compiler is extended to utilize constraints and property specifications in order to support both constraint and performance analyses.  On the basis of these technologies, an abstract model of software architecture is created, an architecture constraint specification language is defined, the rules of composition and evaluation are defined, and an integrated tool suite for constraint-based architectural evaluation is constructed.  The research is evaluated first by simple specific examples and then with realistic case studies, revising and extending the research as needed to satisfy the overall evaluation goals.&lt;br&gt;&lt;br&gt;The results of this project will have a significant and broad impact in terms architectural research, architecture education and architecture support technology.  Further, it is expected that the technology will enable deeper understandings of design trade-offs, will improve design quality, and will significantly improve the component composition process. The project Web site (http://www.ece.utexas.edu/~perry/work/projects/nsf-cbae/) will provide access to the resulting techniques and tools.&lt;br&gt;</column>
</row>
<row>
<column>0438970</column>
<column>SoD: Design of Incremental Change                                                                                                                                                   </column>
<column>CCF </column>
<column>ITR-SCIENCE OF DESIGN</column>
<column>April 15, 2005</column>
<column>April 15,  2005</column>
<column>Rajlich, Vaclav</column>
<column>MI</column>
<column>Wayne State University                                          </column>
<column>Standard Grant                               </column>
<column>Sol J. Greenspan                        </column>
<column>March 31,  2008</column>
<column>380000</column>
<column>Sorin           Draghici                |Andrian         Marcus                  |</column>
<column>rajlich@cs.wayne.edu</column>
<column>5057 Woodward                   </column>
<column>Detroit                   </column>
<column>MI</column>
<column>48202</column>
<column>3135772424</column>
<column>CSE </column>
<column>7372</column>
<column>HPCC|9218|7372|1658</column>
<column>0000912 Computer Science                        |</column>
<column>0438970</column>
<column>0438970&lt;br&gt;PI:  Vaclav Rajlich&lt;br&gt;Wayne State University&lt;br&gt;&lt;br&gt;Design of Incremental Change&lt;br&gt;&lt;br&gt;Incremental change (IC) is at the core of many software engineering processes, including maintenance, iterative development, iterative enhancement, agile development, software evolution, and so forth. Design &lt;br&gt;of IC assesses IC alternatives and helps prevent the software decay.  This research addresses design of IC in a novel way through combination of classical static program analysis and information retrieval. This &lt;br&gt;proposal builds on and brings together existing results from program analysis, information retrieval, classical object oriented design, and case studies of IC in order to explore techniques for IC design. It &lt;br&gt;involves validation of the proposed techniques through case studies on the evolution of a large and widely-used academic bioinformatics software system. The research will contribute to the Science of Design by producing design techniques for proposed IC of existing software and by obtaining new insights into the IC design. It will contribute directly to the improvement of software quality and to the reduction of software maintenance costs. It will build a software engineering foundation for the emerging agile development processes.&lt;br&gt;</column>
</row>
<row>
<column>0438996</column>
<column>SoD: Designing Architectures for Networked Applications: A REST-ful Approach                                                                                                        </column>
<column>CNS </column>
<column>ITR-SCIENCE OF DESIGN</column>
<column>February 15, 2005</column>
<column>February 16,  2005</column>
<column>Taylor, Richard</column>
<column>CA</column>
<column>University of California-Irvine                                 </column>
<column>Standard Grant                               </column>
<column>Anita J. LaSalle                        </column>
<column>January 31,  2009</column>
<column>775000</column>
<column></column>
<column>taylor@ics.uci.edu</column>
<column>4199 Campus Dr Ste 300          </column>
<column>IRVINE                    </column>
<column>CA</column>
<column>92697</column>
<column>9498244768</column>
<column>CSE </column>
<column>7372</column>
<column>HPCC|9218</column>
<column>0000912 Computer Science                        |</column>
<column>0438996</column>
<column>The success of the World Wide Web has motivated many designers to examine and adopt the architectural style underlying the Web&apos;s interactions.  This style, REpresentational State Transfer, or REST, excels at providing design guidance on how components (or nodes) should interact. REST provides little direct guidance, however, on how these nodes should be constructed.  Without the necessary direction, designers frequently violate critical constraints of the REST style, such as stateless interactions and the critical resource/representation abstraction, when building their applications.  The negative effects of these violations may only come into focus after application deployment.&lt;br&gt;&lt;br&gt;The initial focus of this research project, therefore, is on identifying and articulating teachable principles, practices, and supporting tools that enable the systematic and effective application of proven architectural styles, beginning with REST.  The research broadens from this base to identify and provide design principles, architectural styles, and tools applicable to a wide category of decentralized and distributed applications. Through increasing levels of community involvement and assessment, particularly involving open-source software projects, this research enables a broad set of developers to effectively employ key design practices.&lt;br&gt;</column>
</row>
<row>
<column>0439017</column>
<column>SoD: Synthesizing Device Drivers                                                                                                                                                    </column>
<column>CCF </column>
<column>ITR-SCIENCE OF DESIGN</column>
<column>December 15, 2004</column>
<column>August 11,  2005</column>
<column>Taha, Walid</column>
<column>TX</column>
<column>William Marsh Rice University                                   </column>
<column>Standard Grant                               </column>
<column>Sol J. Greenspan                        </column>
<column>November 30,  2007</column>
<column>512000</column>
<column>Robert          Cartwright              |</column>
<column>taha@cs.rice.edu</column>
<column>6100 MAIN ST                    </column>
<column>HOUSTON                   </column>
<column>TX</column>
<column>77005</column>
<column>7133484820</column>
<column>CSE </column>
<column>7372</column>
<column>HPCC|9251|9218|7372|1658</column>
<column>0000912 Computer Science                        |</column>
<column>0439017</column>
<column>Abstract&lt;br&gt;0439017&lt;br&gt;Walid M. Taha&lt;br&gt;William Marsh Rice University&lt;br&gt;&lt;br&gt;SoD: Synthiszizing Device Drivers&lt;br&gt;&lt;br&gt;The goal of this project is develop a framework for designing software-intensive systems based on recent work on multi-stage programming languages.  Our thesis is that the concept of staging, originally developed to support program optimization, is a fundamental technique in the emerging science of design of software-intensive systems.  We believe that many software-intensive systems can be designed more effectively using a linguistic framework that reflects the staging distinctions separating high-level software designs from their implementations on particular platforms.&lt;br&gt;&lt;br&gt;In earlier work, we helped develop the conceptual foundations of multi-stage programming including the construction of core calculi and type systems that support staging and the development of a realistic language incorporating staging called MetaOCaml.  In this project, we intend to show how staging can be used to improve the process of designing software in industry where the phase distinction between program designs and deployed implementations is acute.  We will focus on the design of device drivers because the deployed code for controlling a device varies greatly depending on the vagaries of the device interface and the hardware platform to which it is attached. In this context, we must extend staging techniques to handle event-driven computation, concurrency, and strict limitations on resources.&lt;br&gt;&lt;br&gt;</column>
</row>
<row>
<column>0607934</column>
<column>SoD: Enabling Design Strategies for Single Chip Heterogeneous Multiprocessors                                                                                                       </column>
<column>CCF </column>
<column>ITR-SCIENCE OF DESIGN</column>
<column>December 15, 2005</column>
<column>December 19,  2005</column>
<column>Paul, JoAnn</column>
<column>VA</column>
<column>Virginia Polytechnic Institute and State University             </column>
<column>Standard Grant                               </column>
<column>Sol J. Greenspan                        </column>
<column>November 30,  2008</column>
<column>500000</column>
<column></column>
<column>jmpaul@vt.edu</column>
<column>460 Turner Street               </column>
<column>BLACKSBURG                </column>
<column>VA</column>
<column>24060</column>
<column>5402315281</column>
<column>CSE </column>
<column>7372</column>
<column>HPCC|9218|7372|1658</column>
<column></column>
<column>0607934</column>
<column>Abstract&lt;br&gt;0438948&lt;br&gt;Paul, JoAnn M. &lt;br&gt;CMU&lt;br&gt;&lt;br&gt;SoD: Enabling Design Strategies for Single Chip Heterogeneous Multiprocessors&lt;br&gt;&lt;br&gt;Within the next ten years, it will be possible to provide enough transistors on a single chip for on the order of a hundred 32-bit RISC processors. The design of these emergent, software-intensive single chip heterogeneous multiprocessor (SCHM)  computer systems precludes the possibility of seat-of-the-pants analysis or specify-and-synthesize methodologies. No science of design has been developed for mixed hardware/software single chip multiprocessing systems.  Strategic computer system organization - requires a creative proces that can not be automateds,and thus this designer creativity must be facilitated at the system level.  The full vision of this research is to develop the science needed to enable future design systems to break away from the specify-and-synthesize mind set of current CAD tools to become a characterize-and-invent paradigm that still has ties into the current lower level integrated circuit design methodology flows. Another major theme behind our research is that computer system designers start from trend analyses, looking for future cross-over points between anticipated changes in the major features of applications sets and the physical capabilities of the major architectural features of the systems that carry them out. From these, design strategies are invented which can become basic organizing themes for entire classes of programmable systems.&lt;br&gt;&lt;br&gt;</column>
</row>
<row>
<column>0609612</column>
<column>SoD: Design Locality: A Concept for Controlling the Design Complexity of Large Software Systems                                                                                     </column>
<column>CCF </column>
<column>ITR-SCIENCE OF DESIGN</column>
<column>August 31, 2005</column>
<column>January 19,  2006</column>
<column>Lorenz, David</column>
<column>VA</column>
<column>University of Virginia Main Campus                              </column>
<column>Standard Grant                               </column>
<column>Sol J. Greenspan                        </column>
<column>November 30,  2007</column>
<column>359352</column>
<column></column>
<column>lorenz@cs.virginia.edu</column>
<column>P.O.  BOX 400195                </column>
<column>CHARLOTTESVILLE           </column>
<column>VA</column>
<column>22904</column>
<column>4349244270</column>
<column>CSE </column>
<column>7372</column>
<column>HPCC|9218|7372|1658</column>
<column>0000912 Computer Science                        |</column>
<column>0609612</column>
<column>ABSTRACT&lt;br&gt;0438971&lt;br&gt;PI: David H. Lorenz&lt;br&gt;Co-PI&apos;s: Paul C. Attie, Dana H. Brooks&lt;br&gt;Northeastern University&lt;br&gt;&lt;br&gt;SoD: Design Locality: A Concept for Controlling the Design Complexity of Large Software Systems&lt;br&gt;&lt;br&gt;Large software systems are extremely difficult to design correctly.  This difficulty stems largely from the exponential number of ways in which components can interact.  This project&apos;s objective is to develop a design methodology for constraining interaction in large complex software systems. The central idea is design locality: synthesis, verification and analysis are applied to small subsystems; local properties are verified for subsystems in isolation and then combined to deduce global properties.&lt;br&gt;&lt;br&gt;Our approach is ``design for verifiability&apos;&apos;: design a large system so that verification is tractable.  A mixed methodology will be developed: top-down for design, bottom-up for analysis and verification.  A well-designed system can be decomposed top-down into small subsystems while its global properties follow bottom-up from subsystem properties.&lt;br&gt; &lt;br&gt;A goal is systems representation in &quot;pairwise normal form&quot;: code that synchronizes a pair of components is cleanly separated from code that synchronizes other (even overlapping) pairs.  Pairwise composition is a separation of concerns solution that facilitates modularity, modifiability, and maintenance, applicable to component assembly. Our test cases are aspect-oriented programming and the SCIRun software, which builds dataflow networks of components for integrated and interactive scientific computation and visualization.&lt;br&gt;&lt;br&gt;</column>
</row>
<row>
<column>0613162</column>
<column>Sod-HCER: Designing the Undesignable                                                                                                                                                </column>
<column>CCF </column>
<column>ITR-SCIENCE OF DESIGN</column>
<column>August 15, 2006</column>
<column>August 4,  2006</column>
<column>Reiss, Steven</column>
<column>RI</column>
<column>Brown University                                                </column>
<column>Standard Grant                               </column>
<column>Sol J. Greenspan                        </column>
<column>July 31,  2008</column>
<column>224093</column>
<column></column>
<column>spr@cs.brown.edu</column>
<column>BOX 1929                        </column>
<column>Providence                </column>
<column>RI</column>
<column>02912</column>
<column>4018632777</column>
<column>CSE </column>
<column>7372</column>
<column>HPCC|9218|9150|7372</column>
<column>0000912 Computer Science                        |</column>
<column>0613162</column>
<column>0613162&lt;br&gt;Steven P. Reiss&lt;br&gt;Brown University&lt;br&gt;&lt;br&gt;Designing the Undesignable&lt;br&gt;&lt;br&gt;Software design involves designing the undesignable.  It differs from other forms of design in that software design is expected to meet a set of constraints that changes dynamically and faster than the software can adapt.&lt;br&gt;Moreover, future trends in software development will force developers to design systems that are out of their control. This research investigates whether a component model that includes the semantics of a component as part of its interface can address these problems of software design. Semantics is used here in the broad sense to include the functionality of the component, security and privacy constraints imposed on or by the component, a recovery model, and an economic model for choosing components. The research involves  exploring ways of defining and checking such semantic specifications against component implementations and the use of such specifications as a new design metaphor.  If successful, this approach promises to let developers control software design and get a handle on many of the problems that plague the evolution of modern software.</column>
</row>
<row>
<column>0613550</column>
<column>SoD-TEAM:  Problem-Solving Methodology in Collaborative Design                                                                                                                      </column>
<column>CNS </column>
<column>ITR-SCIENCE OF DESIGN</column>
<column>August 15, 2006</column>
<column>August 7,  2006</column>
<column>Tanimoto, Steven</column>
<column>WA</column>
<column>University of Washington                                        </column>
<column>Standard Grant                               </column>
<column>Anita J. LaSalle                        </column>
<column>July 31,  2010</column>
<column>449642</column>
<column>William         Winn                    |</column>
<column>tanimoto@cs.washington.edu</column>
<column>1100 NE 45th St, Suite 300      </column>
<column>SEATTLE                   </column>
<column>WA</column>
<column>98105</column>
<column>2065434043</column>
<column>CSE </column>
<column>7372</column>
<column>HPCC|9216|7372</column>
<column>0000912 Computer Science                        |</column>
<column>0613550</column>
<column>Directorate for Computer and Information Science and Engineering (CISE)&lt;br&gt;Division Computer and Network Systems (CNS)&lt;br&gt;Science of Design (SoD) Program&lt;br&gt;&lt;br&gt;Proposal Number:	0613550	&lt;br&gt;P/I:			Steven Tanimoto	&lt;br&gt;PI&apos;s Department:	Computer Science and Engineering	&lt;br&gt;Institution:		University of Washington&lt;br&gt;Award: 		$ 449,642&lt;br&gt;&lt;br&gt;Title: 			&quot;SoD-TEAM: Problem-Solving Methodology in Collaborative Design&quot;&lt;br&gt;&lt;br&gt;This project focuses on software tools that facilitate collaboration among members of a design team. The project permits a design team to manage the explored portions of a space of alternative designs. In addition, it supports evaluation and communication among team members about design alternatives. One goal of the project is to develop a methodology and a framework for software-designers that is based on studies that will lead to understanding how to support end-user exploration of solution-spaces. In addition the project facilitates collaboration among designers with different interests, expertise and the need to have both private as well as share common group-based designs. The theory of problem solving that forms the basis of the project involves &quot;state-space search.&quot; The state-space search methodology applies to both formal problem solving (where automation without human intervention is possible) and to complex design problems in which some aspects can be &quot;fuzzy&quot;. However, the approach proposed with this project is to merge the two genres of software and create a new one: software that allows a collaboration among automatic design processes and human designers, and one that makes visible not only the details of particular designs but also a substantial piece of the space of possible designs. In support of this project, the proposers developed the core of an initial research prototype software system to support design with transparent display of design spaces. This system, T-Star, implements a human interface that supports problem-solving using an approach from artificial intelligence that includes a view of the portion of the solution space that has been explored so far. Having a visual rendition of the spatial context of exploration helps ground design team collaboration.&lt;br&gt;&lt;br&gt;Program Manager: Anita J. La Salle&lt;br&gt;Date: June 26, 2006&lt;br&gt;</column>
</row>
<row>
<column>0613601</column>
<column>SoD-HCER:  Evaluation of Complex Designs--A Comparative Study                                                                                                                       </column>
<column>IIS </column>
<column>ITR-SCIENCE OF DESIGN</column>
<column>August 1, 2006</column>
<column>December 27,  2006</column>
<column>Hicks, Michael</column>
<column>MD</column>
<column>University of Maryland College Park                             </column>
<column>Standard Grant                               </column>
<column>Ephraim P. Glinert                      </column>
<column>July 31,  2007</column>
<column>99967</column>
<column></column>
<column>mwh@cs.umd.edu</column>
<column>3112 LEE BLDG                   </column>
<column>COLLEGE PARK              </column>
<column>MD</column>
<column>20742</column>
<column>3014056269</column>
<column>CSE </column>
<column>7372</column>
<column>HPCC|9216|7372</column>
<column>0104000 Information Systems                     |</column>
<column>0613601</column>
<column>A critical requirement for any science is the ability to measure.  Without measurement, it is difficult to evaluate and improve.  Not only is our ability to measure and evaluate software designs today weak, we also lack a thorough understanding of the shortcomings of the strengths and weaknesses of existing software design evaluation methods.  To learn more about the shortcomings of current evaluation methods, the PI will in this project study two software products from the systems domain which share the important design criteria of modifiability and performance, the Click modular router and the Jetty http server and servlet container.  For each of these two programs, there exist clear design goals and extensive change histories.  Using change history data, the PI will create an approximate &quot;master list&quot; of modifiability and performance flaws in early versions of each program.  For example, a feature request that required changes to many files could be flagged as a modifiability flaw.  She will then apply several evaluation methods (e.g., quantitative software metrics, architecture-based evaluation, and semiautomatic methods such as design snippets) to early versions of each subject program, and compare the output of each method to the approximate master list of design flaws.  Project outcomes will include establishment of a benchmark and experimental protocol that can be used to critique new techniques or tools for evaluating software designs using change history logs, and an increased understanding of the deficiencies of existing techniques and tools for evaluating software designs.&lt;br&gt;&lt;br&gt;Broader Impacts:  Software designs matter because software matters.  To improve software designs, we must have adequate tools for evaluating candidate designs.  This project will provide insight into new tools and techniques for software design evaluation.  Programmers using these new tools and techniques will produce better software designs and thus better software.  In addition, the benchmark produced by this experiment will prove valuable to software engineering educators; instructors will be able to design assignments and projects that involve the benchmark, and which will expose students to issues in evaluating software designs and empirical software engineering research.</column>
</row>
<row>
<column>0613638</column>
<column>SoD-Team: A Meta-Design Framework for Participative Software Systems                                                                                                                </column>
<column>IIS </column>
<column>ITR-SCIENCE OF DESIGN</column>
<column>August 1, 2006</column>
<column>July 27,  2006</column>
<column>Fischer, Gerhard</column>
<column>CO</column>
<column>University of Colorado at Boulder                               </column>
<column>Standard Grant                               </column>
<column>Ephraim P. Glinert                      </column>
<column>July 31,  2009</column>
<column>745448</column>
<column>Hal             Eden                    |Yunwen          Ye                      |Elisa           Giaccardi               |</column>
<column>gerhard@colorado.edu</column>
<column>3100 Marine Street, Room 481    </column>
<column>Boulder                   </column>
<column>CO</column>
<column>80309</column>
<column>3034926221</column>
<column>CSE </column>
<column>7372</column>
<column>HPCC|9216|7372</column>
<column>0116000 Human Subjects                          |</column>
<column>0613638</column>
<column>We are now entering a new phase for software development where millions of people are not only using software but also becoming involved in its development to widely varying degrees.  Existing software design methodologies that focus primarily on productivity-driven systems are insufficient to cope with the emergence of situated uses and fluctuating requirements encountered by such wide and diversified user involvement.  Rather, a new class of participative software systems is needed, the design of which does not end at the time of deployment.  For participative systems success hinges on continued user participation, and an important goal is to achieve the &quot;best fit&quot; between the software system and its ever-changing context of use, problems, domains, users, and communities of users.  In this project, the PI will develop a meta-design framework to address fundamental challenges and guide software developers in the design of such systems.  Grounded in an assessment of existing design theories as well as the systematic analysis of successful participative software systems, this research will start with a partially articulated meta-design framework, founded on the assumption that meta-designed systems can be supported by the Seeding, Evolutionary Growth, and Reseeding (SER) process model.  The PI will identify and correlate the technical and social characteristics of participative software systems that support users to collaboratively engage in the design of solutions to their own problems.  The identified characteristics will be used to guide future development of the Envisionment and Discovery Collaboratory (EDC), which will be used by real users to solve complex real-world problems in different design domains.  The work will be integrated with a specific major, multi-year urban planning project relating to public transportation, for which an initial collaboration among the stakeholders has already been formed.  Careful and systematic assessment of design decision impacts, guided by the initial meta-design framework, on this real-world problem-solving situation will feed back into the refinement of the meta-design framework.  The resulting meta-design framework will delineate a design space, define a design process, and identify a set of evaluation criteria for the creation of participative software systems.&lt;br&gt;&lt;br&gt;Broader Impacts:  As software systems are being increasingly woven into our daily lives and reshape the way people interact, collaborate, work, and think, requirements for software systems have become more individually differentiated and continuously change during their ongoing use.  This research will create the scientific foundation for the design of participative software systems that do not have fixed requirements at any point in time, and necessitate user participation and contribution as a fundamental part of the system.  The research will contribute to a better understanding of the complicated interactions of technical and social aspects essential to this challenging domain of a science of design.  The project will bring together researchers from design theory, software engineering, human-computer interaction, and cognitive science to gain insight into how to put owners of problems in charge and make them independent of &quot;high-tech scribes.&quot;   The many undergraduate and graduate students who will be involved in the research activities will as part of their experience be exposed to new approaches to software design.</column>
</row>
<row>
<column>0613655</column>
<column>Collaborative Research: SoD-TEAM: A Feedback-Based Architecture for Highly Reliable Embedded Software                                                                               </column>
<column>CNS </column>
<column>ITR-SCIENCE OF DESIGN</column>
<column>September 1, 2006</column>
<column>August 21,  2006</column>
<column>Mok, Aloysius</column>
<column>TX</column>
<column>University of Texas at Austin                                   </column>
<column>Standard Grant                               </column>
<column>Anita J. LaSalle                        </column>
<column>August 31,  2008</column>
<column>100000</column>
<column>James           Browne                  |</column>
<column>mok@cs.utexas.edu</column>
<column>P.O Box 7726                    </column>
<column>Austin                    </column>
<column>TX</column>
<column>78713</column>
<column>5124716424</column>
<column>CSE </column>
<column>7372</column>
<column>HPCC|9218|7372</column>
<column></column>
<column>0613655</column>
<column>Title: &quot;Collaborative Research: SoD-TEAM: A Feedback-Based Architecture for Highly Reliable Embedded Software&quot;&lt;br&gt;&lt;br&gt;The focus of this project is on developing a theory and architectural framework for incorporating feedback control as a main principle of software engineering. This proposal develops scientific foundations, tools, and architectural design principles to improve the reliability and reduce the development cost of mission-critical software. Two common approaches to ensure reliable system behavior are: 1) Scientific foundations, tools, and architectural principles for ensuring elimination of errors, and 2) foundations, tools, and architectural principles for ensuring tolerance to such errors. While the first solution is sufficient, building completely error-free large-scale systems has been an elusive exercise as evidenced by experiences with today&apos;s engineering artifacts (e.g., recalls on vehicles, cascading power blackouts, etc). Consequently, a new approach to robust software design, development and certification is needed that addresses the increasing cost and safety implications of the current practices. Feedback control has proven to be a very successful tool for ensuring correct behavior of complex, poorly modeled systems in the presence of uncertainty. This project applies principles of feedback control and stability envelopes to the engineering of software systems.</column>
</row>
<row>
<column>0613665</column>
<column>Collaborative Research: SoD-TEAM:  A Feedback-Based Architecture for Highly Reliable Embdedded Software                                                                             </column>
<column>CNS </column>
<column>ITR-SCIENCE OF DESIGN</column>
<column>September 1, 2006</column>
<column>August 21,  2006</column>
<column>Abdelzaher, Tarek</column>
<column>IL</column>
<column>University of Illinois at Urbana-Champaign                      </column>
<column>Standard Grant                               </column>
<column>Anita J. LaSalle                        </column>
<column>August 31,  2008</column>
<column>200000</column>
<column>Lui             Sha                     |Marco           Caccamo                 |Darko           Marinov                 |</column>
<column>zaher@cs.uiuc.edu</column>
<column>SUITE A                         </column>
<column>CHAMPAIGN                 </column>
<column>IL</column>
<column>61820</column>
<column>2173332187</column>
<column>CSE </column>
<column>7372</column>
<column>HPCC|9218|7372</column>
<column>0000912 Computer Science                        |</column>
<column>0613665</column>
<column>Title: &quot;Collaborative Research: SoD-TEAM: A Feedback-Based Architecture for Highly Reliable Embedded Software&quot;&lt;br&gt;&lt;br&gt;The focus of this project is on developing a theory and architectural framework for incorporating feedback control as a main principle of software engineering. This proposal develops scientific foundations, tools, and architectural design principles to improve the reliability and reduce the development cost of mission-critical software. Two common approaches to ensure reliable system behavior are: 1) Scientific foundations, tools, and architectural principles for ensuring elimination of errors, and 2) foundations, tools, and architectural principles for ensuring tolerance to such errors. While the first solution is sufficient, building completely error-free large-scale systems has been an elusive exercise as evidenced by experiences with today&apos;s engineering artifacts (e.g., recalls on vehicles, cascading power blackouts, etc). Consequently, a new approach to robust software design, development and certification is needed that addresses the increasing cost and safety implications of the current practices. Feedback control has proven to be a very successful tool for ensuring correct behavior of complex, poorly modeled systems in the presence of uncertainty. This project applies principles of feedback control and stability envelopes to the engineering of software systems.&lt;br&gt;</column>
</row>
<row>
<column>0613687</column>
<column>SoD-HCER: Colloborative Research: Using Market Forces to Improve Design of Hardware                                                                                                 </column>
<column>IIS </column>
<column>ITR-SCIENCE OF DESIGN</column>
<column>July 15, 2006</column>
<column>July 13,  2006</column>
<column>Findler, Robert</column>
<column>IL</column>
<column>University of Chicago                                           </column>
<column>Standard Grant                               </column>
<column>Ephraim P. Glinert                      </column>
<column>June 30,  2008</column>
<column>100000</column>
<column></column>
<column>robby@cs.uchicago.edu</column>
<column>5801 South Ellis Avenue         </column>
<column>Chicago                   </column>
<column>IL</column>
<column>60637</column>
<column>7737028602</column>
<column>CSE </column>
<column>7372</column>
<column>HPCC|9216|7372</column>
<column>0104000 Information Systems                     |</column>
<column>0613687</column>
<column>Markets for interchangeable components exert pressure on manufacturers to improve their products.  This is especially true if the market comes with fast dissemination of information about the quality of the components.  But existing markets for software components lack quality assurance mechanisms.  In this exploratory project, the PIs will study the relationship between software markets, quality assurance, and design.  The PIs conjecture that if a market for software components is equipped with a uniformly enforced quality control mechanism, it will force software producers to continuously overhaul their product designs.  To test this hypothesis, the PIs will conduct experiments with small controllable component markets, in which products come with explicit software contracts and the underlying software platforms monitor these contracts and publicly report violations.  Producers may choose to react to these reports with technical contributions (test cases, improved contracts, etc).   In this context, the PIs will validate their conjecture by conducting code inspections and interviews with producers.  The outcomes of this exploratory investigation will help others construct similar markets and mechanisms; some may even directly benefit from the software developed as part of the project.&lt;br&gt;&lt;br&gt;Broader Impacts: This project has the potential to change the way software components are produced and the way software reuse is taught.  If the PIs&apos; conjecture about markets is confirmed, it will provide arguments to the promoters of both public markets and markets that are internal to organizations.  The very creation of a market with quality assurance mechanisms is bound to make the production of software more efficient, and to improve the quality of the components that are traded on the market.  Independently of the outcome of the experiments, the idea of using a market for courses may help instructors deal with the teaching of software reuse in classes.  They can use the PIs&apos; experience and possibly their software as well to create course-focused markets; and they can use these markets to demonstrate the value of software reuse.</column>
</row>
<row>
<column>0613698</column>
<column>SoD-TEAM: Monitoring in Support of Design Science Principles                                                                                                                        </column>
<column>CCF </column>
<column>ITR-SCIENCE OF DESIGN</column>
<column>October 1, 2006</column>
<column>September 22,  2006</column>
<column>Robinson, William</column>
<column>GA</column>
<column>Georgia State University Research Foundation, Inc.              </column>
<column>Standard Grant                               </column>
<column>Sol J. Greenspan                        </column>
<column>September 30,  2009</column>
<column>246498</column>
<column></column>
<column>wrobinson@gsu.edu</column>
<column>G-76 ALUMNI HALL 30 COURTLAND ST</column>
<column>ATLANTA                   </column>
<column>GA</column>
<column>30303</column>
<column>4046514350</column>
<column>CSE </column>
<column>7372</column>
<column>HPCC|9218|7372</column>
<column>0000912 Computer Science                        |</column>
<column>0613698</column>
<column>Software evolution, through maintenance or updates, requires the greatest effort in the software industry&apos;s product life-cycle. This effort is increasing with the industry&apos;s desire to be more responsive to customer needs. Mass customization, and related theories, provides guidance for producing high quality, low cost, mass-produced craft products. The design theories, however, provide no guidance for post-purchase customization, as required of software evolution. This project contributes to a Science of Design by addressing how to keep a software application&apos;s behavior in line with the requirements.  The Requirements Monitoring (ReqMon) approach taken in this research provides guidance on when and what aspects of software should be evolved by dynamically monitoring individual user goals.&lt;br&gt;&lt;br&gt;Assistive technologies (AT), which support individuals with disabilities such as cognitive impairments (CI), are in the vanguard of those that require individually personalized software. Monitoring individual user goals during their use of AT may mitigate the commonplace abandonment of AT, by providing clinicians and designers the necessary and timely feedback for continuous adaptation and redesign of software-intensive AT. A new, personalized design science is needed to improve the design, use, function and stability of AT systems to assist the large and growing population of individuals that required AT to fully participation in society.&lt;br&gt;&lt;br&gt;This research is developing user goal monitoring tools and theory in support of dynamically personalizing AT specifically, and software evolution more generally. This research will offer two contributions. First, the monitoring method provides an approximate solution to understanding the dynamically changing needs of software users. Second, the mass-personalized software development (MPSD) theory provides a framework for analyzing continuously personalized designs in mass markets. MPSD suggests strategies for post-purchase customization of digital products.</column>
</row>
<row>
<column>0613738</column>
<column>SoD-HCER:  Contextualized Design Education for Professionals from Non-Computing Disciplines                                                                                         </column>
<column>CNS </column>
<column>ITR-SCIENCE OF DESIGN</column>
<column>August 1, 2006</column>
<column>August 1,  2006</column>
<column>Guzdial, Mark</column>
<column>GA</column>
<column>Georgia Tech Research Corporation - GA Institute of Technology  </column>
<column>Standard Grant                               </column>
<column>Anita J. LaSalle                        </column>
<column>July 31,  2009</column>
<column>137114</column>
<column></column>
<column>guzdial@cc.gatech.edu</column>
<column>Office of Sponsored Programs    </column>
<column>Atlanta                   </column>
<column>GA</column>
<column>30332</column>
<column>4043850866</column>
<column>CSE </column>
<column>7372</column>
<column>HPCC|9218|7372</column>
<column>0000912 Computer Science                        |0116000 Human Subjects                          |</column>
<column>0613738</column>
<column>Directorate for Computer and Information Science and Engineering (CISE)&lt;br&gt;Division Computer and Network Systems (CNS)&lt;br&gt;Science of Design (SoD) Program&lt;br&gt;&lt;br&gt;Proposal Number: 0613738 		&lt;br&gt;P/I: Mark Guzdial			&lt;br&gt;PI&apos;s Department: College of Computing	&lt;br&gt;Institution: Georgia Institute of Technology		&lt;br&gt;Award: $ 137,114		&lt;br&gt;&lt;br&gt;Title: &quot;SoD-HCER: Contextualized Design Education for Professionals from Non-Computing Disciplines&quot;&lt;br&gt;&lt;br&gt;The focus of this project is on end-user programmers.  End-user software developers are people who are design and implement software but who have not been formally trained to engage in this activity. This is a large population (estimated between 55 and 90 million people) whose activities range from coding in programming or scripting languages in order to extend the capabilities of a tool, to writing macros for widely used office products or developing web materials. Some of the questions addressed in the project are: &quot;What do local developers know about design? What should local developers learn about design? How can we teach them about design? What do they understand about data structures, structured programming, or structured processes? If there is a documented lack of design knowledge, what is its impact on their artifacts? The goals of the project are: to investigate what design knowledge local developers value and how they seek out this knowledge; to explore the mechanism of a collaborative case-based design aid to support an existing community of local developers; to explore embedding design education into the local developer&apos;s application and to measure the amount of design learning that results. The overall research goal is to develop guidelines for software developers whose users may become end-user programmers and even local developers. The projects success will mean the industry will gain increased knowledge about design practices engaged in by end-users. That knowledge may lead to more effective support structures and education for this class of developers. There are a lot of such people, distributed across a wide range of professions, so impacts may affect many organizations. In addition, insights gained about the population being studied may impact computer science theory and education and the science of design on a wide population of computer users. Another outcome of this research is guidance on how to provide support for task-based learning for end-user programmers. The potential impact of research is far reaching--it could pave the way for introducing techniques for supporting end-user programming into commercial products.&lt;br&gt;&lt;br&gt;Program Manager: Anita J. La Salle&lt;br&gt;Date: June 27, 2006&lt;br&gt;</column>
</row>
<row>
<column>0613744</column>
<column>SoD-TEAM:  Teleological Reasoning in Adaptive Software Design                                                                                                                       </column>
<column>IIS </column>
<column>ITR-SCIENCE OF DESIGN</column>
<column>September 1, 2006</column>
<column>August 18,  2006</column>
<column>Goel, Ashok</column>
<column>GA</column>
<column>Georgia Tech Research Corporation - GA Institute of Technology  </column>
<column>Standard Grant                               </column>
<column>Ephraim P. Glinert                      </column>
<column>August 31,  2010</column>
<column>639998</column>
<column>Jon Spencer     Rugaber                 |</column>
<column>ashok.goel@cc.gatech.edu</column>
<column>Office of Sponsored Programs    </column>
<column>Atlanta                   </column>
<column>GA</column>
<column>30332</column>
<column>4043850866</column>
<column>CSE </column>
<column>7372</column>
<column>HPCC|9216|7372</column>
<column>0104000 Information Systems                     |0116000 Human Subjects                          |</column>
<column>0613744</column>
<column>AI research on conceptual design of physical devices has revealed the central role that teleological knowledge and reasoning play in adaptive design.  A declarative teleological model of a physical device that explicitly captures the teleological relationships among the structure, behaviors and functions of its design enables localization of the modifications to the structure to achieve new functions.  The ontology of teleological models provides a vocabulary for classifying, representing, indexing and accessing specific design cases, generic adaptation plans, primitive design components, and abstract design patterns.  In analogy to physical devices, the PI views software artifacts as abstract devices, i.e., as abstract teleological artifacts with structures and behaviors that result in the accomplishment of desired functions.  A further analogy to adaptive physical design leads to the hypothesis that teleology is a fundamental organizational principle of adaptive software design.  Of course, software artifacts are also quite different from physical devices because the notions of structure, behavior, function, and teleology in the two domains are different.  Thus, this project will address the following six questions: What are productive notions of structure, behavior, function, and teleology in software design?  How might a declarative teleological model of a software artifact specify its functional architecture?  How might teleological analysis enable localization of the modifications needed to the architecture of a software artifact to achieve new functions?  How might the ontology of the teleological models of software artifacts support classification, representation, indexing and retrieval of generic adaptation plans, primitive software components, and abstract design patterns?  What might be a teleology-driven process of adaptive software design?  And how might these building blocks be used to support interactive software design more easily, efficiently and effectively than at present?  To answer these questions, the PI will develop building blocks of teleological reasoning in adaptive software design in the form of knowledge representations, taxonomies, libraries, methods, and processes. To these ends, the PI has adopted a three-pronged approach.  He will conduct detailed empirical case studies of the evolutionary histories of designs of game-playing software agents for interactive strategy games such as Freeciv and C-evo.  He will develop an interactive software design environment and, for a small class of changes in the functional requirements of game-playing agents, automate the design adaptations, which will help insure that all the building blocks work well together.  And he will use the interactive environment in undergraduate software engineering courses to support design adaptations for a large class of changes in the functional requirements of game-playing agents, and conduct formal experiments using control groups to evaluate the efficacy of teleological reasoning in support of adaptive software design.&lt;br&gt;&lt;br&gt;Broader Impacts:  Computational artifacts, including software artifacts, are increasingly pervasive and ubiquitous.  A major factor in the cost of software development is maintaining the software artifact as its design requirements evolve; even a small reduction in this cost may have a significant impact on software practice.   Since this research will address the issue of software design adaptations in response to changes in functional design requirements, its potential applications are wide-ranging and open-ended, the design and development of game-playing software agents being just one example.  Because the new tools developed in this project for interactive software design weill be introduced into the classroom, they will have a direct impact on the educational technology used in the computing sciences.  Knowledge acquired from the project will be disseminated in conferences and journals in software engineering, design cognition and computing, AI, and game playing.</column>
</row>
<row>
<column>0613793</column>
<column>SoD-HCER: Testing Designs and Designing Tests                                                                                                                                       </column>
<column>CNS </column>
<column>ITR-SCIENCE OF DESIGN</column>
<column>August 1, 2006</column>
<column>August 3,  2006</column>
<column>Ernst, Michael</column>
<column>MA</column>
<column>Massachusetts Institute of Technology                           </column>
<column>Standard Grant                               </column>
<column>Anita J. LaSalle                        </column>
<column>July 31,  2008</column>
<column>200000</column>
<column></column>
<column>mernst@csail.mit.edu</column>
<column>77 MASSACHUSETTS AVE            </column>
<column>Cambridge                 </column>
<column>MA</column>
<column>02139</column>
<column>6172531000</column>
<column>CSE </column>
<column>7372</column>
<column>HPCC|9218|7372</column>
<column>0000912 Computer Science                        |</column>
<column>0613793</column>
<column>Directorate for Computer and Information Science and Engineering (CISE)&lt;br&gt;Division Computer and Network Systems (CNS)&lt;br&gt;Science of Design (SoD) Program&lt;br&gt;&lt;br&gt;Proposal Number: 0613793	&lt;br&gt;P/I: Michael D. Ernst&lt;br&gt;PI&apos;s Department: Department: Electrical Engineering and Computer Science	&lt;br&gt;Institution: Massachusetts Institute of Technology&lt;br&gt;		&lt;br&gt;Award: $200,000		&lt;br&gt;&lt;br&gt;Title: &quot;SoD-HCER: Testing Designs and Designing Tests&quot;&lt;br&gt;&lt;br&gt;This proposal addresses concepts of software design and testing. The first thrust is on testing designs, exploring techniques for automatically generating tests from designs (models) that are higher-level than the code. The second thrust is on designing tests: on viewing tests as designs that can be decomposed and recomposed to create new tests with improved properties such as faster execution or better coverage. These two are related but distinct techniques, each integrates testing with a view of design in order to improve the testing process. This project&apos;s  ideas are new and they have important advantages over other approaches that solve similar problems. Preliminary investigations validated their usefulness with promising results. The funding will permit careful experiments to more scientifically validate the ideas. The potential implications of the proposed work on research and practice are profound. Practitioners are eager to improve their software and their test suites, but they have limited resources and limited knowledge of and patience with formal methods. The proposed work can be viewed as one way of bridging the gap between practice and theory by applying research ideas to real-world problems. &lt;br&gt;&lt;br&gt;&lt;br&gt;Program Manager: Anita J. La Salle&lt;br&gt;Date: &lt;br&gt;</column>
</row>
<row>
<column>0613805</column>
<column>SoD-HCER: Collaborative Research:  Using Market Forces to Improve the Design of Software                                                                                            </column>
<column>IIS </column>
<column>ITR-SCIENCE OF DESIGN</column>
<column>July 15, 2006</column>
<column>July 13,  2006</column>
<column>Felleisen, Matthias</column>
<column>MA</column>
<column>Northeastern University                                         </column>
<column>Standard Grant                               </column>
<column>Ephraim P. Glinert                      </column>
<column>June 30,  2008</column>
<column>105951</column>
<column></column>
<column>matthias@ccs.neu.edu</column>
<column>360 HUNTINGTON AVE              </column>
<column>BOSTON                    </column>
<column>MA</column>
<column>02115</column>
<column>6173735600</column>
<column>CSE </column>
<column>7372</column>
<column>HPCC|9216|7372</column>
<column>0104000 Information Systems                     |</column>
<column>0613805</column>
<column>Markets for interchangeable components exert pressure on manufacturers to improve their products.  This is especially true if the market comes with fast dissemination of information about the quality of the components.  But existing markets for software components lack quality assurance mechanisms.  In this exploratory project, the PIs will study the relationship between software markets, quality assurance, and design.  The PIs conjecture that if a market for software components is equipped with a uniformly enforced quality control mechanism, it will force software producers to continuously overhaul their product designs.  To test this hypothesis, the PIs will conduct experiments with small controllable component markets, in which products come with explicit software contracts and the underlying software platforms monitor these contracts and publicly report violations.  Producers may choose to react to these reports with technical contributions (test cases, improved contracts, etc).   In this context, the PIs will validate their conjecture by conducting code inspections and interviews with producers.  The outcomes of this exploratory investigation will help others construct similar markets and mechanisms; some may even directly benefit from the software developed as part of the project.&lt;br&gt;&lt;br&gt;Broader Impacts: This project has the potential to change the way software components are produced and the way software reuse is taught.  If the PIs&apos; conjecture about markets is confirmed, it will provide arguments to the promoters of both public markets and markets that are internal to organizations.  The very creation of a market with quality assurance mechanisms is bound to make the production of software more efficient, and to improve the quality of the components that are traded on the market.  Independently of the outcome of the experiments, the idea of using a market for courses may help instructors deal with the teaching of software reuse in classes.  They can use the PIs&apos; experience and possibly their software as well to create course-focused markets; and they can use these markets to demonstrate the value of software reuse.</column>
</row>
<row>
<column>0613806</column>
<column>SoD-TEAM: Developing Computational Tools that Facilitate Individual and Group Creativity in the Early Stages of Design                                                              </column>
<column>IIS </column>
<column>ITR-SCIENCE OF DESIGN</column>
<column>August 1, 2006</column>
<column>July 27,  2006</column>
<column>Bailey, Brian</column>
<column>IL</column>
<column>University of Illinois at Urbana-Champaign                      </column>
<column>Standard Grant                               </column>
<column>Ephraim P. Glinert                      </column>
<column>July 31,  2009</column>
<column>742405</column>
<column>Kevin           Hamilton                |</column>
<column>bpbailey@uiuc.edu</column>
<column>SUITE A                         </column>
<column>CHAMPAIGN                 </column>
<column>IL</column>
<column>61820</column>
<column>2173332187</column>
<column>CSE </column>
<column>7372</column>
<column>HPCC|9216|7372</column>
<column>0116000 Human Subjects                          |</column>
<column>0613806</column>
<column>This research addresses one of the most critical problems emerging in the interface design community - access by individual designers, and groups of designers, to computational tools that facilitate rather than inhibit the process of creative thinking in the early stages of design.  The early stages of design are when interactive systems designers are first thinking about the concept, content and layout, and desired interactive behavior of a design solution. These stages are critical, as studies show that&apos;s when 70% of a final design solution is determined.  As designers are increasingly pressured to produce effective solutions in less time, they are turning to the use of computer tools in these early design stages, but most computer tools were never developed to support creative thinking and could thus have the opposite effect.  As the interface often accounts for over 50% of the overall development effort, software intensive projects cannot afford to correct creative lapses in the early stages later on in the design cycle.  Design and creativity theory explain that the creative process can best be facilitated by support for a combination of sketching, alternative representations, working with multiple ideas in parallel, and collaboration.  With this in mind, the PI will first develop a visual sketching language (VSL) that allows designers to sketch representations of content and behavior within an informal design tool,  This tool will be embedded within a runtime system that allows the sketched designs to be executed, thereby producing functional prototypes through which designs can be better evaluated.  To design the VSL, the PI will collect conduct field studies of designers building prototypes using low-fidelity tools and will analyze their problem solving strategies to elicit their conceptual models.  The PI will also develop a groupware extension to the informal tool, that allows small design teams (consisting of 2-5 users) to work efficiently with multiple ideas in parallel and to collaborate effectively.  The approach is to have each team member run the PI&apos;s informal tool on his or her personal device, all of which are networked to a single machine driving a large display that offers a shared visual workspace.   An interactive iconic map will show thumbnail representations of designs on the local interface.  Once connected, functionality will be available that allows each design to be separately configured as private (only accessible locally); public (viewable but not editable by others); and shared (viewable and editable by others).  Group creativity will be facilitated by allowing individual designers to view different ideas (those created by other designers), and by allowing the group to re-interpret or modify each other&apos;s ideas, or to generate new ones.  Finally, rigorous evaluations will be conducted as the project progresses, to quantify the utility of the PI&apos;s approach and of the tools developed.  The results from these evaluations will provide the most extensive evidence to date of how computational tools affect individual and group creativity for interactive systems design.&lt;br&gt;&lt;br&gt;Broader Impacts:  The results of this work will advance the science of how to design computational tools that better facilitate creative thinking in the early stages of design.  The developed software, empirical results, and lessons learned from this research should be applicable to many design and creative problem solving situations in which sketching, alternative representations, working with multiple ideas in parallel, and collaboration are paramount.  This includes other interactive design domains as well as architectural, industrial, graphics, and mechanical design.</column>
</row>
<row>
<column>0613819</column>
<column>SoD-HCER: Using Non-Linear Negotiation to Enable the Design of Robust Open Software Systems                                                                                         </column>
<column>IIS </column>
<column>ITR-SCIENCE OF DESIGN</column>
<column>July 15, 2006</column>
<column>July 13,  2006</column>
<column>Klein, Mark</column>
<column>MA</column>
<column>Massachusetts Institute of Technology                           </column>
<column>Standard Grant                               </column>
<column>Ephraim P. Glinert                      </column>
<column>June 30,  2007</column>
<column>140000</column>
<column></column>
<column>m_klein@mit.edu</column>
<column>77 MASSACHUSETTS AVE            </column>
<column>Cambridge                 </column>
<column>MA</column>
<column>02139</column>
<column>6172531000</column>
<column>CSE </column>
<column>7372</column>
<column>HPCC|9216|7372</column>
<column></column>
<column>0613819</column>
<column>Open software systems made up of independently developed components interacting using agreed-upon protocols represent one of the most promising approaches for supporting applications where organizations of all kinds, which often have not previously worked together, must be assembled and reconfigured within small time frames on the infrastructures at hand (e.g., coalition military forces, disaster recovery operations, supply chains, collaborative engineering projects, and electronic marketplaces).  Ensuring that such systems are reliable is a challenge; the very openness that makes open systems attractive places them in a realm where the potential failure modes (&apos;exceptions&apos;) and associated exception handling techniques are numerous and often far from obvious.  Components may not operate correctly; they may lie to get an advantage, even act maliciously.  We cannot view or manipulate their code or internal state.  And since there is no one component &apos;in charge&apos;, we must be prepared to deal with emergent problems with non-local causes and effects.  The problems are exacerbated by the wide range of possible open system interaction protocols, ranging from constraint satisfaction to markets to swarms, each with their own unique set of potential exceptions and relevant handlers.  Unfortunately, existing techniques do little to help us design more reliable open systems; designers must rely on their experience and intuition to determine what exceptions apply to their particular system, and how those exceptions can best be addressed.  In this project, the PI will tackle this gap by helping groups of collaborating software designers rapidly search through the vast space of possible open system designs for ones that they agree will be reliable and effective for their particular application.  To do this, he will integrate and extend two powerful innovations that have not been applied in software engineering contexts heretofore.  The first is a taxonomically organized knowledge base of open system coordination mechanisms, with each mechanism linked to its characteristic exceptions and each exception linked to its possible handlers.  This knowledge base defines, by delineating a set of orthogonal design dimensions, a very large space of possible open system designs.  The second innovation is a family of negotiation algorithms that help designers with diverse interests rapidly converge on pareto-optimal (win-win) design agreements in such large nonlinear design spaces.  Very little work has been done to date on nonlinear negotiation (i.e., negotiation with interdependent issues), and this work has focused exclusively on &quot;flat&quot; design spaces (with a static set of predefined design dimensions).  This project will push forward our understanding of how to find pareto-optimal solutions with taxonomically structured design spaces, a formalization that is potentially applicable to a wide range of important real-life product and process design challenges.&lt;br&gt;&lt;br&gt;Broader Impacts:  This work will help us design robust open systems more quickly and effectively, and will in particular help students and educators by providing a comprehensive and well-organized knowledge base of open system coordination and exception handling expertise.  It will develop negotiation algorithms for complex contracts, a challenge relevant to domains ranging from defining electronic commerce to airplane design.  The results will be broadly disseminated, via web-accessible software as well as traditional media.</column>
</row>
<row>
<column>0613822</column>
<column>SoD-CBA: Summer Workshops in Software Design Research Methods                                                                                                                       </column>
<column>CCF </column>
<column>ITR-SCIENCE OF DESIGN</column>
<column>September 1, 2006</column>
<column>September 1,  2006</column>
<column>Shaw, Mary</column>
<column>PA</column>
<column>Carnegie-Mellon University                                      </column>
<column>Standard Grant                               </column>
<column>Sol J. Greenspan                        </column>
<column>August 31,  2009</column>
<column>129070</column>
<column>Susan           Finger                  |Mark            Gross                   |James           Herbsleb                |</column>
<column>mary.shaw@cs.cmu.edu</column>
<column>5000 Forbes Avenue              </column>
<column>PITTSBURGH                </column>
<column>PA</column>
<column>15213</column>
<column>4122688746</column>
<column>CSE </column>
<column>7372</column>
<column>HPCC|9218|7372</column>
<column>0000912 Computer Science                        |</column>
<column>0613822</column>
<column>The project funds curriculum development and operation of a summer workshop in Design Research Methods. The activity contributes to the development of a Science of Design program by developing an open community of graduate students, faculty, and industry researchers who are actively engaged in the advancement of software design research. This community encompasses researchers from related areas of design research who can contribute to the software design community and who can take ideas from software design back to their own research communities.  The workshop is designed to be a replicable model that makes the curriculum widely available.  The result is expected to entail mentoring relationships among the students, the faculty and the industrial participants. These mentoring relationships are particularly important to students from underrepresented populations.&lt;br&gt;&lt;br&gt; &lt;br&gt;&lt;br&gt;</column>
</row>
<row>
<column>0613823</column>
<column>SoD-HCER: Incorporating Uncertainty in the Evaluation of Software Designs                                                                                                           </column>
<column>CNS </column>
<column>ITR-SCIENCE OF DESIGN</column>
<column>August 1, 2006</column>
<column>August 3,  2006</column>
<column>Shaw, Mary</column>
<column>PA</column>
<column>Carnegie-Mellon University                                      </column>
<column>Standard Grant                               </column>
<column>Anita J. LaSalle                        </column>
<column>July 31,  2007</column>
<column>132021</column>
<column></column>
<column>mary.shaw@cs.cmu.edu</column>
<column>5000 Forbes Avenue              </column>
<column>PITTSBURGH                </column>
<column>PA</column>
<column>15213</column>
<column>4122688746</column>
<column>CSE </column>
<column>7372</column>
<column>HPCC|9218|7372</column>
<column>0000912 Computer Science                        |</column>
<column>0613823</column>
<column>Directorate for Computer and Information Science and Engineering (CISE)&lt;br&gt;Division Computer and Network Systems (CNS)&lt;br&gt;Science of Design (SoD) Program&lt;br&gt;&lt;br&gt;Proposal Number: 0613823	&lt;br&gt;P/I: Mary Shaw&lt;br&gt;PI&apos;s Department: Computer Science&lt;br&gt;Institution: Carnegie-Mellon University&lt;br&gt;Award: $132,021&lt;br&gt;&lt;br&gt;Title: &quot;SoD-HCER: Incorporating Uncertainty in the Evaluation of Software Designs&quot;&lt;br&gt;&lt;br&gt;This project involves the development of a systematic framework, the software confidence chain, for codifying and managing uncertainty in software design. This research lays the groundwork for confidence chains by designing and validating a representation for evaluation information that also captures confidence information and cost of analysis and that supports dynamic update of the information. In addition, the project will explore two specific techniques for handling uncertainty, characterizing uncertainty about requirements and resources that change over time and reducing uncertainty about end users&apos; needs and expectations by improving ways for them to express their needs and expectations. The proposed research will provide a scientific basis for describing and managing uncertainty in software design, especially early in the design process, while it is still relatively inexpensive to make changes. Connecting assessments of uncertainty and confidence directly to analysis will improve the linkage to costs and benefits seen by clients, enabling more informed business decisions about software development. This project will improve our fundamental understanding of design by providing a unified approach to describing and managing uncertainty that recognizes and preserves the relations among sources of uncertainty and confidence. It will contribute analysis techniques that both provide useful analysis power and explore different facets of uncertainty, especially in the early stages of design. It will contribute both to a scientific understanding of specific types of uncertainty management and to the more general challenge of developing predictive evaluations. In addition, the research will contribute to a longer-term objective of developing a comprehensive model that rigorously relates a wide class of analyses. It will also help to establish an interdisciplinary bridge between software design and well-established business models. Development of a scientific basis for finding design points that are cost effective in light of uncertainty holds promise for improving products used by the community at large, for example by making it easier to select from among similar competing products. Similarly, increased attention to user preferences, especially for dynamic adaptation to preferences, should make computing less inscrutable to everyday users.&lt;br&gt;&lt;br&gt;&lt;br&gt;Program Manager: Anita J. La Salle&lt;br&gt;Date: July 5, 2006&lt;br&gt;</column>
</row>
<row>
<column>0613840</column>
<column>Collaborative Research:  SoD-TEAM:  Representations for a Science of Design                                                                                                         </column>
<column>CCF </column>
<column>ITR-SCIENCE OF DESIGN</column>
<column>September 1, 2006</column>
<column>July 27,  2006</column>
<column>Sullivan, Kevin</column>
<column>VA</column>
<column>University of Virginia Main Campus                              </column>
<column>Standard Grant                               </column>
<column>Sol J. Greenspan                        </column>
<column>August 31,  2009</column>
<column>444964</column>
<column></column>
<column>sullivan@cs.virginia.edu</column>
<column>P.O.  BOX 400195                </column>
<column>CHARLOTTESVILLE           </column>
<column>VA</column>
<column>22904</column>
<column>4349244270</column>
<column>CSE </column>
<column>7372</column>
<column>HPCC|9218|7372</column>
<column>0000912 Computer Science                        |</column>
<column>0613840</column>
<column>ABSTRACT&lt;br&gt;0613840/Sullivan and 0613845/Griswold&lt;br&gt;U of VA/U of Cal SD&lt;br&gt;&lt;br&gt;TITLE: Collaborative Proposal: SoD-TEAM: Representations for a Science of Design&lt;br&gt;&lt;br&gt;Our understanding of software design does not yet suffice to enable economically efficient production of new software-intensive systems, either commercial-scale or the ultra-large-scale (ULS) systems emerging as priorities for government and industry. New design methods are not enough. Also needed is a science of the phenomena underlying design. Elements of such a science appear within reach, based on the integration of knowledge from software engineering and financial economics. A premise of this project is that there is essential uncertainty in the technical and economic outcomes of design activities, therefore designs and design activities must be engineered to account for and exploit this risk. Modularity in the design of software artifacts, processes, and industry structures is one key approach. This project aims to develop and evaluate value-oriented scientific approaches to modular system design in order to provide the knowledge needed to significantly reduce the economic inefficiency of current software practices. Specific goals include the following: developing methods to represent design structures at many scales, based on the notion of design rules of Baldwin and Clark; mapping modular design structures to economic value using options theory; and devising practical ways to develop and assess architectural strategies for both commercial-scale and ultra-large-scale systems.&lt;br&gt;&lt;br&gt; &lt;br&gt;</column>
</row>
<row>
<column>0613845</column>
<column>Collaborative Proposal: SoD-TEAM: Representations for a Science of Design                                                                                                           </column>
<column>CCF </column>
<column>ITR-SCIENCE OF DESIGN</column>
<column>September 1, 2006</column>
<column>July 27,  2006</column>
<column>Griswold, William</column>
<column>CA</column>
<column>University of California-San Diego                              </column>
<column>Standard Grant                               </column>
<column>Sol J. Greenspan                        </column>
<column>August 31,  2009</column>
<column>392776</column>
<column></column>
<column>wgg@cs.ucsd.edu</column>
<column>Office of Contract &amp; Grant Admin</column>
<column>La Jolla                  </column>
<column>CA</column>
<column>92093</column>
<column>8585340246</column>
<column>CSE </column>
<column>7372</column>
<column>HPCC|9218|7372</column>
<column>0000912 Computer Science                        |</column>
<column>0613845</column>
<column>ABSTRACT&lt;br&gt;0613840/Sullivan and 0613845/Griswold&lt;br&gt;U of VA/U of Cal SD&lt;br&gt;&lt;br&gt;TITLE: Collaborative Proposal: SoD-TEAM: Representations for a Science of Design&lt;br&gt;&lt;br&gt;Our understanding of software design does not yet suffice to enable economically efficient production of new software-intensive systems, either commercial-scale or the ultra-large-scale (ULS) systems emerging as priorities for government and industry. New design methods are not enough. Also needed is a science of the phenomena underlying design. Elements of such a science appear within reach, based on the integration of knowledge from software engineering and financial economics. A premise of this project is that there is essential uncertainty in the technical and economic outcomes of design activities, therefore designs and design activities must be engineered to account for and exploit this risk. Modularity in the design of software artifacts, processes, and industry structures is one key approach. This project aims to develop and evaluate value-oriented scientific approaches to modular system design in order to provide the knowledge needed to significantly reduce the economic inefficiency of current software practices. Specific goals include the following: developing methods to represent design structures at many scales, based on the notion of design rules of Baldwin and Clark; mapping modular design structures to economic value using options theory; and devising practical ways to develop and assess architectural strategies for both commercial-scale and ultra-large-scale systems.&lt;br&gt;</column>
</row>
<row>
<column>0613867</column>
<column>Collaborative Research: SoD-TEAM: &quot;Values at Play: Integrating Ethical and Political Factors into System Design                                                                     </column>
<column>CNS </column>
<column>ITR-SCIENCE OF DESIGN</column>
<column>September 15, 2006</column>
<column>September 8,  2006</column>
<column>Flanagan, Mary</column>
<column>NY</column>
<column>CUNY Hunter College                                             </column>
<column>Standard Grant                               </column>
<column>Anita J. LaSalle                        </column>
<column>August 31,  2009</column>
<column>253514</column>
<column>Sophia          Catsambis               |</column>
<column>mary@maryflanagan.com</column>
<column>695 Park Avenue                 </column>
<column>New York                  </column>
<column>NY</column>
<column>10021</column>
<column>2127724020</column>
<column>CSE </column>
<column>7372</column>
<column>HPCC|9218|7372</column>
<column>0000912 Computer Science                        |</column>
<column>0613867</column>
<column>Title: &quot;Collaborative Research: SoD-TEAM: Values at Play - Integrating Social Factors into Design&quot;&lt;br&gt;&lt;br&gt;The focus of this project is on the development of a software design methodology, titled &quot;Values at Play (VAP)&quot; that takes values into account when developing software systems. The methodology, or set of best practices, addresses such issues as: how values can be consistently and systematically integrated into the design of software systems, how values investigations, in the context of technical design, can be made scientifically rigorous, and, the construction of a viable set of general software design principles that could lead to the integration of values across a variety of design tasks. The VAP project integrates the humanities, the arts, and social, and ethical interests into the scientific design of technological systems by specifically focusing on values in the design of games. The project involves three research activities including: 1. Development of a rigorous methodology (or, best practices) for supporting value conscious design; a handbook of the Values at Play methodology is made available in hardcopy and on the Web. This phase explores such issues as: how to identify values that might be relevant to a given design project, how to embody or express values in system design, how to engage in appraisal of whether and to what extent designers have successfully embedded target values in a given system.  2. Development of a values-in-design toolkit which includes: a) game building components to help students create games based on a values-orientation; and b) several working examples demonstrating values-to-design-feature correlations.  3. Assessment of design training interventions: the team will design several instruments to assess the values integration in the methodology and Toolkit. In addition to the research activities, this project engages faculty and practitioners in a Workshop about Values at Play. Embedding values within technological systems, and verifying that such systems actually reflects those values, is particularly appropriate using computer games since they affect larger society. This research will also be of use to educators and systems designers in the IT field considering game structures in their approaches as well as to scholars interested in the study of technology, society, and humanity. Potentially, this project might advance this line of inquiry to a pervasive, industry changing, international level of importance which not only promotes the humanistic study of these issues but enhances real products for real people.&lt;br&gt;&lt;br&gt;Program Manager: Anita J. La Salle&lt;br&gt;Date: July 12, 2006&lt;br&gt;</column>
</row>
<row>
<column>0613885</column>
<column>SoD-HCER:  Learning Based Programming                                                                                                                                               </column>
<column>IIS </column>
<column>ITR-SCIENCE OF DESIGN</column>
<column>July 15, 2006</column>
<column>July 13,  2006</column>
<column>Roth, Dan</column>
<column>IL</column>
<column>University of Illinois at Urbana-Champaign                      </column>
<column>Standard Grant                               </column>
<column>Ephraim P. Glinert                      </column>
<column>June 30,  2009</column>
<column>471286</column>
<column></column>
<column>danr@cs.uiuc.edu</column>
<column>SUITE A                         </column>
<column>CHAMPAIGN                 </column>
<column>IL</column>
<column>61820</column>
<column>2173332187</column>
<column>CSE </column>
<column>7372</column>
<column>HPCC|9216|7372</column>
<column></column>
<column>0613885</column>
<column>A significant amount of the software written today interacts with naturally occurring (sensor) data such as text, speech, images and video, streams of financial data, and biological sequences, and needs to reason with respect to concepts that are complex and often difficult to define explicitly in terms of the raw data observed (e.g., determining the gender of a person in an image, determining the topic of an article, determining whether more than three people are currently meeting in someone&apos;s office, scheduling a computation in a grid in a way that adapts to a multitude of properties of the resources and links.  Applications that require such abilities are expected to rapidly grow even more important in future years.  While conventional programming languages rely on a programmer to explicitly define all the concepts and relations involved, programming with naturally occurring data that is highly variable and ambiguous at the measurement level necessitates a programming model in which some of the variables, concepts and relations may not be known at programming time, may be defined only in a data driven way, or may not be unambiguously defined without relying on other concepts acquired this way.  It must be possible to reason with respect to variables that do not depend on tight assumptions on the environment in which the measurements are taken, and needs to center around a semantic level interaction model made possible via components that are data-dependent and support abstractions over real-world observations.  Today&apos;s programming paradigms, and the corresponding programming languages, are not conducive to that goal.  Consequently, despite two decades of progress in machine learning, and a clear need for systems with significant trainable (data dependent) components, few systems today incorporate significant machine learning components, and even fewer use more than a single classifier.  In this project on Learning Based Programming (LBP), the PI will explore a novel software engineering paradigm that allows a programmer seamless incorporation of trainable variables into the program and, consequently, the ability to reason using high-level concepts without the need to explicitly define them in terms of all the variables they might depend on, or the functional dependencies among them; these may be determined in a data-driven way, via learning operators whose details are abstracted away from the programmer.  In this work, the PI will flesh out the details of the LBP paradigm he envisages, and implement an LBP language and study it via the development of applications in two areas: ubiquitous computing and natural language processing.&lt;br&gt;&lt;br&gt;Broader Impacts:  This project will lead to cross-fertilization and mutual reinvigoration of the software engineering and machine learning fields.  Enabling the development of computer systems that interact and cope with the variability of naturally occurring (sensor) data will require fundamental advances in compilation and software engineering issues.  Conversely, availability of the LBP vehicle will motivate researchers in machine learning to explore the process of making inferences that rely on a large number of mutually dependent learners as a means to providing programmers with better abstractions so that they can more effectively tackle a broad range of increasingly complex applications involving such data.</column>
</row>
<row>
<column>0613889</column>
<column>SOD:HCER: A Theory of Automated Design                                                                                                                                              </column>
<column>CCF </column>
<column>ITR-SCIENCE OF DESIGN</column>
<column>August 15, 2006</column>
<column>August 15,  2006</column>
<column>Vardi, Moshe</column>
<column>TX</column>
<column>William Marsh Rice University                                   </column>
<column>Standard Grant                               </column>
<column>Sol J. Greenspan                        </column>
<column>July 31,  2008</column>
<column>200000</column>
<column></column>
<column>vardi@rice.edu</column>
<column>6100 MAIN ST                    </column>
<column>HOUSTON                   </column>
<column>TX</column>
<column>77005</column>
<column>7133484820</column>
<column>CSE </column>
<column>7372</column>
<column>HPCC|9218|7372</column>
<column>0000912 Computer Science                        |</column>
<column>0613889</column>
<column>ABSTRACT&lt;br&gt;0613889&lt;br&gt;Moshe Y. Vardi&lt;br&gt;William Marsh Rice University&lt;br&gt;&lt;br&gt;SoD-HCER: A Theory of Automated Design&lt;br&gt;&lt;br&gt;&lt;br&gt;As computerized systems are becoming larger, more complex, and increasingly distributed, an increasing portion of the design effort goes into the validation and verification effort.  There is a growing need for formal methods that guarantee systems reliability, correctness, and efficiency by design.  This project will address this challenge by contributing to the the establishment of a theory of automated design of computing systems. The focus of this project is on moving algorithmic techniques for assertion-based automated verification into assertion-based automated design, building on emerging standard temporal assertion languages such as OVL, PSL, and SVA.  The new techniques will enable the development of systems of higher quality within shorter design cycles and with lower costs.  The vision for Science of Design underlying this proposal is that of design automation, in which the process of converting formal specification to implementation is, to a major extent, automated. &lt;br&gt;The implication is that a major portion of the manual design effort should go into the development of high-level specification, since much of the implementation effort can then be automated. The ultimate goal of this project is a demonstrable improvement in design productivity and quality.&lt;br&gt;</column>
</row>
<row>
<column>0613893</column>
<column>Collaborative Research:  SoD-TEAM: Values at Play - Integrating Social Factors into Design                                                                                          </column>
<column>CNS </column>
<column>COLLABORATIVE SYSTEMS|ITR-SCIENCE OF DESIGN</column>
<column>September 15, 2006</column>
<column>September 8,  2006</column>
<column>Nissenbaum, Helen</column>
<column>NY</column>
<column>New York University                                             </column>
<column>Standard Grant                               </column>
<column>Anita J. LaSalle                        </column>
<column>August 31,  2009</column>
<column>537243</column>
<column></column>
<column>hfn1@nyu.edu</column>
<column>70 WASHINGTON SQUARE S          </column>
<column>NEW YORK                  </column>
<column>NY</column>
<column>10012</column>
<column>2129982121</column>
<column>CSE </column>
<column>7496|7372</column>
<column>HPCC|9218|7372</column>
<column>0000912 Computer Science                        |</column>
<column>0613893</column>
<column>Title: &quot;Collaborative Research: SoD-TEAM: Values at Play - Integrating Social Factors into Design&quot;&lt;br&gt;&lt;br&gt;The focus of this project is on the development of a software design methodology, titled &quot;Values at Play (VAP)&quot; that takes values into account when developing software systems. The methodology, or set of best practices, addresses such issues as: how values can be consistently and systematically integrated into the design of software systems, how values investigations, in the context of technical design, can be made scientifically rigorous, and, the construction of a viable set of general software design principles that could lead to the integration of values across a variety of design tasks. The VAP project integrates the humanities, the arts, and social, and ethical interests into the scientific design of technological systems by specifically focusing on values in the design of games. The project involves three research activities including: 1. Development of a rigorous methodology (or, best practices) for supporting value conscious design; a handbook of the Values at Play methodology is made available in hardcopy and on the Web. This phase explores such issues as: how to identify values that might be relevant to a given design project, how to embody or express values in system design, how to engage in appraisal of whether and to what extent designers have successfully embedded target values in a given system.  2. Development of a values-in-design toolkit which includes: a) game building components to help students create games based on a values-orientation; and b) several working examples demonstrating values-to-design-feature correlations.  3. Assessment of design training interventions: the team will design several instruments to assess the values integration in the methodology and Toolkit. In addition to the research activities, this project engages faculty and practitioners in a Workshop about Values at Play. Embedding values within technological systems, and verifying that such systems actually reflects those values, is particularly appropriate using computer games since they affect larger society. This research will also be of use to educators and systems designers in the IT field considering game structures in their approaches as well as to scholars interested in the study of technology, society, and humanity. Potentially, this project might advance this line of inquiry to a pervasive, industry changing, international level of importance which not only promotes the humanistic study of these issues but enhances real products for real people.&lt;br&gt;&lt;br&gt;Program Manager: Anita J. La Salle&lt;br&gt;Date: July 12, 2006&lt;br&gt;</column>
</row>
<row>
<column>0613913</column>
<column>Clarity  and Efficiency in Design                                                                                                                                                   </column>
<column>CCF </column>
<column>ITR-SCIENCE OF DESIGN</column>
<column>September 1, 2006</column>
<column>July 27,  2006</column>
<column>Liu, Yanhong</column>
<column>NY</column>
<column>SUNY at Stony Brook                                             </column>
<column>Standard Grant                               </column>
<column>Sol J. Greenspan                        </column>
<column>August 31,  2008</column>
<column>203924</column>
<column>Scott           Stoller                 |</column>
<column>liu@cs.sunysb.edu</column>
<column>WEST 5510 FRK MEL LIB           </column>
<column>STONY BROOK               </column>
<column>NY</column>
<column>11794</column>
<column>6316329949</column>
<column>CSE </column>
<column>7372</column>
<column>HPCC|9218|7372</column>
<column>0000912 Computer Science                        |</column>
<column>0613913</column>
<column>Award Abstract&lt;br&gt;0613913 &lt;br&gt;PIs	Yanhong A. Liu and Scott D. Stoller&lt;br&gt;SUNY Stony Brook&lt;br&gt;&lt;br&gt;TITLE	SoD: Clarity and Efficiency&lt;br&gt;&lt;br&gt;&lt;br&gt;Abstraction for design, such as object abstraction, supports the separation of what operations are provided by systems and components from how the operations are implemented, and is essential in the construction of complex systems from components.  Unfortunately, clear and modular designs have poor performance when expensive query operations are performed, while efficient designs that properly maintain the query results are much more difficult to develop and to understand, because the design may blow up significantly and is no longer clear or modular.&lt;br&gt;&lt;br&gt;This project proposes to create a general framework and language for expressing design knowledge that support both clarity and efficiency, by rigorously capturing invariants, ways to efficiently and incrementally maintain invariants, and the associated costs; and to develop a method for automatically applying the design knowledge.  The underlying principles of incremental computation are the counterpart of differentiation in calculus and will help lay a solid foundation for science of design.  This project also proposes to implement the framework and method, apply them to important application domains, including security policy frameworks and operating systems, and teach them to both undergraduate and graduate students.&lt;br&gt;</column>
</row>
<row>
<column>0613919</column>
<column>SoD-HCER: Comprehensibility as a Design Criterion                                                                                                                                   </column>
<column>CNS </column>
<column>ITR-SCIENCE OF DESIGN</column>
<column>September 1, 2006</column>
<column>July 18,  2006</column>
<column>Gamboa, Ruben</column>
<column>WY</column>
<column>University of Wyoming                                           </column>
<column>Standard Grant                               </column>
<column>Anita J. LaSalle                        </column>
<column>August 31,  2008</column>
<column>157428</column>
<column>James           Caldwell                |</column>
<column>ruben@cs.uwyo.edu</column>
<column>1000 E. University Avenue       </column>
<column>LARAMIE                   </column>
<column>WY</column>
<column>82071</column>
<column>3077665320</column>
<column>CSE </column>
<column>7372</column>
<column>HPCC|9216|9150|7372</column>
<column>0000912 Computer Science                        |</column>
<column>0613919</column>
<column>Directorate for Computer and Information Science and Engineering (CISE)&lt;br&gt;Division Computer and Network Systems (CNS)&lt;br&gt;Science of Design (SoD) Program&lt;br&gt;&lt;br&gt;Proposal Number: 0613919	&lt;br&gt;P/I: Ruben Gamboa	&lt;br&gt;Institution: University of Wyoming&lt;br&gt;				&lt;br&gt;Title: &quot;SoD-HCER: Comprehensibility as a Design Criterion&quot;&lt;br&gt;&lt;br&gt;Award: $ 157,428&lt;br&gt;Duration:  24 months&lt;br&gt;&lt;br&gt;&lt;br&gt;The focus of this project is on software design comprehensibility where an objective measure of comprehensibility is proposed that can be determined by the use of automated techniques for detecting program constraints. Using comprehensibility as a criterion for evaluating designs poses a major intellectual challenge because comprehensibility is a subjective notion that complicates the task of detecting it automatically. The proposers&apos; approach toward detecting comprehensibility is to modify two program analysis tools (Daikon and AbsInt) so that those tools can be used to comprehend &quot;good&quot; designs. The project has two main research goals: a) Determine if comprehensibility captures the informal notion of &quot;good&quot; design. This goal represents the empirical validation (or refutation) of the main thesis, that comprehensibility is the key quality shared by good designs; and, b) Identify design features that make designs more comprehensible. The intent here is to analyze different programs that are freely accessible on the Internet to identify designs that are easily comprehended by the tools, and then to see what design features they have in common. This is a highly speculative goal, but it is the main scientific question raised by the research. Moreover, it is one that can have a broad impact on the practice of programming. The thesis of this project, that comprehensibility can be used as a single criterion for evaluating design quality and that this criterion can be measured objectively by using automated tools that infer meaning from programs, provides a single and testable criterion to measure quality. This research brings the art of software design one step closer to a scientific footing. An early benefit of this project will be the identification of design features that lead to greater comprehensibility, hence to better design quality. Moreover, the integration of automated tools to measure design quality objectively is an aspect of this proposal that is unique and innovative. If successful, the project may contribute to the body of knowledge of the science of design by presenting &quot;good&quot; design precepts for practitioners to follow. In addition, the proposed research has the potential to make a significant impact both on computer science education and on the practice of programming in general. If this project is successful in establishing that comprehensibility is an adequate measure of design quality, students and professional designers will have a new and objective way to judge different designs. &lt;br&gt;&lt;br&gt;Program Manager: Anita J. La Salle&lt;br&gt;Date: June 28, 2006&lt;br&gt;</column>
</row>
<row>
<column>0613930</column>
<column>Collaborative Proposal: SoD-TEAM: A Feedback-Based Architecture for Highly Reliable Embedded Software                                                                               </column>
<column>CNS </column>
<column>ITR-SCIENCE OF DESIGN</column>
<column>September 1, 2006</column>
<column>August 21,  2006</column>
<column>Xie, Fei</column>
<column>OR</column>
<column>Portland State University                                       </column>
<column>Standard Grant                               </column>
<column>Anita J. LaSalle                        </column>
<column>August 31,  2008</column>
<column>50000</column>
<column></column>
<column>xie@cs.pdx.edu</column>
<column>1721 NE BROADWAY ST             </column>
<column>portland                  </column>
<column>OR</column>
<column>97232</column>
<column>5037253423</column>
<column>CSE </column>
<column>7372</column>
<column>HPCC|9218|7372</column>
<column>0000912 Computer Science                        |</column>
<column>0613930</column>
<column>Title: &quot;Collaborative Research: SoD-TEAM: A Feedback-Based Architecture for Highly Reliable Embedded Software&quot;&lt;br&gt;&lt;br&gt;The focus of this project is on developing a theory and architectural framework for incorporating feedback control as a main principle of software engineering. This proposal develops scientific foundations, tools, and architectural design principles to improve the reliability and reduce the development cost of mission-critical software. Two common approaches to ensure reliable system behavior are: 1) Scientific foundations, tools, and architectural principles for ensuring elimination of errors, and 2) foundations, tools, and architectural principles for ensuring tolerance to such errors. While the first solution is sufficient, building completely error-free large-scale systems has been an elusive exercise as evidenced by experiences with today&apos;s engineering artifacts (e.g., recalls on vehicles, cascading power blackouts, etc). Consequently, a new approach to robust software design, development and certification is needed that addresses the increasing cost and safety implications of the current practices. Feedback control has proven to be a very successful tool for ensuring correct behavior of complex, poorly modeled systems in the presence of uncertainty. This project applies principles of feedback control and stability envelopes to the engineering of software systems.</column>
</row>
<row>
<column>0613949</column>
<column>SoD-TEAM: Longitudinal effects of Design in Open Source Projects.                                                                                                                   </column>
<column>IIS </column>
<column>ITR-SCIENCE OF DESIGN</column>
<column>September 1, 2006</column>
<column>August 18,  2006</column>
<column>Devanbu, Premkumar</column>
<column>CA</column>
<column>University of California-Davis                                  </column>
<column>Standard Grant                               </column>
<column>Ephraim P. Glinert                      </column>
<column>August 31,  2009</column>
<column>750000</column>
<column>Anand           Swaminathan             |Vladimir        Filkov                  |Raissa          D&apos;Souza                 |Greta           Hsu                     |</column>
<column>devanbu@cs.ucdavis.edu</column>
<column>OR/Sponsored Programs           </column>
<column>Davis                     </column>
<column>CA</column>
<column>95618</column>
<column>5307473838</column>
<column>CSE </column>
<column>7372</column>
<column>HPCC|9216|7372</column>
<column></column>
<column>0613949</column>
<column>Design determines how a system is decomposed into a logical collection of modules.  Modular structure enables both division of labor and division of knowledge, which determine how independently developers can work.  Good design can also lower the cost of entry for a new developer, and simplify maintenance and evolutionary activities.  For open source projects, whose life-blood is voluntary labor, design can affect the ability of a project to attract and retain new developers.  These effects are longitudinal (over time), systemic (both over artifact and social structure), and nondeterministic.  Open source systems inherently expose comprehensive, time-series narratives of artifact evolution, social structure, and artifact quality.  The longitudinal effects of design, therefore, are observable in open source projects.  In this project, the PI will conduct an interdisciplinary study of the longitudinal (long-term) effects of design in a range of different open source projects.  He will gather data, analyze it, and test hypotheses in order to shed light on issues such as, how the design of the artifact influenced the structure and activities of the project team, as well as the final product.  Previous research suggests that design impacts, over time, both the qualities of the product, the social structure used in its construction, and even the appeal of the endeavor to volunteers.  The study of these effects involves analysis of a large and varied collection of time-series data, and the use of models and theories from a variety of disciplines, some outside of software engineering, which the PI and his interdisciplinary team are well equipped to handle.&lt;br&gt;&lt;br&gt;Broader Impacts:  Open source and commercial software systems have an enormous impact on the economy and society.  An improved understanding of the social processes underlying open source systems could help improve software engineering practice, and lead to faster, easier development of better software systems, in both open source and commercial settings.  The PI will apply his findings in practice, not just in his regular classrooms, but also through the establishment of a new initiative in partnership with a local high school intended to excite minority and female students about becoming more involved in software development, and in particular in open source communities.</column>
</row>
<row>
<column>0613967</column>
<column>SoD-TEAM: Robust System Design Under Weak Component Assumptions                                                                                                                     </column>
<column>CNS </column>
<column>ITR-SCIENCE OF DESIGN</column>
<column>September 1, 2006</column>
<column>July 26,  2006</column>
<column>Zhou, Hai</column>
<column>IL</column>
<column>Northwestern University                                         </column>
<column>Standard Grant                               </column>
<column>Anita J. LaSalle                        </column>
<column>August 31,  2008</column>
<column>200000</column>
<column>Alok            Choudhary               |Robert          Dick                    |</column>
<column>haizhou@eecs.northwestern.edu</column>
<column>633 CLARK ST                    </column>
<column>EVANSTON                  </column>
<column>IL</column>
<column>60208</column>
<column>8474913003</column>
<column>CSE </column>
<column>7372</column>
<column>HPCC|9218|7372</column>
<column>0000912 Computer Science                        |</column>
<column>0613967</column>
<column>Directorate for Computer and Information Science and Engineering (CISE)&lt;br&gt;Division Computer and Network Systems (CNS)&lt;br&gt;Science of Design (SoD) Program&lt;br&gt;&lt;br&gt;Proposal Number:	                0613967	&lt;br&gt;P/I:			Hai Zhou	&lt;br&gt;PI&apos;s Department:	                Electrical and Computer Engineering	&lt;br&gt;Institution:		Northwestern University&lt;br&gt;Award: 		                $200,000 for 24 months&lt;br&gt;&lt;br&gt;Title: 			&quot;SoD TEAM: Robust System Design Under Weak Component Assumptions&quot;&lt;br&gt;&lt;br&gt;&lt;br&gt;This project focuses on developing a new &quot;science of design&quot; for large, robust systems.  Typically, large-scale robust systems are distributed and reactive with heterogeneous components that may be designed by different contributors; some may be legacy systems and some may be un-trusted third-party programs. Recent rapid development and deployment of Internet and networked devices, such as cell phones and sensor networks, has resulted in application systems development that is vastly different from traditional software engineering: commercial of-the-shelf components, legacy components, and un-trusted components are generally unavoidable as components in such a system. Diminished designer-control over components poses a challenge: the weaker the component assumptions, the more difficult it is to build a provably-correct system or even a system that meets requirements. This project&apos;s &quot;science of design&quot; provides precise specifications for imperfect components, gives functional limits of feasible systems under different assumptions, and provides a methodology to design a robust system under weak component assumptions. The PIs anticipate that their rigorous theory of design and specification (based on adapting and extending Temporal Logic of Action -- TLA -- a program logic that expresses both programs and their properties with a single language) will deepen understanding of the relationships and trade-offs between system assurance and component-assumptions, particularly for concurrent systems. Such a design methodology (i.e., their language for specifying components and a set of tools for checking system properties) facilitate the design of larger and more secure systems. &lt;br&gt;&lt;br&gt;Program Manager: Anita J. La Salle&lt;br&gt;Date: June 21, 2006&lt;br&gt;</column>
</row>
<row>
<column>0613969</column>
<column>SoD-HCER Semantics Based System Design Using Omega                                                                                                                                  </column>
<column>CCF </column>
<column>ITR-SCIENCE OF DESIGN</column>
<column>September 1, 2006</column>
<column>August 1,  2006</column>
<column>Sheard, Tim</column>
<column>OR</column>
<column>Portland State University                                       </column>
<column>Standard Grant                               </column>
<column>Sol J. Greenspan                        </column>
<column>August 31,  2008</column>
<column>242678</column>
<column></column>
<column>sheard@cs.pdx.edu</column>
<column>1721 NE BROADWAY ST             </column>
<column>portland                  </column>
<column>OR</column>
<column>97232</column>
<column>5037253423</column>
<column>CSE </column>
<column>7372</column>
<column>HPCC|9218|7372</column>
<column>0000912 Computer Science                        |</column>
<column>0613969</column>
<column>ABSTRACT&lt;br&gt;0613969&lt;br&gt;PI: Tim Sheard&lt;br&gt;Portland State U&lt;br&gt;&lt;br&gt;TITLE:  SoD-HCER Semantics Based System Design Using Omega&lt;br&gt;&lt;br&gt;Previous work of the proposers includes a prototype of the programming language Omega. Omega supports an infinite hierarchy of computational levels: value, type, kind, etc. Computation at the value level is performed by reduction. Computation at all higher levels is performed by narrowing. Terms at each level are classified by terms at the next level. Thus values are classified by types, types are classified by kinds, etc. A strict phase distinction is maintained -- the classification of a term at level &quot;n&quot; cannot depend upon terms at lower levels. Properties of programs are formalized by exploiting the Curry-Howard isomorphism -- Terms at computational level &quot;n&quot;, are used as proofs about terms at level &quot;n+1&quot;.&lt;br&gt;&lt;br&gt;The thesis of the proposal is that this kind of system makes an excellent design language. The impact of the proposal is that the specification of designs, the implementation of programs, and the checking of adherence of programs to designs are bundled in a coherent manner into a single formal system.&lt;br&gt;&lt;br&gt;The work of the proposal carries the Omega system beyond the proof of concept stage. It will add new features to Omega, strengthen Omega&apos;s foundations, investigate new applications, and build a more robust implementation.&lt;br&gt;&lt;br&gt;</column>
</row>
<row>
<column>0613971</column>
<column>SoD-TEAM: Design for Adaptivity and Reliable Operation of Software Intensive Systems                                                                                                </column>
<column>CNS </column>
<column>ITR-SCIENCE OF DESIGN</column>
<column>September 1, 2006</column>
<column>August 9,  2006</column>
<column>Abdelwahed, Sherif</column>
<column>TN</column>
<column>Vanderbilt University                                           </column>
<column>Standard Grant                               </column>
<column>Anita J. LaSalle                        </column>
<column>August 31,  2008</column>
<column>199866</column>
<column>Gabor           Karsai                  |Douglas         Schmidt                 |</column>
<column>sherif.abdelwahed@vanderbilt.edu</column>
<column>Division of Sponsored Research  </column>
<column>NASHVILLE                 </column>
<column>TN</column>
<column>37235</column>
<column>6153222631</column>
<column>CSE </column>
<column>7372</column>
<column>HPCC|9218|9150|7372</column>
<column>0000912 Computer Science                        |</column>
<column>0613971</column>
<column>ABSTRACT&lt;br&gt;&lt;br&gt;Directorate for Computer and Information Science and Engineering (CISE)&lt;br&gt;Division Computer and Network Systems (CNS)&lt;br&gt;Science of Design (SoD) Program&lt;br&gt;&lt;br&gt;Proposal Number: 0613971&lt;br&gt;P/I: Sherif Abdelwahed&lt;br&gt;PI&apos;s Department: Electrical Engineering - Computer Science&lt;br&gt;Institution: Vanderbilt University&lt;br&gt;Award: $ 199,866&lt;br&gt;&lt;br&gt;Title:  &quot;SoD-TEAM: Design for Adaptivity and Reliable Operation of Software Intensive Systems&quot;&lt;br&gt;&lt;br&gt;This project addresses design techniques for Software-Intensive Systems (SIS). The scientific contribution of the project is the conversion of a significant segment of the design process of software-intensive systems, typically handled manually in an ad-hoc manner, into a systematic semi-automated process based on mathematical models and control-theoretic techniques. The model-based techniques and tools will simplify the development of a large class of distributed real-time and embedded software-intensive system, which will enable a major improvement in the ability to design and implement complex systems that will operate in uncertain environments in a cost-effective manner. The science and technology developed by this project will inform designers about how to build more effective and reliable systems.  Along with the new design methodology proposed, the PIs will develop a set of tools that facilitate the design, analysis, and verification tasks, making it easier to design and analyze systems, while offering a higher degree of confidence in assured operations. In addition to the basic research component of the project, there is an educational component that will contribute to the development of practitioners in the field. Students at this institution are introduced to systematic methods for embedded system design and implementation using modeling, analysis, and verification tools developed by the R&amp;D community. To provide students with more hands on experiences, project-related graduate-level courses will be developed that address issues in software-intensive system design and implementation on realistic test beds.&lt;br&gt;&lt;br&gt;&lt;br&gt;Program Manager: Anita J. La Salle&lt;br&gt;Date: July 11, 2006&lt;br&gt;</column>
</row>
<row>
<column>0613997</column>
<column>SoD-TEAM: Programming by Sketching                                                                                                                                                  </column>
<column>CCF </column>
<column>ITR-SCIENCE OF DESIGN</column>
<column>October 1, 2006</column>
<column>September 26,  2006</column>
<column>Bodik, Rastislav</column>
<column>CA</column>
<column>University of California-Berkeley                               </column>
<column>Standard Grant                               </column>
<column>Sol J. Greenspan                        </column>
<column>September 30,  2008</column>
<column>200000</column>
<column>Sanjit          Seshia                  |</column>
<column>bodik@cs.berkeley.edu</column>
<column>Sponsored Projects Office       </column>
<column>BERKELEY                  </column>
<column>CA</column>
<column>94704</column>
<column>5106426000</column>
<column>CSE </column>
<column>7372</column>
<column>HPCC|9218|7372</column>
<column>0000912 Computer Science                        |</column>
<column>0613997</column>
<column>0613997&lt;br&gt;Rastislav Bodik&lt;br&gt;U of Cal - Berkeley&lt;br&gt;&lt;br&gt;TITLE Programming by Sketching&lt;br&gt;&lt;br&gt;Software is designed and implemented in a layered way: requirements are refined into designs, which are in turn implemented with low-level code.&lt;br&gt;The implementation gap is responsible for the lack of a formal correctness connection between the layers: functionality is typically not formally specified and implementations are produced by hand rather than generated. &lt;br&gt;&lt;br&gt;This project proposes to bridge the implementation gap by making it easier both to write specifications and to implement the low-level code.  To make the challenging problem manageable, the project focuses on the domain of scientific computing.  The chief technical approach is sketching, a new software synthesis approach where the programmer develops a partial implementation --- a sketch --- and a separate specification of the desired functionality.  The synthesizer then completes the sketch to behave like the&lt;br&gt;specification.   &lt;br&gt;&lt;br&gt;This exploratory project will (a) investigate how to extend the applicability of a SAT-based synthesizer to increasingly larger programs; b) develop techniques for synthesizing programs that are currently beyond the power of the SAT synthesizer; and (c) develop a robust sketching synthesizer for a class of scientific programs.&lt;br&gt;</column>
</row>
<row>
<column>0613998</column>
<column>SoD-TEAM: Tools and Techniques for On-the-Fly Design of Business Process Integration                                                                                                </column>
<column>CNS </column>
<column>ITR-SCIENCE OF DESIGN</column>
<column>September 1, 2006</column>
<column>August 23,  2006</column>
<column>Su, Jianwen</column>
<column>CA</column>
<column>University of California-Santa Barbara                          </column>
<column>Standard Grant                               </column>
<column>Anita J. LaSalle                        </column>
<column>August 31,  2008</column>
<column>200000</column>
<column>Richard         Hull                    |</column>
<column>su@cs.ucsb.edu</column>
<column>Office of Research              </column>
<column>SANTA BARBARA             </column>
<column>CA</column>
<column>93106</column>
<column>8058934188</column>
<column>CSE </column>
<column>7372</column>
<column>HPCC|9218|7372</column>
<column>0000912 Computer Science                        |</column>
<column>0613998</column>
<column>Directorate for Computer and Information Science and Engineering (CISE)&lt;br&gt;Division Computer and Network Systems (CNS)&lt;br&gt;Science of Design (SoD) Program&lt;br&gt;&lt;br&gt;Proposal Number: 0613998		&lt;br&gt;P/I: Su, Jianwen				&lt;br&gt;PI&apos;s Department: Computer Science		&lt;br&gt;Institution: University of California - Santa Barbara		&lt;br&gt;Award: $ 200,000	&lt;br&gt;&lt;br&gt;Title: &quot;SoD-TEAM: Tools and Techniques for On-the-fly Design of Business Process Integration&quot;&lt;br&gt;&lt;br&gt;The focus of this project is on developing a formal framework and collection of tools that aid in the design (or re-design) and management of business processes and business process integration (BPI) - that is, processes and people that are within and between enterprises. Within the software engineering domain, the goal is to reduce development times and produce higher quality code in enterprise software that is continually evolving due to changing business needs and management initiatives. This project builds upon and compliments tools and technologies developed over the past decade such as: Services Oriented Architecture (SOA), Model Driven Architecture (MDA), and associated standards (primarily from the Extensible Markup Language (XML), web services, Unified Modeling Language (UML), and Object Management Group (OMG) communities). The SOA and MDA paradigms focus primarily on procedural representations of business processes and BPI environments. The premise of this research is that value can be added to BPI by developing a targeted declarative framework for specifying the properties of business processes and associated artifacts, including their possible behaviors and possible impacts on their environment. Two improvements that this declarative approach may produce are: (1) precision, because in many cases the procedural specifications, especially when at a higher level of abstraction, are ambiguous in subtle and not-so-subtle ways, and (2) flexibility, because it will afford many more kinds of incomplete specification than available from the procedural approaches. The foundation of the declarative framework for BPI is provided by the Process Specification Language (PSL), a first-order logic based ISO standard developed for specifying, analyzing, and integrating processes, initially introduced manufacturing. The domain of knowledge that supports this project is, to a large extent, the result of prior research by project team members including the design and development of PSL. All four research collaborators played a central role in the development of the Firstorder Logic Ontology for Web Services (FLOWS), which forms part of the Semantic Web Services Framework (SWSF). FLOWS is a formal extension of PSL, which explicitly incorporates and axiomatizes in a declarative framework the key building blocks of semantic web services. FLOWS (and PSL beneath it) provide a starting point for the development of a declarative framework for supporting BPI design. By targeting on the design and management of business processes with the service-oriented paradigm, this project may improve the efficiency and productivity of business process management and integration and lay a foundation for SOA research as a step towards service science. &lt;br&gt;&lt;br&gt;Program Manager: Anita J. La Salle&lt;br&gt;Date: July 18, 2006&lt;br&gt;</column>
</row>
<row>
<column>0614002</column>
<column>SoD-HCER: Design for Verification                                                                                                                                                   </column>
<column>CCF </column>
<column>ITR-SCIENCE OF DESIGN</column>
<column>August 15, 2006</column>
<column>August 4,  2006</column>
<column>Bultan, Tevfik</column>
<column>CA</column>
<column>University of California-Santa Barbara                          </column>
<column>Standard Grant                               </column>
<column>Sol J. Greenspan                        </column>
<column>July 31,  2008</column>
<column>200000</column>
<column></column>
<column>bultan@cs.ucsb.edu</column>
<column>Office of Research              </column>
<column>SANTA BARBARA             </column>
<column>CA</column>
<column>93106</column>
<column>8058934188</column>
<column>CSE </column>
<column>7372</column>
<column>HPCC|9218|7372</column>
<column>0000912 Computer Science                        |</column>
<column>0614002</column>
<column>Abstract&lt;br&gt;0614002&lt;br&gt;Tevfik Bultan&lt;br&gt;U of Cal SB&lt;br&gt;&lt;br&gt;Design for Verification&lt;br&gt;&lt;br&gt;Developing dependable software is one of the most important challenges in computer science. In recent years, there has been significant progress in verification techniques that automatically find errors in software. &lt;br&gt;However, these techniques are not capable of analyzing large software systems since they are not scalable. The goal of this project is to develop a design for verification approach that enables software developers to document the design decisions that can be useful during verification in order to improve the scalability and applicability of the automated verification techniques.&lt;br&gt;&lt;br&gt;The proposed research will investigate what type of design information is needed for achieving scalable verification and how this information can be transferred from the design phase to the verification phase. This investigation of the interplay between software design and verification will advance the knowledge both in dependability of software systems and in science of design.&lt;br&gt;&lt;br&gt;A set of design patterns that facilitate building software components that are amenable to automated verification will be developed. These design patterns will provide mechanisms for recording the design information that is necessary to achieve scalable verification. The design patterns developed within this project will also be useful tools in teaching how to construct highly dependable software systems to computer science students.&lt;br&gt;</column>
</row>
<row>
<column>0614003</column>
<column>SoD-TEAM: Teaching Creativity and Conceptual Representation, a Design Toolkit                                                                                                       </column>
<column>CNS </column>
<column>ITR-SCIENCE OF DESIGN</column>
<column>September 1, 2006</column>
<column>August 23,  2006</column>
<column>Amoussou, Guy-Alain</column>
<column>CA</column>
<column>Humboldt State University Foundation                            </column>
<column>Standard Grant                               </column>
<column>Anita J. LaSalle                        </column>
<column>August 31,  2008</column>
<column>207252</column>
<column>Eileen          Cashman                 |Steven          Steinberg               |</column>
<column>amoussou@humboldt.edu</column>
<column>P.O. Box 1185                   </column>
<column>Arcata                    </column>
<column>CA</column>
<column>95518</column>
<column>7078264189</column>
<column>CSE </column>
<column>7372</column>
<column>HPCC|9218|7372</column>
<column>0000912 Computer Science                        |</column>
<column>0614003</column>
<column>ABSTRACT&lt;br&gt;&lt;br&gt;Directorate for Computer and Information Science and Engineering (CISE)&lt;br&gt;Division Computer and Network Systems (CNS)&lt;br&gt;Science of Design (SoD) Program&lt;br&gt;&lt;br&gt;Proposal Number: 0614003&lt;br&gt;P/I: Guy-Alain Amoussou&lt;br&gt;PI&apos;s Department: Department: Computer Science&lt;br&gt;Institution: Humboldt State University&lt;br&gt;&lt;br&gt;Award: $207,252&lt;br&gt;&lt;br&gt;Title: &quot;SoD-TEAM: Teaching Creativity and Conceptual Representation, a Design Toolkit&quot;&lt;br&gt;&lt;br&gt;The objective of this project is to provide new perspectives in teaching software design to undergraduate computer science students in both research and classroom environments. The specific goals of the project are: to build an interdisciplinary and diverse community of faculty and students around the design of Software Intensive Systems, build a foundation for teaching the science of design to undergraduate computer science students and faculty, immerse students in a five week module in methods of creativity and conceptual representation (at NSF REU sites) and other campuses, and conduct formative assessment of impact of the SoD curriculum. The core group of four faculty leading this project are from computer science, engineering and GIS. Other participating faculties are from diverse disciplines. Together, they integrate elements of design from other disciplines with the software engineering field while remaining focused on the science of design for software intensive system. Science of Design, as it relates to software and software intensive systems, is a new area of inquiry with little existing theory or foundation. An important contribution of this educational and research project is the creation of a community of individuals from diverse disciplinary and cultural perspectives to begin establishing such a foundation. This project focuses specific efforts on the creation of an undergraduate level, curricular toolkit which is introduced through curriculum developed and evaluated as a fundamental component of the research component of this project. &lt;br&gt;This proposal addresses three opportunities for broader impact: the primary research goal is to develop a conceptual basis for the science of design as taught in undergraduate computer science curricula. As a means to attain this goal, the project will develop a multidisciplinary community that will both contribute to the SoD as it relates to software design, and influence how participants from these other disciplines, cultures and perspectives conceptualize and teach design in their own areas of expertise along with an impact on the skills of the participants as they consider and later teach the SoD; through REU programs and cross cultural collaboration there may be a positive impact on recruitment and retention of underrepresented populations in undergraduate and graduate computer science programs. This institution, located in proximity to a dozen indigenous tribal groups, is a leader in providing educational opportunities for American Indians. By consciously involving design approaches from a variety of disciplines and cultures the project anticipates a broadening of approaches and perspectives brought to bear on design both in the United States and abroad. This broader view has value and impact beyond the specific tasks related to the SoD proposal and may help to offer participants a greater understanding and sensitivity for differing views and cultural perspectives.&lt;br&gt;&lt;br&gt;Program Manager: Anita J. La Salle&lt;br&gt;Date: &lt;br&gt;</column>
</row>
<row>
<column>0650049</column>
<column>Collaborative Research: SoD-TEAM: A Feedback-Based Architecture for Highly Reliable Embedded Software                                                                               </column>
<column>CNS </column>
<column>ITR-SCIENCE OF DESIGN</column>
<column>September 1, 2006</column>
<column>September 21,  2006</column>
<column>Atkins, Ella</column>
<column>MI</column>
<column>University of Michigan Ann Arbor                                </column>
<column>Standard Grant                               </column>
<column>Anita J. LaSalle                        </column>
<column>August 31,  2008</column>
<column>50000</column>
<column></column>
<column>ematkins@umich.edu</column>
<column>3003 South State St.            </column>
<column>Ann Arbor                 </column>
<column>MI</column>
<column>48109</column>
<column>7347641817</column>
<column>CSE </column>
<column>7372</column>
<column>HPCC|9218|7372</column>
<column>0000912 Computer Science                        |</column>
<column>0650049</column>
<column>Title: &quot;Collaborative Research: SoD-TEAM: A Feedback-Based Architecture for Highly Reliable Embedded Software&quot;&lt;br&gt;&lt;br&gt;The focus of this project is on developing a theory and architectural framework for incorporating feedback control as a main principle of software engineering. This proposal develops scientific foundations, tools, and architectural design principles to improve the reliability and reduce the development cost of mission-critical software. Two common approaches to ensure reliable system behavior are: 1) Scientific foundations, tools, and architectural principles for ensuring elimination of errors, and 2) foundations, tools, and architectural principles for ensuring tolerance to such errors. While the first solution is sufficient, building completely error-free large-scale systems has been an elusive exercise as evidenced by experiences with today&apos;s engineering artifacts (e.g., recalls on vehicles, cascading power blackouts, etc). Consequently, a new approach to robust software design, development and certification is needed that addresses the increasing cost and safety implications of the current practices. Feedback control has proven to be a very successful tool for ensuring correct behavior of complex, poorly modeled systems in the presence of uncertainty. This project applies principles of feedback control and stability envelopes to the engineering of software systems.&lt;br&gt;&lt;br&gt;&lt;br&gt;Program Manager: Anita J. La Salle&lt;br&gt;Date: &lt;br&gt;</column>
</row>
</table>
