%!PS-Adobe-3.0 EPSF-3.0
%%Title: (Visio-RefactoringEpisode.vsd)
%%Version: 1 4
%%Creator: Adobe Acrobat 6.0
%%CreationDate: 11:52:27 11/20/05
%%For: (hongbing)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%BoundingBox: 115 466 455 706
%%HiResBoundingBox: 114.960007 466.0 455.0 705.840027
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%EndComments
%%BeginProlog
%%EndProlog
%%BeginSetup
%ADOPrintSettings: L2 W0 VM op crd os scsa T h ef bg ucr sf ef r b fa pr seps ttf HB  0
%%BeginResource: procset l2check 6.0 1
%%Copyright: Copyright 1993,2001 Adobe Systems Incorporated. All Rights Reserved.
systemdict /languagelevel known
{ systemdict /languagelevel get 1 eq }
{ true }
ifelse
{
initgraphics /Helvetica findfont 18 scalefont setfont
72 600 moveto (Error: Your printer driver needs to be configured) dup show
72 580 moveto (for printing to a PostScript Language Level 1 printer.) dup show
exch = =
/Helvetica-Bold findfont 16 scalefont setfont
72 520 moveto (Windows and Unix) show
/Times-Roman findfont 16 scalefont setfont
72 500 moveto (Select \252Language Level 1\272 in the PostScript options section) show
72 480 moveto (of the Acrobat print dialog.) show
/Helvetica-Bold findfont 16 scalefont setfont
72 440 moveto (Macintosh) show
/Times-Roman findfont 16 scalefont setfont
72 420 moveto (In the Chooser, select your printer driver.) show
72 400 moveto (Then select your printer and click the Setup button.) show
72 380 moveto (Follow any on-screen dialogs that may appear.) show
showpage
quit
}
if
%%EndResource
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars 6.0 1
%%Copyright: Copyright 1987-2002 Adobe Systems Incorporated. All Rights Reserved.
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 162 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/undefineRes/findRes/setSA/pl
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil 6.0 1
%%Copyright: Copyright 1993-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: procset pdf 6.0 1
%%Copyright: Copyright 1998-2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/sg /setgray ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_image {{image} /DataSource pdf_dictOp} bd
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
MaskDict /DataSource get dup type /filetype eq { closefile } { pop } ifelse
end
} [/miDict /DataDict /_Filters] bld
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
c1x c2x eq
{
c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope c2y c1y sub c2x c1x sub div def
/theta slope 1 atan def
c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
c1x c1y translate
theta rotate
-90 rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
/max { 2 copy gt { pop } {exch pop} ifelse } bind def
/min { 2 copy lt { pop } {exch pop} ifelse } bind def
rampdict begin
40 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
c1x c1y translate
theta rotate
-90 rotate
/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
/c1y 0 def
/c1x 0 def
/c2x 0 def
ext0 {
0 getrampcolor
c2y r2 add r1 sub 0.0001 lt
{
c1x c1y r1 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2y r1 add r2 le
{
c1x c1y r1 0 360 arc
fill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r1 neg def
/p1y c1y def
/p2x r1 def
/p2y c1y def
p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
fill
}
{
/AA r2 r1 sub c2y div def
AA -1 eq
{ /theta 89.99 def}
{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
ifelse
/SS1 90 theta add dup sin exch cos div def
/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y p1x SS1 div neg def
/SS2 90 theta sub dup sin exch cos div def
/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y p2x SS2 div neg def
r1 r2 gt
{
/L1maxX p1x yMin p1y sub SS1 div add def
/L2maxX p2x yMin p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
ext1 {
c2y r2 add r1 lt
{
c2x c2y r2 0 360 arc
fill
}
{
c2y r1 add r2 sub 0.0001 le
{
c2x c2y r2 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r2 neg def
/p1y c2y def
/p2x r2 def
/p2y c2y def
p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
fill
}
{
/AA r2 r1 sub c2y div def
AA -1 eq
{ /theta 89.99 def}
{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
ifelse
/SS1 90 theta add dup sin exch cos div def
/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y c2y p1x SS1 div sub def
/SS2 90 theta sub dup sin exch cos div def
/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y c2y p2x SS2 div sub def
r1 r2 lt
{
/L1maxX p1x yMax p1y sub SS1 div add def
/L2maxX p2x yMax p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
grestore
grestore
end
end
end
} ifelse
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse
{
/PDFMark5 {cleartomark} bd
}
{
/PDFMark5 {pdfmark} bd
}ifelse
/ReadByPDFMark5
{
2 dict begin
/makerString exch def string /tmpString exch def
{
currentfile tmpString readline pop
makerString anchorsearch
{
pop pop cleartomark exit
}
{
3 copy /PUT PDFMark5 pop 2 copy (\n) /PUT PDFMark5
} ifelse
}loop
end
}bd
%%EndResource
%%BeginResource: procset pdflev2 6.0 1
%%Copyright: Copyright 1987-2001,2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: PDF operators, with code specific for Level 2
/docinitialize {
PDF begin
/_defaulthalftone currenthalftone dd
/_defaultblackgeneration currentblackgeneration dd
/_defaultundercolorremoval currentundercolorremoval dd
/_defaultcolortransfer [currentcolortransfer] dd
/_defaulttransfer currenttransfer dd
end
PDFVars /docSetupDone true put
} bd
/initialize {
PDFVars /docSetupDone get {
_defaulthalftone sethalftone
/_defaultblackgeneration load setblackgeneration
/_defaultundercolorremoval load setundercolorremoval
_defaultcolortransfer aload pop setcolortransfer
} if
false setoverprint
} bd
/terminate { } bd
/c /curveto ld
/cs /setcolorspace ld
/l /lineto ld
/m /moveto ld
/q /gsave ld
/Q /grestore ld
/sc /setcolor ld
/setSA/setstrokeadjust ld
/re {
4 2 roll m
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
h
} bd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} bd
/defineRes/defineresource ld
/undefineRes/undefineresource ld
/findRes/findresource ld
currentglobal
true systemdict /setglobal get exec
[/Function /ExtGState /Form /Shading /FunctionDictionary /MadePattern /PatternPrototype /DataSource /Image]
{ /Generic /Category findresource dup length dict copy /Category defineresource pop }
forall
systemdict /setglobal get exec
/ri
{
/findcolorrendering isdefined?
{
mark exch
findcolorrendering
counttomark 2 eq
{ type /booleantype eq
{ dup type /nametype eq
{ dup /ColorRendering resourcestatus
{ pop pop
dup /DefaultColorRendering ne
{
/ColorRendering findresource
setcolorrendering
} if
} if
} if
} if
} if
cleartomark
}
{ pop
} ifelse
} bd
/knownColorants? {
pop false
} bd
/getrampcolor {
cvi
/indx exch def
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
setcolor
} bd
/sssetbackground { aload pop setcolor } bd
%%EndResource
%%BeginResource: procset pdftext 6.0 1
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
Level2?
{
/pdfPatchCStrings
{
currentdict /CharStrings known currentdict /FontType known and
{
FontType 1 eq CharStrings type /dicttype eq and
{
CharStrings /mu known CharStrings /mu1 known not and CharStrings wcheck and
{
CharStrings /mu get
type /stringtype eq
{
currentglobal
CharStrings /mu1
CharStrings /mu get
dup gcheck setglobal
dup length string copy
put
setglobal
} if
} if
} if
} if
} bd
}
{ /pdfPatchCStrings {} bd }
ifelse
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
pdfPatchCStrings
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
pdfPatchCStrings
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq Encoding 160 get /.notdef eq and
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
%%BeginResource: procset pdfasc.prc 6.0 1
%%Copyright: Copyright 1992-2003 Adobe Systems Incorporated. All Rights Reserved.
/ASR {
13 dict begin
/mirV? exch def
/mirH? exch def
/center? exch def
/autorotate? exch def
/angle exch def
/shrink exch def
/Pury exch def
/Purx exch def
/Plly exch def
/Pllx exch def
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
Dury 0 eq Durx 0 eq and Dlly 0 eq Dllx 0 eq and and
{ shrink 0 gt { GClipBBox } { GPageBBox } ifelse }
{ ITransDBBox }
ifelse
/PHt Pury Plly sub def
/PW Purx Pllx sub def
/DHt Dury Dlly sub def
/DW Durx Dllx sub def
angle 90 eq angle 270 eq or
{
PHt /PHt PW def /PW exch def
} if
autorotate? PHt PW ne and DHt DW ne and
{
DHt DW ge
PHt PW ge
ne
{ /angle angle 90 add def
PHt /PHt PW def /PW exch def
}
if
} if
angle 0 ne
{
/angle angle 360 mod def
angle rotate
angle 90 eq
{ 0 DW neg translate }
if
angle 180 eq
{ DW neg DHt neg translate }
if
angle 270 eq
{ DHt neg 0 translate }
if
} if
center?
{
ITransBBox
Durx Dllx add 2 div Dury Dlly add 2 div
Purx Pllx add -2 div Pury Plly add -2 div
3 -1 roll add exch
3 -1 roll add exch
translate
}
{
ITransBBox
angle 0 eq
{Dllx Pllx sub Dury Pury sub}
if
angle 90 eq
{Durx Purx sub Dury Pury sub}
if
angle 180 eq
{Durx Purx sub Dlly Plly sub}
if
angle 270 eq
{Dllx Pllx sub Dlly Plly sub}
if
translate
}
ifelse
mirH? mirV? or
{
ITransBBox
mirH?
{
-1 1 scale
Durx Dllx add neg 0 translate
} if
mirV?
{
1 -1 scale
0 Dury Dlly add neg translate
} if
} if
shrink 0 ne
{
ITransBBox
Dury Dlly sub Pury Plly sub div
Durx Dllx sub Purx Pllx sub div
2 copy gt { exch } if pop
shrink 1 eq
{
Durx Dllx add 2 div Dury Dlly add 2 div translate
dup scale
Purx Pllx add -2 div Pury Plly add -2 div translate
}
{
shrink 2 eq 1 index 1.0 lt and
{
Durx Dllx add 2 div Dury Dlly add 2 div translate
dup scale
Purx Pllx add -2 div Pury Plly add -2 div translate
}
{ pop }
ifelse
}
ifelse
} if
end
} [/autorotate? /shrink? /mirH? /mirV? /angle /Pury /Purx /Plly /Pllx /Durx /Dury /Dllx /Dlly /PW /PHt /DW /DHt
/Devurx /Devury /Devllx /Devlly /pdfHt /pdfW]
bld
/GClipBBox
{
gsave newpath clippath pathbbox newpath grestore
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
ITransDBBox
} [/Durx /Dury /Dllx /Dlly]
bld
/GPageBBox
{
{
currentpagedevice /PageSize get aload pop
/Devury exch def /Devurx exch def
/Devllx 0 def /Devlly 0 def
ITransBBox
}
stopped
{ GClipBBox }
if
} [/Devurx /Devury /Devllx /Devlly ]
bld
/ITransDBBox
{
Durx Dury transform matrix defaultmatrix itransform
/Devury exch def
/Devurx exch def
Dllx Dlly transform matrix defaultmatrix itransform
/Devlly exch def
/Devllx exch def
Devury Devlly lt {/Devlly Devury /Devury Devlly def def} if
Devurx Devllx lt {/Devllx Devurx /Devurx Devllx def def} if
} [/Durx /Dury /Dllx /Dlly /Devurx /Devury /Devllx /Devlly ]
bld
/ITransBBox
{
/um matrix currentmatrix matrix defaultmatrix matrix invertmatrix matrix concatmatrix def
Devllx Devlly um itransform
Devurx Devury um itransform
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
Dury Dlly lt {/Dlly Dury /Dury Dlly def def} if
Durx Dllx lt {/Dllx Durx /Durx Dllx def def} if
} [ /um /Durx /Dury /Dllx /Dlly /Devurx /Devury /Devllx /Devlly ]
bld
%%EndResource
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec

[/NamespacePush PDFMark5
[/_objdef {Metadata_In_EPS} /type /stream /OBJ PDFMark5
[{Metadata_In_EPS} 1213 (% &end XMP packet& %) ReadByPDFMark5
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<?adobe-xap-filters esc="CRLF"?>
<x:xmpmeta xmlns:x='adobe:ns:meta/' x:xmptk='XMP toolkit 2.9.1-14, framework 1.6'>
<rdf:RDF xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' xmlns:iX='http://ns.adobe.com/iX/1.0/'>
<rdf:Description rdf:about='uuid:59ea04cc-1e66-4066-8bef-6eae13bb4660' xmlns:pdf='http://ns.adobe.com/pdf/1.3/' pdf:Producer='Acrobat Distiller 6.0.1 (Windows)'></rdf:Description>
<rdf:Description rdf:about='uuid:59ea04cc-1e66-4066-8bef-6eae13bb4660' xmlns:xap='http://ns.adobe.com/xap/1.0/' xap:CreateDate='2005-11-20T11:51:05-10:00' xap:CreatorTool='PScript5.dll Version 5.2.2' xap:ModifyDate='2005-11-20T11:51:05-10:00'></rdf:Description>
<rdf:Description rdf:about='uuid:59ea04cc-1e66-4066-8bef-6eae13bb4660' xmlns:xapMM='http://ns.adobe.com/xap/1.0/mm/' xapMM:DocumentID='uuid:9e47fecb-2179-428e-9ee8-4581b501d063'/>
<rdf:Description rdf:about='uuid:59ea04cc-1e66-4066-8bef-6eae13bb4660' xmlns:dc='http://purl.org/dc/elements/1.1/' dc:format='application/pdf'><dc:title><rdf:Alt><rdf:li xml:lang='x-default'>Visio-RefactoringEpisode.vsd</rdf:li></rdf:Alt></dc:title><dc:creator><rdf:Seq><rdf:li>hongbing</rdf:li></rdf:Seq></dc:creator></rdf:Description>
</rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Metadata_In_EPS} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT PDFMark5
[/Document 1 dict begin /Metadata {Metadata_In_EPS} def currentdict end /BDC PDFMark5
[/NamespacePop PDFMark5

PDFVars/TermAll get exec end end

%%EndSetup
 PDF /docinitialize get exec
PDFVars begin PDF begin PDFVars/InitAll get exec
115 466 340 240 rectclip
114.960007 466.0 340.039993 239.840027 re
W
n
n
122.400002 691.200012 m
180.0 691.200012 l
184.019989 691.200012 187.199997 694.380005 187.199997 698.400024 c
187.199997 702.359985 184.019989 705.600037 180.0 705.600037 c
122.400002 705.600037 l
118.439995 705.600037 115.200005 702.359985 115.200005 698.400024 c
115.200005 694.380005 118.439995 691.200012 122.400002 691.200012 c
[/DeviceRGB] cs 1.0 1.0 1.0 sc

eofill
1 J
1 j
0.48 w
n
122.400002 691.200012 m
180.0 691.200012 l
184.019989 691.200012 187.199997 694.380005 187.199997 698.400024 c
187.199997 702.359985 184.019989 705.600037 180.0 705.600037 c
122.400002 705.600037 l
118.439995 705.600037 115.200005 702.359985 115.200005 698.400024 c
115.200005 694.380005 118.439995 691.200012 122.400002 691.200012 c
h
0.0 0.0 0.0 sc
S
%ADOBeginSubsetFont: IMDFNL+ArialMT Initial
%ADOt1write: (1.0.21)
%%Copyright: Copyright 2005 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /IMDFNL+ArialMT def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
def
/FontBBox {0 0 0 0} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
1 dict dup begin
/.notdef <1C60D8A8C9B6E3FA5101D97F0BCF44F7161DEB1E2A84766DD477E7
C8A936AA182F5809A9> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
[/N16/IMDFNL+ArialMT 1 TZ
142.73999 696.0 m
%ADOBeginSubsetFont: IMDFNL+ArialMT AddGlyphs
%ADOt1write: (1.0.21)
%%Copyright: Copyright 2005 Adobe System Incorporated. All rights reserved.
systemdict begin
/IMDFNL+ArialMT findfont dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/S <1C60D8A8C9B64EDFE3D078722A65C31955939D63AA5C8A4945719B5E558E
3B73A676CC12D1E18D93A8DC67C074D6E352D426981DE76F8EC4CFE5DAE051BE
47753A7C234C4B8D7D9F50292A61882B5500CC701F878FE6279CD19D14EA6035
C725D4931858CF3461C79FFD466BC895EDE173399A2BD2E78AE68911697608AB
C43162F893CD7C777109FD1C2A7BDF43C1311B2D2394EF4EFD7673806B958539
1A018BFE68EF06C54BF8E587A422DFA5D710A4DBF30F08C0D26B4FD7D4009DAD
454C3BA07E20BFDD204112D8AC10A9FED52DB4D91054E587F882FDD5684E75C8
56C9D7B2578D1D43FC927CBD5F2B4CE1D8726D9A38A6BB3D15B84B1D> |-
/t <1C60D8A8C9B854D0F45CF665C7276F8075B54A4ECD6470F395A458CA2D06
5152075036EEECA213894C1EA0DACFBD370590F4B831924E5BDA5281442349CF
AD2545E0750C3004A129C25B1EAA8DEF5DA8BF1998E80AE266F591E64CB5127F
5C42C88FB43C> |-
/a <1C60D8A8C9B7EF32244AC11AA6BAAA29EE8C78E0E7206F4A2776A2D1EA7D
C8D9A28C62ADE3B609CF5E2EE23C64D0B75055BD249ADFEC7B4224D040D883CA
6747571955349CF8AD17E94E6FE5D0259F4D55623D4DC5C3CB4AC64A7A87DBBA
48B7420D7990F3C261DB9838C5B90BF72B82C8238A1A58FE8E6137AAFE2405FD
710F7ADB95B4F576668A6DB104942C88ED8C339BD78AF728DB2916FC74DD74C7
9942CE092A68BDC296553CDE10F01A05D2DEAC7F72D8B1533BA9F1804E12A7AC
722A8F562956D5A9884DE76BDFFB0920754E5122C8F7DA6A7FA5CADB2CD191F5
FF4EBD935D2603160BD9773627504BFDEC8A7B64E9DDD2D336730FA67FFE0A40
AC25E3> |-
/r <1C60D8A8C9B81F2C3A9694980E415F1DEF5C498473095A24D1BE11285789
4FEA85DB28AD762FB8D2F4CAC5BF8B9C18D8A2DFCF155E0751AF58898A6619AD
D420F549AB7C795751D32E8EE6> |-
systemdict /gcheck known {setglobal} if end {end} if
end
/IMDFNL+ArialMT findfont /Encoding get
dup 83 /S put
dup 116 /t put
dup 97 /a put
dup 114 /r put
pop
%ADOEndSubsetFont
/N16 7.979996 Tf
(Start)
[5.338676 2.234398 4.452836 2.673239 2.234398 ] pdfxs
n
122.400002 633.600037 m
180.0 633.600037 l
184.019989 633.600037 187.199997 636.779968 187.199997 640.799988 c
187.199997 644.76001 184.019989 648.0 180.0 648.0 c
122.400002 648.0 l
118.439995 648.0 115.200005 644.76001 115.200005 640.799988 c
115.200005 636.779968 118.439995 633.600037 122.400002 633.600037 c
1.0 1.0 1.0 sc
eofill
n
122.400002 633.600037 m
180.0 633.600037 l
184.019989 633.600037 187.199997 636.779968 187.199997 640.799988 c
187.199997 644.76001 184.019989 648.0 180.0 648.0 c
122.400002 648.0 l
118.439995 648.0 115.200005 644.76001 115.200005 640.799988 c
115.200005 636.779968 118.439995 633.600037 122.400002 633.600037 c
h
0.0 0.0 0.0 sc
S
127.200012 638.400024 m
%ADOBeginSubsetFont: IMDFNL+ArialMT AddGlyphs
%ADOt1write: (1.0.21)
%%Copyright: Copyright 2005 Adobe System Incorporated. All rights reserved.
systemdict begin
/IMDFNL+ArialMT findfont dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/T <1C60D8A8C9B7D8BE16D2C1CA7ED2E06F707C0E9530AE37D06FF7501A595D
3927> |-
systemdict /gcheck known {setglobal} if end {end} if
end
/IMDFNL+ArialMT findfont /Encoding get
dup 84 /T put
pop
%ADOEndSubsetFont
(T)
[4.861353 ] pdfxs
%ADOBeginSubsetFont: IMDFNL+ArialMT AddGlyphs
%ADOt1write: (1.0.21)
%%Copyright: Copyright 2005 Adobe System Incorporated. All rights reserved.
systemdict begin
/IMDFNL+ArialMT findfont dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/e <1C60D8A8C9B7EF322472FA01213C7AD90A23B536C2309DD40D370E2449B0
D0FEF85A6BE8067F30686F143E75903EB6FA56935472EF47CE3F33433C2F0C8B
6FA51573AE54B2C516F6F024F8775AD6639544E339FC2A328548BCBFD58B0EEA
03B7DC3AB069F44477958BFBFAAC7196D411DF9BE0B78A86C4BC33EC5D7C3729
5284C077711C162623860AACA404F650F8D516970257> |-
systemdict /gcheck known {setglobal} if end {end} if
end
/IMDFNL+ArialMT findfont /Encoding get
dup 101 /e put
pop
%ADOEndSubsetFont
(e) show
%ADOBeginSubsetFont: IMDFNL+ArialMT AddGlyphs
%ADOt1write: (1.0.21)
%%Copyright: Copyright 2005 Adobe System Incorporated. All rights reserved.
systemdict begin
/IMDFNL+ArialMT findfont dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/s <1C60D8A8C9B7A73DA057E90C9BFBE0FE301E99CB771FA2F05368A6342B5F
80456D91458EA2F3CAD55CDF89BFF34EEB39D7DD325B057E2BF0E9B878C214E2
BD1BD70DCABE10E0DC8EBCF7B100B55EBE94FB0F17084E21EBD279B324AEABD9
6538911D053BE9D7ECBF43F934B1033C9E405BBE31E7EDB643609C8D779046E1
B250C3CF05E6FA4787649137D90F47F85972A6603BA900DD7CB710E02662DB32
87CB26D7B7AE794611498865FC85A28083D2F6C2DEC302D47619A4A577C5B843
5558FCFE71A1BB6783AFD5F58B6D2C03593B3F2297A66A7E6D13C1E321C57F41
72D53C8FCAF4D28F2B78D3A4BF03> |-
/space <1C60D8A8C9B854D00D> |-
/R <1C60D8A8C9B6079F62E89B521DCDBE3DC5497B8DD99916239C0DFA5ED4F6
32B33575F4260343AF5DB7D477D12055F49C5E99C0AC176EAD42723223937F2B
A15ECAD7751CB6A136B700EE485E38E7CDB87D9465C90BB8E29B04FDDA42609F
BC3833B9FB5105619F4CC434003085F449D9FD5022725306B331FB97B31D2952
57B180DE1FD5465D256CCA19301DA97326882845130A5257BF61307ABA64C3F0
B222> |-
/f <1C60D8A8C9B854D0F47057B2F13303E258FCAEE9E8BBA6E28BB76AD7C9AC
375C57E63FD93AA7EEFE0B415129EF1D4FCA22C92A40BF74338947AB5FDA350C
84006AAFD35679D1D46B6CDD7DB92B5F8282A6F8D013A8A4A9> |-
/c <1C60D8A8C9B7A73DB9D8FD6AA4FBAF8D65C36EA1D4AADBD389F972C0EDCE
9E7F36285FA93A80D3647871D2CE5AAAA6A6A370DC54E1595FB6AAB3E389C9F7
BBBB85F787D6C418B35B940450E5E243895ECFD2205F51B2D154CFFECF34148C
344C1EF806F9AAF539FB961E3EFAF6353381E833DF7C0542FFF27122A28D3654
8FE63FC8465B1B685766E782F0> |-
/o <1C60D8A8C9B7EF32334FFE7884F6C3B903D000D9FD76C2EAE8EDCCA90A98
7875625CA0393015EF6761BE1C3B6D9E9DA4BABE1DD313B783BCBF8F620C846C
7F6361946173FB7A4A6BF94EAA0CB4947DD1974AF371F3C211E584576DE9AD79
F9DA988E9E531810E3876F3029BB1D2ED366525F30E48DD7CE3C9B66C5CC099F
518C54BB58C51D6FB6D0C8> |-
systemdict /gcheck known {setglobal} if end {end} if
end
/IMDFNL+ArialMT findfont /Encoding get
dup 115 /s put
dup 32 /space put
dup 82 /R put
dup 102 /f put
dup 99 /c put
dup 111 /o put
pop
%ADOEndSubsetFont
(st Refactor)
[4.002766 2.231206 2.22163 5.774326 4.449644 2.231206 4.449644 4.002766 2.231206 4.449644 2.670047 
] pdfxs
n
121.979996 504.0 m
180.479996 504.0 l
184.199997 504.0 187.199997 507.0 187.199997 510.720001 c
187.199997 514.440002 184.199997 517.5 180.479996 517.5 c
121.979996 517.5 l
118.259995 517.5 115.200005 514.440002 115.200005 510.720001 c
115.200005 507.0 118.259995 504.0 121.979996 504.0 c
0.0 1.0 0.0 sc
eofill
n
121.979996 504.0 m
180.479996 504.0 l
184.199997 504.0 187.199997 507.0 187.199997 510.720001 c
187.199997 514.440002 184.199997 517.5 180.479996 517.5 c
121.979996 517.5 l
118.259995 517.5 115.200005 514.440002 115.200005 510.720001 c
115.200005 507.0 118.259995 504.0 121.979996 504.0 c
h
0.0 0.0 0.0 sc
S
133.440002 508.379974 m
(T)
[4.861353 ] pdfxs
(e) show
%ADOBeginSubsetFont: IMDFNL+ArialMT AddGlyphs
%ADOt1write: (1.0.21)
%%Copyright: Copyright 2005 Adobe System Incorporated. All rights reserved.
systemdict begin
/IMDFNL+ArialMT findfont dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/P <1C60D8A8C9B64EDFF4950CC53012D47AE97D5586315BA2F5162B63CEC117
C5379A1B3DB174CB2C739C68916A1E99A346AFF71DBF25658867D9AEF1BF3C47
CE1BA73978E8D0D40E52B85A56E08A1369D85E15B0A0C517291916FF6E61D0EF
BF59B4862165C7DEA15B42BE3811C2CAA25C54> |-
systemdict /gcheck known {setglobal} if end {end} if
end
/IMDFNL+ArialMT findfont /Encoding get
dup 80 /P put
pop
%ADOEndSubsetFont
(st Pass)
[4.006756 2.235196 2.22163 5.339475 4.453634 4.006756 4.006756 ] pdfxs
n
151.199997 691.200012 m
151.199997 656.219971 l
S
n
154.199997 657.0 m
151.199997 648.0 l
148.199997 657.0 l
154.199997 657.0 l
eofill
n
132.479996 664.799988 36.900009 9.599976 re
1.0 1.0 1.0 sc
f
0.0 0.0 0.0 sc
132.779999 667.200073 m
%ADOBeginSubsetFont: IMDFNL+ArialMT AddGlyphs
%ADOt1write: (1.0.21)
%%Copyright: Copyright 2005 Adobe System Incorporated. All rights reserved.
systemdict begin
/IMDFNL+ArialMT findfont dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/C <1C60D8A8C9B6079F6D1C46AC2732DFBDC9143C94793529C1940296210AAD
6EE09C39CFC4DAB7C5F3BA33C9E10838E0BC6FC9318A4E57F309EE20438B434C
69AE73A499211EBA75E22A57C1581D93869428818DC700A28C027571D7047CDF
A8B017AACDE96DE4B2579EFD2C826A30F6EBDDC52701A22CDD669ADC60B66F32
261A1F55EDEF9802FD4511E0EF130772EDFD708A4113A1EDB1E717E0FA7D3148
51DE59> |-
/d <1C60D8A8C9B7EF322407C6655A1B3652DB8522EB511BE6B0855A72D96214
58876CAD1FA22A00635F436A34E23EAFC09C394044ECC1389CD99E4AF1C1F6DD
52305C78619784840FC37A805B0805EF290BC9E049CF068290816CB7E74DB612
941355BCE71CBDD11DD0F9CA29531036ED13EFB9CAB613E9F630FBBC9408EF13
CE4683D92968530F64760C3DF85C7C7EA06EBA8BF859> |-
systemdict /gcheck known {setglobal} if end {end} if
end
/IMDFNL+ArialMT findfont /Encoding get
dup 67 /C put
dup 100 /d put
pop
%ADOEndSubsetFont
(Code T)
[5.770336 4.445654 4.445654 4.445654 2.22163 4.921203 ] pdfxs
(e) show
(st)
[3.998776 2.227216 ] pdfxs
n
151.440002 561.600037 m
151.440002 558.23999 l
151.199997 558.0 l
150.959991 558.23999 l
150.959991 561.600037 l
151.199997 561.839966 l
151.37999 561.719971 l
151.440002 561.600037 l
h
151.440002 555.839966 m
151.440002 552.47998 l
151.199997 552.23999 l
150.959991 552.47998 l
150.959991 555.839966 l
151.199997 556.080017 l
151.440002 555.839966 l
h
151.440002 550.080017 m
151.440002 546.719971 l
151.199997 546.47998 l
150.959991 546.719971 l
150.959991 550.080017 l
151.199997 550.320007 l
151.440002 550.080017 l
h
151.440002 544.320007 m
151.440002 540.959961 l
151.199997 540.719971 l
150.959991 540.959961 l
150.959991 544.320007 l
151.199997 544.559998 l
151.440002 544.320007 l
h
151.440002 538.559998 m
151.440002 535.200012 l
151.199997 534.959961 l
150.959991 535.200012 l
150.959991 538.559998 l
151.199997 538.799988 l
151.440002 538.559998 l
h
151.440002 532.799988 m
151.440002 529.440002 l
151.199997 529.200012 l
150.959991 529.440002 l
150.959991 532.799988 l
151.199997 533.039978 l
151.440002 532.799988 l
h
151.440002 527.039978 m
151.440002 526.619995 l
151.37999 526.440002 l
151.199997 526.380005 l
151.080002 526.440002 l
150.959991 526.619995 l
150.959991 527.039978 l
151.199997 527.279968 l
151.440002 527.039978 l
f
n
154.199997 527.400024 m
151.199997 518.400024 l
148.199997 527.400024 l
154.199997 527.400024 l
eofill
n
132.479996 535.200012 36.900009 9.599976 re
1.0 1.0 1.0 sc
f
0.0 0.0 0.0 sc
132.779999 537.600037 m
(Code T)
[5.770336 4.445654 4.445654 4.445654 2.22163 4.921203 ] pdfxs
(e) show
(st)
[3.998776 2.227216 ] pdfxs
n
122.400002 568.799988 m
180.0 568.799988 l
184.019989 568.799988 187.199997 571.97998 187.199997 576.0 c
187.199997 579.959961 184.019989 583.200012 180.0 583.200012 c
122.400002 583.200012 l
118.439995 583.200012 115.200005 579.959961 115.200005 576.0 c
115.200005 571.97998 118.439995 568.799988 122.400002 568.799988 c
1.0 0.0 0.0 sc
eofill
n
122.400002 568.799988 m
180.0 568.799988 l
184.019989 568.799988 187.199997 571.97998 187.199997 576.0 c
187.199997 579.959961 184.019989 583.200012 180.0 583.200012 c
122.400002 583.200012 l
118.439995 583.200012 115.200005 579.959961 115.200005 576.0 c
115.200005 571.97998 118.439995 568.799988 122.400002 568.799988 c
h
0.0 0.0 0.0 sc
S
133.860001 573.600037 m
(T)
[4.914819 ] pdfxs
(e) show
%ADOBeginSubsetFont: IMDFNL+ArialMT AddGlyphs
%ADOt1write: (1.0.21)
%%Copyright: Copyright 2005 Adobe System Incorporated. All rights reserved.
systemdict begin
/IMDFNL+ArialMT findfont dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/F <1C60D8A8C9B7D8BE1661AF70E1029B586475C590C02056C6BE2BB9C2329F
7F6ED1937D1E8A10> |-
systemdict /gcheck known {setglobal} if end {end} if
end
/IMDFNL+ArialMT findfont /Encoding get
dup 70 /F put
pop
%ADOEndSubsetFont
(st F)
[3.959674 2.22163 2.22163 4.914819 ] pdfxs
(a) show
%ADOBeginSubsetFont: IMDFNL+ArialMT AddGlyphs
%ADOt1write: (1.0.21)
%%Copyright: Copyright 2005 Adobe System Incorporated. All rights reserved.
systemdict begin
/IMDFNL+ArialMT findfont dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/i <1C60D8A8C9B88C087228DFC7C7ABCC71B868F57EDB285655227000619B17
1C8A80AB> |-
/l <1C60D8A8C9B88C08722AD20D19A90F9064193C8D82> |-
systemdict /gcheck known {setglobal} if end {end} if
end
/IMDFNL+ArialMT findfont /Encoding get
dup 105 /i put
dup 108 /l put
pop
%ADOEndSubsetFont
(ils)
[1.810662 1.738842 4.029099 ] pdfxs
138.960022 491.999756 m
%ADOBeginSubsetFont: IMDFNL+ArialMT AddGlyphs
%ADOt1write: (1.0.21)
%%Copyright: Copyright 2005 Adobe System Incorporated. All rights reserved.
systemdict begin
/IMDFNL+ArialMT findfont dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/y <1C60D8A8C9B7A73DB92EFAEC912AA9CB61EA2C87B96577B4D13A11140AAA
18C6E226D96ACA3DE3B427B0A298EF106E8BC0FCA1DC8D81AF2F08A42A0F5836
B6230FDF576E37CE129EFF9730F23EC10CF5ACA4D4CA70309E71B89A944CA734
8AEBF55FF5ADA9F61B4BA14C9A2301A8C53EBFBE665E1DC22E> |-
systemdict /gcheck known {setglobal} if end {end} if
end
/IMDFNL+ArialMT findfont /Encoding get
dup 121 /y put
pop
%ADOEndSubsetFont
(Ty)
[4.921203 3.959674 ] pdfxs
%ADOBeginSubsetFont: IMDFNL+ArialMT AddGlyphs
%ADOt1write: (1.0.21)
%%Copyright: Copyright 2005 Adobe System Incorporated. All rights reserved.
systemdict begin
/IMDFNL+ArialMT findfont dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/p <1C60D8A8C9B7EF322B3B0CFC8FED720BC90E20B208D27DC4B8F11F10B964
70F8B4F5FABEC7F7010781F5077B417FE44279776F2304ACD6E0EA12F436330D
C4B79C907B9D28468D10FF9256A7D2CA504E4498D719ACD86FCA89B33C61F556
CF1168C3F262A781155D5EBF0C47D71C584AB93037B47B18D39FE408A49672C1
E63F9E8368D19E113FC95C59A9FA4650E46F6399F2FF256844E27568BA34B9> |-
systemdict /gcheck known {setglobal} if end {end} if
end
/IMDFNL+ArialMT findfont /Encoding get
dup 112 /p put
pop
%ADOEndSubsetFont
(p) show
%ADOBeginSubsetFont: IMDFNL+ArialMT AddGlyphs
%ADOt1write: (1.0.21)
%%Copyright: Copyright 2005 Adobe System Incorporated. All rights reserved.
systemdict begin
/IMDFNL+ArialMT findfont dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/one <1C60D8A8C9B7EF32247817CBAD74894E625B0BAD23872C089E8D91F92F
E1B529DBABA181AB8B085B7A00FC86C529813E9B576642> |-
systemdict /gcheck known {setglobal} if end {end} if
end
/IMDFNL+ArialMT findfont /Encoding get
dup 49 /one put
pop
%ADOEndSubsetFont
(e 1)
[4.499119 2.22163 4.482362 ] pdfxs
127.199905 482.399811 m
(T)
[4.861353 ] pdfxs
(e) show
(st Refactor)
[4.002766 2.231206 2.22163 5.774326 4.449644 2.231206 4.449644 4.002766 2.231206 4.449644 2.670047 
] pdfxs
n
151.440002 633.600037 m
151.440002 630.23999 l
151.199997 630.0 l
150.959991 630.23999 l
150.959991 633.600037 l
151.199997 633.839966 l
151.37999 633.719971 l
151.440002 633.600037 l
h
151.440002 627.839966 m
151.440002 624.47998 l
151.199997 624.23999 l
150.959991 624.47998 l
150.959991 627.839966 l
151.199997 628.079956 l
151.440002 627.839966 l
h
151.440002 622.079956 m
151.440002 618.719971 l
151.199997 618.47998 l
150.959991 618.719971 l
150.959991 622.079956 l
151.199997 622.320007 l
151.440002 622.079956 l
h
151.440002 616.320007 m
151.440002 612.959961 l
151.199997 612.719971 l
150.959991 612.959961 l
150.959991 616.320007 l
151.199997 616.559998 l
151.440002 616.320007 l
h
151.440002 610.559998 m
151.440002 607.200012 l
151.199997 606.959961 l
150.959991 607.200012 l
150.959991 610.559998 l
151.199997 610.799988 l
151.440002 610.559998 l
h
151.440002 604.799988 m
151.440002 601.440002 l
151.199997 601.200012 l
150.959991 601.440002 l
150.959991 604.799988 l
151.199997 605.039978 l
151.440002 604.799988 l
h
151.440002 599.039978 m
151.440002 595.679993 l
151.199997 595.440002 l
150.959991 595.679993 l
150.959991 599.039978 l
151.199997 599.279968 l
151.440002 599.039978 l
h
151.440002 593.279968 m
151.440002 591.419983 l
151.37999 591.23999 l
151.199997 591.179993 l
151.080002 591.23999 l
150.959991 591.419983 l
150.959991 593.279968 l
151.199997 593.519958 l
151.440002 593.279968 l
f
n
154.199997 592.200012 m
151.199997 583.200012 l
148.199997 592.200012 l
154.199997 592.200012 l
eofill
n
132.479996 603.600037 36.900009 9.599976 re
1.0 1.0 1.0 sc
f
0.0 0.0 0.0 sc
132.779999 606.0 m
(Code T)
[5.770336 4.445654 4.445654 4.445654 2.22163 4.921203 ] pdfxs
(e) show
(st)
[3.998776 2.227216 ] pdfxs
n
288.0 691.200012 m
345.600006 691.200012 l
349.619995 691.200012 352.800018 694.380005 352.800018 698.400024 c
352.800018 702.359985 349.619995 705.600037 345.600006 705.600037 c
288.0 705.600037 l
284.040009 705.600037 280.800018 702.359985 280.800018 698.400024 c
280.800018 694.380005 284.040009 691.200012 288.0 691.200012 c
1.0 1.0 1.0 sc
eofill
n
288.0 691.200012 m
345.600006 691.200012 l
349.619995 691.200012 352.800018 694.380005 352.800018 698.400024 c
352.800018 702.359985 349.619995 705.600037 345.600006 705.600037 c
288.0 705.600037 l
284.040009 705.600037 280.800018 702.359985 280.800018 698.400024 c
280.800018 694.380005 284.040009 691.200012 288.0 691.200012 c
h
0.0 0.0 0.0 sc
S
308.339996 696.0 m
(Start)
[5.338676 2.234398 4.452836 2.673239 2.234398 ] pdfxs
n
288.0 633.600037 m
345.600006 633.600037 l
349.619995 633.600037 352.800018 636.779968 352.800018 640.799988 c
352.800018 644.76001 349.619995 648.0 345.600006 648.0 c
288.0 648.0 l
284.040009 648.0 280.800018 644.76001 280.800018 640.799988 c
280.800018 636.779968 284.040009 633.600037 288.0 633.600037 c
1.0 1.0 1.0 sc
eofill
n
288.0 633.600037 m
345.600006 633.600037 l
349.619995 633.600037 352.800018 636.779968 352.800018 640.799988 c
352.800018 644.76001 349.619995 648.0 345.600006 648.0 c
288.0 648.0 l
284.040009 648.0 280.800018 644.76001 280.800018 640.799988 c
280.800018 636.779968 284.040009 633.600037 288.0 633.600037 c
h
0.0 0.0 0.0 sc
S
297.660004 643.200073 m
%ADOBeginSubsetFont: IMDFNL+ArialMT AddGlyphs
%ADOt1write: (1.0.21)
%%Copyright: Copyright 2005 Adobe System Incorporated. All rights reserved.
systemdict begin
/IMDFNL+ArialMT findfont dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/u <1C60D8A8C9B7EF32240889FE90FF09F794E92023A18223CCBE3629AB7F51
7D090BF7D55C0A5A8EADD9BE381137FE8504E8B2DB3D16839889E327241ACA8F
992A2BB9AD2BCE57ADB306CE2789439E67A64C32BE8669C197F5851EE3879399
0906DA8D7F8ACFF6D70790F06B02> |-
systemdict /gcheck known {setglobal} if end {end} if
end
/IMDFNL+ArialMT findfont /Encoding get
dup 117 /u put
pop
%ADOEndSubsetFont
(Productio)
[5.327505 2.699573 4.441664 4.441664 4.441664 3.994786 2.223226 1.776348 4.499119 ] pdfxs
%ADOBeginSubsetFont: IMDFNL+ArialMT AddGlyphs
%ADOt1write: (1.0.21)
%%Copyright: Copyright 2005 Adobe System Incorporated. All rights reserved.
systemdict begin
/IMDFNL+ArialMT findfont dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/n <1C60D8A8C9B7EF322B3BE19FB964E04D2DB06D4930CA5D8F41D2EF3A285C
0BD536CD2C57668EB9E30311BF9A2872DFB44F2BF2A4683B5D66FA01BB1CCDAD
E9C8A9EE2CB010715D3D6DFF0E843CF77C87A07D1DBD0482675E3CA1DAA2A520
3A8015DD09B7CE> |-
systemdict /gcheck known {setglobal} if end {end} if
end
/IMDFNL+ArialMT findfont /Encoding get
dup 110 /n put
pop
%ADOEndSubsetFont
(n) show
( ) show
301.680328 633.600159 m
(Ref)
[5.754376 4.429694 2.28148 ] pdfxs
(a) show
(ctor)
[3.982816 2.211256 4.49912 2.650097 ] pdfxs
n
288.47998 568.799988 m
345.179993 568.799988 l
349.380005 568.799988 352.800018 572.219971 352.800018 576.419983 c
352.800018 580.619995 349.380005 584.100037 345.179993 584.100037 c
288.47998 584.100037 l
284.279999 584.100037 280.800018 580.619995 280.800018 576.419983 c
280.800018 572.219971 284.279999 568.799988 288.47998 568.799988 c
1.0 0.0 0.0 sc
eofill
n
288.47998 568.799988 m
345.179993 568.799988 l
349.380005 568.799988 352.800018 572.219971 352.800018 576.419983 c
352.800018 580.619995 349.380005 584.100037 345.179993 584.100037 c
288.47998 584.100037 l
284.279999 584.100037 280.800018 580.619995 280.800018 576.419983 c
280.800018 572.219971 284.279999 568.799988 288.47998 568.799988 c
h
0.0 0.0 0.0 sc
S
299.459991 574.019958 m
(T)
[4.914819 ] pdfxs
(e) show
(st F)
[3.959674 2.22163 2.22163 4.914819 ] pdfxs
(a) show
(ils)
[1.810662 1.738842 4.029099 ] pdfxs
n
288.0 504.0 m
345.600006 504.0 l
349.619995 504.0 352.800018 507.179993 352.800018 511.200012 c
352.800018 515.159973 349.619995 518.400024 345.600006 518.400024 c
288.0 518.400024 l
284.040009 518.400024 280.800018 515.159973 280.800018 511.200012 c
280.800018 507.179993 284.040009 504.0 288.0 504.0 c
0.0 1.0 0.0 sc
eofill
n
288.0 504.0 m
345.600006 504.0 l
349.619995 504.0 352.800018 507.179993 352.800018 511.200012 c
352.800018 515.159973 349.619995 518.400024 345.600006 518.400024 c
288.0 518.400024 l
284.040009 518.400024 280.800018 515.159973 280.800018 511.200012 c
280.800018 507.179993 284.040009 504.0 288.0 504.0 c
h
0.0 0.0 0.0 sc
S
299.040009 508.800018 m
(T)
[4.861353 ] pdfxs
(e) show
(st Pass)
[4.006756 2.235196 2.22163 5.339475 4.453634 4.006756 4.006756 ] pdfxs
304.559784 489.600128 m
(Ty)
[4.921203 3.959674 ] pdfxs
(p) show
%ADOBeginSubsetFont: IMDFNL+ArialMT AddGlyphs
%ADOt1write: (1.0.21)
%%Copyright: Copyright 2005 Adobe System Incorporated. All rights reserved.
systemdict begin
/IMDFNL+ArialMT findfont dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/three <1C60D8A8C9B7EF322B10FC2B166D2172609B896A28AF8161ACE0368A
FE548E0A1C2891C9468F6CF8001203B3D0EAEFD5067EEA36A5DE0843B3FA3DD1
0C10DEDE7ECC4B1F205F8D09B2A1084955D8410715DAE41E60E9BEA3731CCA76
98FDFAB2F6C5BD853C3D3957C1C3A42CED93CA60AD0CBA44CB0A07053B47ECAA
14A0E56199A33A25603E5DB2CC6A470C6EFBC4EF226D2F67623C83F45C93E2C0
2C0A9A0974576F8175C7B2D4E9F1C9319763C8100AFBFF1D8FFF8EB10F2B0608
AF6A0E137303863C59034E23F8CA0DCA04C3BBA93B80F099> |-
systemdict /gcheck known {setglobal} if end {end} if
end
/IMDFNL+ArialMT findfont /Encoding get
dup 51 /three put
pop
%ADOEndSubsetFont
(e 3)
[4.499119 2.22163 4.482362 ] pdfxs
297.659485 480.000183 m
(Productio)
[5.327505 2.699573 4.441664 4.441664 4.441664 3.994786 2.223226 1.776348 4.499119 ] pdfxs
(n) show
( ) show
301.67981 470.400238 m
(Ref)
[5.754376 4.429694 2.28148 ] pdfxs
(a) show
(ctor)
[3.982816 2.211256 4.49912 2.650097 ] pdfxs
n
316.800018 689.400024 m
316.800018 656.219971 l
S
n
319.800018 657.0 m
316.800018 648.0 l
313.800018 657.0 l
319.800018 657.0 l
eofill
n
286.73999 663.900024 59.579987 9.599976 re
1.0 1.0 1.0 sc
f
0.0 0.0 0.0 sc
286.97998 666.299988 m
(Code )
[5.819014 4.43528 4.43528 4.43528 2.22163 ] pdfxs
(P) show
(roduction)
[2.655683 4.49912 4.43528 4.43528 3.988402 2.28148 1.738842 4.43528 4.43528 ] pdfxs
n
317.039978 635.400024 m
317.039978 632.039978 l
316.800018 631.799988 l
316.559998 632.039978 l
316.559998 635.400024 l
316.800018 635.640015 l
316.97998 635.519958 l
317.039978 635.400024 l
h
317.039978 629.640015 m
317.039978 626.279968 l
316.800018 626.039978 l
316.559998 626.279968 l
316.559998 629.640015 l
316.800018 629.880005 l
317.039978 629.640015 l
h
317.039978 623.880005 m
317.039978 620.519958 l
316.800018 620.279968 l
316.559998 620.519958 l
316.559998 623.880005 l
316.800018 624.119995 l
317.039978 623.880005 l
h
317.039978 618.119995 m
317.039978 614.76001 l
316.800018 614.519958 l
316.559998 614.76001 l
316.559998 618.119995 l
316.800018 618.359985 l
317.039978 618.119995 l
h
317.039978 612.359985 m
317.039978 609.0 l
316.800018 608.76001 l
316.559998 609.0 l
316.559998 612.359985 l
316.800018 612.600037 l
317.039978 612.359985 l
h
317.039978 606.600037 m
317.039978 603.23999 l
316.800018 603.0 l
316.559998 603.23999 l
316.559998 606.600037 l
316.800018 606.839966 l
317.039978 606.600037 l
h
317.039978 600.839966 m
317.039978 597.47998 l
316.800018 597.23999 l
316.559998 597.47998 l
316.559998 600.839966 l
316.800018 601.079956 l
317.039978 600.839966 l
h
317.039978 595.080017 m
317.039978 593.219971 l
316.97998 593.039978 l
316.800018 592.97998 l
316.679993 593.039978 l
316.559998 593.219971 l
316.559998 595.080017 l
316.800018 595.320007 l
317.039978 595.080017 l
f
n
319.800018 594.0 m
316.800018 585.0 l
313.800018 594.0 l
319.800018 594.0 l
eofill
n
286.73999 605.400024 59.579987 9.599976 re
1.0 1.0 1.0 sc
f
0.0 0.0 0.0 sc
286.97998 607.799988 m
(Code )
[5.819014 4.43528 4.43528 4.43528 2.22163 ] pdfxs
(P) show
(roduction)
[2.655683 4.49912 4.43528 4.43528 3.988402 2.28148 1.738842 4.43528 4.43528 ] pdfxs
n
317.039978 568.799988 m
317.039978 565.440002 l
316.800018 565.200012 l
316.559998 565.440002 l
316.559998 568.799988 l
316.800018 569.039978 l
316.97998 568.919983 l
317.039978 568.799988 l
h
317.039978 563.039978 m
317.039978 559.679993 l
316.800018 559.440002 l
316.559998 559.679993 l
316.559998 563.039978 l
316.800018 563.279968 l
317.039978 563.039978 l
h
317.039978 557.279968 m
317.039978 553.919983 l
316.800018 553.679993 l
316.559998 553.919983 l
316.559998 557.279968 l
316.800018 557.519958 l
317.039978 557.279968 l
h
317.039978 551.519958 m
317.039978 548.159973 l
316.800018 547.919983 l
316.559998 548.159973 l
316.559998 551.519958 l
316.800018 551.76001 l
317.039978 551.519958 l
h
317.039978 545.76001 m
317.039978 542.400024 l
316.800018 542.159973 l
316.559998 542.400024 l
316.559998 545.76001 l
316.800018 546.0 l
317.039978 545.76001 l
h
317.039978 540.0 m
317.039978 536.640015 l
316.800018 536.400024 l
316.559998 536.640015 l
316.559998 540.0 l
316.800018 540.23999 l
317.039978 540.0 l
h
317.039978 534.23999 m
317.039978 530.880005 l
316.800018 530.640015 l
316.559998 530.880005 l
316.559998 534.23999 l
316.800018 534.47998 l
317.039978 534.23999 l
h
317.039978 528.47998 m
317.039978 526.619995 l
316.97998 526.440002 l
316.800018 526.380005 l
316.679993 526.440002 l
316.559998 526.619995 l
316.559998 528.47998 l
316.800018 528.719971 l
317.039978 528.47998 l
f
n
319.800018 527.400024 m
316.800018 518.400024 l
313.800018 527.400024 l
319.800018 527.400024 l
eofill
n
286.73999 538.799988 59.579987 9.599976 re
1.0 1.0 1.0 sc
f
0.0 0.0 0.0 sc
286.97998 541.200012 m
(Code )
[5.819014 4.43528 4.43528 4.43528 2.22163 ] pdfxs
(P) show
(roduction)
[2.655683 4.49912 4.43528 4.43528 3.988402 2.28148 1.738842 4.43528 4.43528 ] pdfxs
n
204.300003 693.0 m
263.700012 693.0 l
267.179993 693.0 270.0 695.820007 270.0 699.299988 c
270.0 702.779968 267.179993 705.600037 263.700012 705.600037 c
204.300003 705.600037 l
200.819992 705.600037 198.0 702.779968 198.0 699.299988 c
198.0 695.820007 200.819992 693.0 204.300003 693.0 c
1.0 1.0 1.0 sc
eofill
n
204.300003 693.0 m
263.700012 693.0 l
267.179993 693.0 270.0 695.820007 270.0 699.299988 c
270.0 702.779968 267.179993 705.600037 263.700012 705.600037 c
204.300003 705.600037 l
200.819992 705.600037 198.0 702.779968 198.0 699.299988 c
198.0 695.820007 200.819992 693.0 204.300003 693.0 c
h
0.0 0.0 0.0 sc
S
225.539993 696.900024 m
(Start)
[5.338676 2.234398 4.452836 2.673239 2.234398 ] pdfxs
n
205.199997 634.5 m
262.800018 634.5 l
266.820007 634.5 270.0 637.679993 270.0 641.700012 c
270.0 645.659973 266.820007 648.900024 262.800018 648.900024 c
205.199997 648.900024 l
201.23999 648.900024 198.0 645.659973 198.0 641.700012 c
198.0 637.679993 201.23999 634.5 205.199997 634.5 c
1.0 1.0 1.0 sc
eofill
n
205.199997 634.5 m
262.800018 634.5 l
266.820007 634.5 270.0 637.679993 270.0 641.700012 c
270.0 645.659973 266.820007 648.900024 262.800018 648.900024 c
205.199997 648.900024 l
201.23999 648.900024 198.0 645.659973 198.0 641.700012 c
198.0 637.679993 201.23999 634.5 205.199997 634.5 c
h
0.0 0.0 0.0 sc
S
210.0 639.299988 m
(T)
[4.861353 ] pdfxs
(e) show
(st Refactor)
[4.002766 2.231206 2.22163 5.774326 4.449644 2.231206 4.449644 4.002766 2.231206 4.449644 2.670047 
] pdfxs
n
205.199997 504.899994 m
262.800018 504.899994 l
266.820007 504.899994 270.0 508.079987 270.0 512.100037 c
270.0 516.059998 266.820007 519.299988 262.800018 519.299988 c
205.199997 519.299988 l
201.23999 519.299988 198.0 516.059998 198.0 512.100037 c
198.0 508.079987 201.23999 504.899994 205.199997 504.899994 c
0.0 1.0 0.0 sc
eofill
n
205.199997 504.899994 m
262.800018 504.899994 l
266.820007 504.899994 270.0 508.079987 270.0 512.100037 c
270.0 516.059998 266.820007 519.299988 262.800018 519.299988 c
205.199997 519.299988 l
201.23999 519.299988 198.0 516.059998 198.0 512.100037 c
198.0 508.079987 201.23999 504.899994 205.199997 504.899994 c
h
0.0 0.0 0.0 sc
S
216.23999 509.700012 m
(T)
[4.861353 ] pdfxs
(e) show
(st Pass)
[4.006756 2.235196 2.22163 5.339475 4.453634 4.006756 4.006756 ] pdfxs
n
234.0 692.100037 m
234.0 657.119995 l
S
n
237.0 657.900024 m
234.0 648.900024 l
231.0 657.900024 l
237.0 657.900024 l
eofill
n
215.279999 665.700012 36.899994 9.599976 re
1.0 1.0 1.0 sc
f
0.0 0.0 0.0 sc
215.580002 668.100037 m
(Code T)
[5.770336 4.445654 4.445654 4.445654 2.22163 4.921203 ] pdfxs
(e) show
(st)
[3.998776 2.227216 ] pdfxs
221.75972 490.920074 m
(Ty)
[4.921203 3.959674 ] pdfxs
(p) show
%ADOBeginSubsetFont: IMDFNL+ArialMT AddGlyphs
%ADOt1write: (1.0.21)
%%Copyright: Copyright 2005 Adobe System Incorporated. All rights reserved.
systemdict begin
/IMDFNL+ArialMT findfont dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/two <1C60D8A8C9B7EF322B3EBC745A0BBBAC411180C089B13E648172E07912
D1BA378FD965B994D86994B65582FD434477626CA0A7A4AA353654D41B127367
E2BE1B714FF63CE28DAC81B61A78F94AD3218D524244E3D9732CC5A4165C96E7
ADCE5826F85F01CDF876C2E7BB138BBF33C5B212D37130E98D7DD4F72153E61B
0B8D4E846B49ABE4C4B064B468846907F230569399E532> |-
systemdict /gcheck known {setglobal} if end {end} if
end
/IMDFNL+ArialMT findfont /Encoding get
dup 50 /two put
pop
%ADOEndSubsetFont
(e 2)
[4.499119 2.22163 4.482362 ] pdfxs
209.999588 481.379974 m
(T)
[4.861353 ] pdfxs
(e) show
(st Refactor )
[4.002766 2.231206 2.22163 5.774326 4.449644 2.231206 4.449644 4.002766 2.231206 4.449644 2.639723 
2.22163 ] pdfxs
209.339645 471.780029 m
%ADOBeginSubsetFont: IMDFNL+ArialMT AddGlyphs
%ADOt1write: (1.0.21)
%%Copyright: Copyright 2005 Adobe System Incorporated. All rights reserved.
systemdict begin
/IMDFNL+ArialMT findfont dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/w <1C60D8A8C9B6079F623A2931D5F86B2C297EB108A9084F0AE3D1D4EF2870
92CB42FFF81F5DFD1B1C81F848B31305A67E5C9AAD287CD327E41FB7FFD596E3
B322587E733CC6F179157A39D2> |-
/h <1C60D8A8C9B7EF322B3BE19FB964E037672C8A279BC86F7B9BF0C8203E13
1450D56E388301CEAE43162551FBE05CABF94DC3B5DDFBB4DA55D11470EBD41A
C970CEE2D2EFA88D51157B4EF5536CB673423CDDB06FA774D27105AD2B1AC2DF
A8> |-
systemdict /gcheck known {setglobal} if end {end} if
end
/IMDFNL+ArialMT findfont /Encoding get
dup 119 /w put
dup 104 /h put
pop
%ADOEndSubsetFont
(without failure)
[5.765548 1.77555 2.222428 4.440866 4.440866 4.440866 2.222428 2.22163 2.222428 4.440866 1.77555 
1.77555 4.440866 2.661269 4.440866 ] pdfxs
n
234.23999 634.5 m
234.23999 631.140015 l
234.0 630.900024 l
233.759995 631.140015 l
233.759995 634.5 l
234.0 634.73999 l
234.179993 634.619995 l
234.23999 634.5 l
h
234.23999 628.73999 m
234.23999 625.380005 l
234.0 625.140015 l
233.759995 625.380005 l
233.759995 628.73999 l
234.0 628.97998 l
234.23999 628.73999 l
h
234.23999 622.97998 m
234.23999 619.619995 l
234.0 619.380005 l
233.759995 619.619995 l
233.759995 622.97998 l
234.0 623.219971 l
234.23999 622.97998 l
h
234.23999 617.219971 m
234.23999 613.859985 l
234.0 613.619995 l
233.759995 613.859985 l
233.759995 617.219971 l
234.0 617.459961 l
234.23999 617.219971 l
h
234.23999 611.459961 m
234.23999 608.100037 l
234.0 607.859985 l
233.759995 608.100037 l
233.759995 611.459961 l
234.0 611.700012 l
234.23999 611.459961 l
h
234.23999 605.700012 m
234.23999 602.339966 l
234.0 602.100037 l
233.759995 602.339966 l
233.759995 605.700012 l
234.0 605.940002 l
234.23999 605.700012 l
h
234.23999 599.940002 m
234.23999 596.580017 l
234.0 596.339966 l
233.759995 596.580017 l
233.759995 599.940002 l
234.0 600.179993 l
234.23999 599.940002 l
h
234.23999 594.179993 m
234.23999 590.820007 l
234.0 590.580017 l
233.759995 590.820007 l
233.759995 594.179993 l
234.0 594.419983 l
234.23999 594.179993 l
h
234.23999 588.419983 m
234.23999 585.059998 l
234.0 584.820007 l
233.759995 585.059998 l
233.759995 588.419983 l
234.0 588.659973 l
234.23999 588.419983 l
h
234.23999 582.659973 m
234.23999 579.299988 l
234.0 579.059998 l
233.759995 579.299988 l
233.759995 582.659973 l
234.0 582.900024 l
234.23999 582.659973 l
h
234.23999 576.900024 m
234.23999 573.539978 l
234.0 573.299988 l
233.759995 573.539978 l
233.759995 576.900024 l
234.0 577.140015 l
234.23999 576.900024 l
h
234.23999 571.140015 m
234.23999 567.779968 l
234.0 567.539978 l
233.759995 567.779968 l
233.759995 571.140015 l
234.0 571.380005 l
234.23999 571.140015 l
h
234.23999 565.380005 m
234.23999 562.019958 l
234.0 561.779968 l
233.759995 562.019958 l
233.759995 565.380005 l
234.0 565.619995 l
234.23999 565.380005 l
h
234.23999 559.619995 m
234.23999 556.26001 l
234.0 556.019958 l
233.759995 556.26001 l
233.759995 559.619995 l
234.0 559.859985 l
234.23999 559.619995 l
h
234.23999 553.859985 m
234.23999 550.5 l
234.0 550.26001 l
233.759995 550.5 l
233.759995 553.859985 l
234.0 554.100037 l
234.23999 553.859985 l
h
234.23999 548.100037 m
234.23999 544.73999 l
234.0 544.5 l
233.759995 544.73999 l
233.759995 548.100037 l
234.0 548.339966 l
234.23999 548.100037 l
h
234.23999 542.339966 m
234.23999 538.97998 l
234.0 538.73999 l
233.759995 538.97998 l
233.759995 542.339966 l
234.0 542.580017 l
234.23999 542.339966 l
h
234.23999 536.580017 m
234.23999 533.219971 l
234.0 532.97998 l
233.759995 533.219971 l
233.759995 536.580017 l
234.0 536.820007 l
234.23999 536.580017 l
h
234.23999 530.820007 m
234.23999 527.519958 l
234.179993 527.339966 l
234.0 527.279968 l
233.87999 527.339966 l
233.759995 527.519958 l
233.759995 530.820007 l
234.0 531.059998 l
234.23999 530.820007 l
f
n
237.0 528.299988 m
234.0 519.299988 l
231.0 528.299988 l
237.0 528.299988 l
eofill
n
215.279999 572.100037 36.899994 9.599976 re
1.0 1.0 1.0 sc
f
0.0 0.0 0.0 sc
215.580002 574.5 m
(Code T)
[5.770336 4.445654 4.445654 4.445654 2.22163 4.921203 ] pdfxs
(e) show
(st)
[3.998776 2.227216 ] pdfxs
n
374.399994 691.200012 m
432.0 691.200012 l
436.019989 691.200012 439.200012 694.380005 439.200012 698.400024 c
439.200012 702.359985 436.019989 705.600037 432.0 705.600037 c
374.399994 705.600037 l
370.440002 705.600037 367.200012 702.359985 367.200012 698.400024 c
367.200012 694.380005 370.440002 691.200012 374.399994 691.200012 c
1.0 1.0 1.0 sc
eofill
n
374.399994 691.200012 m
432.0 691.200012 l
436.019989 691.200012 439.200012 694.380005 439.200012 698.400024 c
439.200012 702.359985 436.019989 705.600037 432.0 705.600037 c
374.399994 705.600037 l
370.440002 705.600037 367.200012 702.359985 367.200012 698.400024 c
367.200012 694.380005 370.440002 691.200012 374.399994 691.200012 c
h
0.0 0.0 0.0 sc
S
394.73999 696.0 m
(Start)
[5.338676 2.234398 4.452836 2.673239 2.234398 ] pdfxs
n
374.399994 633.600037 m
432.0 633.600037 l
436.019989 633.600037 439.200012 636.779968 439.200012 640.799988 c
439.200012 644.76001 436.019989 648.0 432.0 648.0 c
374.399994 648.0 l
370.440002 648.0 367.200012 644.76001 367.200012 640.799988 c
367.200012 636.779968 370.440002 633.600037 374.399994 633.600037 c
1.0 1.0 1.0 sc
eofill
n
374.399994 633.600037 m
432.0 633.600037 l
436.019989 633.600037 439.200012 636.779968 439.200012 640.799988 c
439.200012 644.76001 436.019989 648.0 432.0 648.0 c
374.399994 648.0 l
370.440002 648.0 367.200012 644.76001 367.200012 640.799988 c
367.200012 636.779968 370.440002 633.600037 374.399994 633.600037 c
h
0.0 0.0 0.0 sc
S
384.059998 643.200073 m
(Productio)
[5.327505 2.699573 4.441664 4.441664 4.441664 3.994786 2.223226 1.776348 4.499119 ] pdfxs
(n) show
( ) show
388.080322 633.600159 m
(Ref)
[5.754376 4.429694 2.28148 ] pdfxs
(a) show
(ctor)
[3.982816 2.211256 4.49912 2.650097 ] pdfxs
n
374.399994 504.0 m
432.0 504.0 l
436.019989 504.0 439.200012 507.179993 439.200012 511.200012 c
439.200012 515.159973 436.019989 518.400024 432.0 518.400024 c
374.399994 518.400024 l
370.440002 518.400024 367.200012 515.159973 367.200012 511.200012 c
367.200012 507.179993 370.440002 504.0 374.399994 504.0 c
0.0 1.0 0.0 sc
eofill
n
374.399994 504.0 m
432.0 504.0 l
436.019989 504.0 439.200012 507.179993 439.200012 511.200012 c
439.200012 515.159973 436.019989 518.400024 432.0 518.400024 c
374.399994 518.400024 l
370.440002 518.400024 367.200012 515.159973 367.200012 511.200012 c
367.200012 507.179993 370.440002 504.0 374.399994 504.0 c
h
0.0 0.0 0.0 sc
S
385.440002 508.800018 m
(T)
[4.861353 ] pdfxs
(e) show
(st Pass)
[4.006756 2.235196 2.22163 5.339475 4.453634 4.006756 4.006756 ] pdfxs
390.959778 489.600128 m
(Ty)
[4.921203 3.959674 ] pdfxs
(p) show
%ADOBeginSubsetFont: IMDFNL+ArialMT AddGlyphs
%ADOt1write: (1.0.21)
%%Copyright: Copyright 2005 Adobe System Incorporated. All rights reserved.
systemdict begin
/IMDFNL+ArialMT findfont dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/four <1C60D8A8C9B7EF32245FD0373664E2B980D56E9D691EE5A95B5050BFE
023151494A4A591D0216BE411323E192BCC75A7A889FA57031D> |-
systemdict /gcheck known {setglobal} if end {end} if
end
/IMDFNL+ArialMT findfont /Encoding get
dup 52 /four put
pop
%ADOEndSubsetFont
(e 4)
[4.499119 2.22163 4.482362 ] pdfxs
367.860077 480.000183 m
(Production R)
[5.325909 2.660471 4.440068 4.440068 4.499119 3.99319 2.22163 1.774752 4.440068 4.440068 2.22163 
5.819014 ] pdfxs
(e) show
(factor)
[2.22163 4.440068 3.99319 2.22163 4.440068 2.660471 ] pdfxs
378.539703 470.400238 m
(without failure)
[5.765548 1.77555 2.222428 4.440866 4.440866 4.440866 2.222428 2.22163 2.222428 4.440866 1.77555 
1.77555 4.440866 2.661269 4.440866 ] pdfxs
n
403.200012 690.600037 m
403.200012 656.219971 l
S
n
406.200012 657.0 m
403.200012 648.0 l
400.200012 657.0 l
406.200012 657.0 l
eofill
n
373.139984 664.5 59.579987 9.599976 re
1.0 1.0 1.0 sc
f
0.0 0.0 0.0 sc
373.380005 666.900024 m
(Code )
[5.819014 4.43528 4.43528 4.43528 2.22163 ] pdfxs
(P) show
(roduction)
[2.655683 4.49912 4.43528 4.43528 3.988402 2.28148 1.738842 4.43528 4.43528 ] pdfxs
n
403.440002 633.600037 m
403.440002 630.23999 l
403.200012 630.0 l
402.959991 630.23999 l
402.959991 633.600037 l
403.200012 633.839966 l
403.380005 633.719971 l
403.440002 633.600037 l
h
403.440002 627.839966 m
403.440002 624.47998 l
403.200012 624.23999 l
402.959991 624.47998 l
402.959991 627.839966 l
403.200012 628.079956 l
403.440002 627.839966 l
h
403.440002 622.079956 m
403.440002 618.719971 l
403.200012 618.47998 l
402.959991 618.719971 l
402.959991 622.079956 l
403.200012 622.320007 l
403.440002 622.079956 l
h
403.440002 616.320007 m
403.440002 612.959961 l
403.200012 612.719971 l
402.959991 612.959961 l
402.959991 616.320007 l
403.200012 616.559998 l
403.440002 616.320007 l
h
403.440002 610.559998 m
403.440002 607.200012 l
403.200012 606.959961 l
402.959991 607.200012 l
402.959991 610.559998 l
403.200012 610.799988 l
403.440002 610.559998 l
h
403.440002 604.799988 m
403.440002 601.440002 l
403.200012 601.200012 l
402.959991 601.440002 l
402.959991 604.799988 l
403.200012 605.039978 l
403.440002 604.799988 l
h
403.440002 599.039978 m
403.440002 595.679993 l
403.200012 595.440002 l
402.959991 595.679993 l
402.959991 599.039978 l
403.200012 599.279968 l
403.440002 599.039978 l
h
403.440002 593.279968 m
403.440002 589.919983 l
403.200012 589.679993 l
402.959991 589.919983 l
402.959991 593.279968 l
403.200012 593.519958 l
403.440002 593.279968 l
h
403.440002 587.519958 m
403.440002 584.159973 l
403.200012 583.919983 l
402.959991 584.159973 l
402.959991 587.519958 l
403.200012 587.76001 l
403.440002 587.519958 l
h
403.440002 581.76001 m
403.440002 578.400024 l
403.200012 578.159973 l
402.959991 578.400024 l
402.959991 581.76001 l
403.200012 582.0 l
403.440002 581.76001 l
h
403.440002 576.0 m
403.440002 572.640015 l
403.200012 572.400024 l
402.959991 572.640015 l
402.959991 576.0 l
403.200012 576.23999 l
403.440002 576.0 l
h
403.440002 570.23999 m
403.440002 566.880005 l
403.200012 566.640015 l
402.959991 566.880005 l
402.959991 570.23999 l
403.200012 570.47998 l
403.440002 570.23999 l
h
403.440002 564.47998 m
403.440002 561.119995 l
403.200012 560.880005 l
402.959991 561.119995 l
402.959991 564.47998 l
403.200012 564.719971 l
403.440002 564.47998 l
h
403.440002 558.719971 m
403.440002 555.359985 l
403.200012 555.119995 l
402.959991 555.359985 l
402.959991 558.719971 l
403.200012 558.959961 l
403.440002 558.719971 l
h
403.440002 552.959961 m
403.440002 549.600037 l
403.200012 549.359985 l
402.959991 549.600037 l
402.959991 552.959961 l
403.200012 553.200012 l
403.440002 552.959961 l
h
403.440002 547.200012 m
403.440002 543.839966 l
403.200012 543.600037 l
402.959991 543.839966 l
402.959991 547.200012 l
403.200012 547.440002 l
403.440002 547.200012 l
h
403.440002 541.440002 m
403.440002 538.080017 l
403.200012 537.839966 l
402.959991 538.080017 l
402.959991 541.440002 l
403.200012 541.679993 l
403.440002 541.440002 l
h
403.440002 535.679993 m
403.440002 532.320007 l
403.200012 532.080017 l
402.959991 532.320007 l
402.959991 535.679993 l
403.200012 535.919983 l
403.440002 535.679993 l
h
403.440002 529.919983 m
403.440002 526.619995 l
403.380005 526.440002 l
403.200012 526.380005 l
403.079987 526.440002 l
402.959991 526.619995 l
402.959991 529.919983 l
403.200012 530.159973 l
403.440002 529.919983 l
f
n
406.200012 527.400024 m
403.200012 518.400024 l
400.200012 527.400024 l
406.200012 527.400024 l
eofill
n
373.139984 571.200012 59.579987 9.599976 re
1.0 1.0 1.0 sc
f
0.0 0.0 0.0 sc
373.380005 573.600037 m
(Code )
[5.819014 4.43528 4.43528 4.43528 2.22163 ] pdfxs
(P) show
(roduction)
[2.655683 4.49912 4.43528 4.43528 3.988402 2.28148 1.738842 4.43528 4.43528 ] pdfxs
/IMDFNL+ArialMT /Font _pdfUndefineResource
/N16 /Font _pdfUndefineResource
[/EMC PDFMark5
PDFVars/TermAll get exec end end
%%PageTrailer
%%Trailer
%%EOF
