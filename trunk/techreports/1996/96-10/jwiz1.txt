Thesis statement: When used after compile and before test, JavaWizard will significantly reduce the amount of time spent on finding for removal the defect types for which it was designed.

    JavaWizard (Jwiz) is an automated code checker for Java.  This tool scans Java code and looks for patterns/constructs which likely are not what the programmer intended.  Upon finding such a construct, Jwiz prints out a description of the potential error and the line number on which it was found.

    In the Fall of 1996, there was a class conducted at the University of Hawaii at Manoa.  The students of this class developed a number of programs (8+) in Java.  Over the course of development, the students were required to keep track of all defects made and the time spent locating and fixing these defects.

    In looking over the data later, it was noted that a number of the students were making the same kinds of errors and spending a non-trivial amount of time removing said defects from their programs.  It was also noticed that some of these defects could be found by an automated code checker.

    JavaWizard is the resulting program.  Jwiz is written entirely in Java.  Using JavaCC, a parse tree is generated and then a symbol table.  Jwiz scans through this parse tree looking for nodes which could indicate the presence of an error.  The symbol table is used for scope and variable lookup purposes.

    In its current state, Jwiz looks for 16 distinct possible defects.  I say "possible" defects because a majority of the patterns being checked for are usually wrong, but not always.

    I plan on giving JavaWizard to a number of students and faculty at the University of Hawaii.  The individuals who are given this program will continue to collect data on the defects they make and how long it took to find and remove these defects.  These people will also note if the defect was caught by Jwiz.  I will collect this data and attempt to discern whether or not Jwiz appears to have any impact on time spent locating the defects for which it was designed.  

    Jwiz is only designed to help find a defect, not remove it, so the measurements that I will be using cannot be precise as we have no record of how long it took just to find the defect, only how long it took to find and remove it.  I plan on looking at the data of those who used the tool along with those who did not and comparing the times noted for finding and removing defects.  If the find & removal times recorded with the tool are habitually lower that the times recorded for the same defects without the tool, I will think my hypothesis correct.

