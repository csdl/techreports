
\documentstyle[11pt,/group/csdl/tex/definemargins,
/group/csdl/tex/lmacros]{report} 
\input{/group/csdl/tex/psfig/psfig}

\begin{document}

\title{Evaluating Automated Support for the PSP}
\author{Anne Disney\\
Collaborative Software Development Laboratory,\\
Department of Information and Computer Sciences\\
University of Hawaii, Manoa\\
Honolulu, Hawaii   96822\\
{\tt anne@uhics.ics.hawaii.edu}}
\maketitle

\setlength{\parindent}{0em}
\setlength{\parskip}{1ex}

\tableofcontents

\listoftables


\chapter{Introduction}

\section{Motivation}

In the past few years Watts Humphrey's Personal Software 
Process (PSP) has been a subject of interest to those who are 
interested in quality in software engineering.  It is 
a method used by individual software engineers to 
collect data on how they develop a software project, 
analyze this data, and then use the results to improve 
planning, productivity, and quality for future projects.

Many studies show good results and improvement 
by using PSP.  However, the results are based on numbers
that may or may not be accurate.


\section{Why do people want to use it?}

Humphrey and others provide data from the use of PSP in a 
classroom setting that shows positive trends in various measures 
of the software process, including defect density, yield
(percentage of defects actually removed), and time estimation.
These general results were replicated in clasroom use of PSP at the
University of Hawaii.


\section{What did a closer look at the data show?}

However, teaching and using PSP uncovered an
important issue:  data quality.  In PSP, engineers must record 
a great deal of data about the time they spend in each phase 
of development and the numbers and types of defects they uncover 
for a single project.  The engineer then analyzes the raw data in
a sophisticated, multi-step process.  Finally, the engineer also 
performs analyses over all the project data.  Although tools such
as spreadsheets automate some of the analysis, the engineer must
manually collect, analyze, and interpret much of the data.  Our
initial experiences teaching PSP led us to believe that the PSP
method can suffer from a variety of data quality problems, including 
missing raw data, incorrectly recorded raw data, incorrectly performed
analyses, and erroneous analyses.

\section{Claim of this Research}
PSP suffers from two classes of data quality problems:
\begin{itemize}
\item The collection data quality problem
\item The analysis data quality problem
\end{itemize}
Resolving the collection problem requires addressing issues related
to measurement dysfunction and the use of automated tool support.
Resolving the analysis problem requires addressing issues related
to the design and use of automated tool support. 
These two problems call into question the accuracy of current
PSP results.



\chapter{Other related work}

[Need a ten-page or so introduction to PSP, enough to provide a PSP illiterate
with enough information to understand the benefits of the thesis]

Watts Humphrey's Personal Software Process focuses on the software development
process for an individual software engineer.

* The main focus of the PSP is the individual programmer.  However, it can be used as 
Engineering tool in group development as well.  (9th conf on Software Engineering Education, p119 (125)

* Like other software processes, PSP requires significant investment of time and effort by the
  software engineer.  However, it directly benefits the person who makes the effort with 
  information about their own process and products. (9th conf on Software  Education,   
  p 52)


\chapter{Experimental Design}


\section{Description}

To investigate the issue of data quality in PSP, a modified
version of the PSP curriculum was taught in ICS-491, Fall 1996.
Ten students participated in this course. All students completed eight
projects, and nine of the students completed a ninth project.  At the end
of the course I collected these projects and then examined 
them to uncover any errors the students may have made in filling 
out the PSP forms.


\section{Process Changes to Standard PSP}

In order to produce data of the highest possible quality, some changes were made
to the standard PSP:

%what really happened here?
FTR

new forms

modifications to PPS form

spreadsheets

JavaDiff JavaLOC


\section{Modifications to Standard PSP Curriculum}

Curriculum modifications included supplemental lecture material on
areas of the PSP subject to data quality problems, distribution of 
spreadsheets to automate various analyses, and integrated technical
reviews and checklists focusing in part on data quality improvement.


\section{Database Analysis}

Following the conclusion of the course, I designed and implemented a 
database system to store all of the PSP data from this
course and to subject it to further data quality analysis.

\subsection{Description of Tool/Capabilities}
[Question: what am I supposed to communicate here?]

\subsection{Description of Data Entry}
To find the defects in the PSP data, I entered each project into the 
PSP tool; recording primary data such as time, defects, and program size.
I then compared the values calculated by the tool with 
the corresponding values calculated by the students.

Additionally, I reviewed the record sheets from the technical review
process and the grading sheets used by the instructor 
to determine which reviewer first identified each defect.

Whenever I found a defect, I recorded the following information in
another database:

\begin{itemize}
\item A code identifying the student responsible for the defect.
\item A code identifying the person who first identified the defect;
the instructor, another student, or myself.
\item The number of the assignment in which the defect occurred.
\item The programming language used for the assignment.  (All projects
      were done using Java.)
\item The PSP process that the student was using when the defect was
      injected.
\item The PSP phase in which the student was working when the defect was
      injected.
\item A code identifying the general defect type.  For example: 
      \begin{tabbing}
      BF  \quad\= Blank Field\quad\\ 
      CI  \>Calculation done incorrectly
      \end{tabbing}
\item A code identifying the specific defect. For example:
      \begin{tabbing}
      BLC \quad\= Base LOC, actual: incorrect\quad\\ 
      BC  \>Base LOC, plan:   different from Size Estimating Template
      \end{tabbing}
\item A code identifying the defect severity. For example: 
      \begin{tabbing}
      0   \quad\= Defect has no impact on PSP data\quad\\
      1   \>Results in a single bad value, single form
      \end{tabbing}
\item The age of the defect.  This represents the number of assignments 
      since the introduction of the data field or PSP operation in which the
      defect occurred.
\item The incorrect value (where applicable).
\item The value that should have been used (where applicable).
\end{itemize} 

\subsubsection{Defect Counting Method}
Upon finding an incorrect value I recorded a defect for the field,
but from that point on I treated the incorrect data value as 
correct.  For example, consider this sample time recording log: 

\begin{table} [h]\caption{Example of Time Recording Log Error}
\begin{center} 
\begin{tabular} {|l|l|l|r|r|l|l|}\hline 
\multicolumn{7}{|c|}{\bf Time Recording Log}\\ \hline 
     &       &      & Interruption & Delta &       &          \\
Date & Start & Stop & Time         & Time  & Phase & Comments \\ \hline\hline 
12/01/97 & 10:40 & 11:20 & 0 & 30 & plan       & total minutes should be 40 \\ \hline 
12/01/97 & 11:20 & 11:30 & 0 & 10 & design     & \\ \hline 
12/01/97 & 12:30 & 12:50 & 0 & 20 & code       & \\ \hline 
12/01/97 & 12:50 & 12:55 & 0 &  5 & compile    & \\ \hline 
12/02/97 & 09:00 & 09:15 & 0 & 15 & test       & \\ \hline 
12/02/97 & 09:15 & 09:25 & 0 & 10 & postmortem & \\ \hline  
\end{tabular} 
\end{center} 
\end{table}
 
Since it appears the user incorrectly subtracted {\it Stop} from {\it Start} 
when calculating the number of minutes spent in planning, a defect would be 
recorded for the {\it Delta Time} field.  But when looking at {\it Total 
Actual Minutes} (the sum of all the {\it Delta Time} fields in the Time 
Recording Log) on the Project Plan Summary form, 90 minutes would be treated 
as the correct value, even though the time spent in planning was 
actually 40 minutes, making the true value of {\it Total Actual Minutes} 
100 minutes. 

\subsection{Description of Data Correction}
It could be the case that
although users of PSP make many errors, these errors are only "noise"
and do not make a significant impact upon the trends and conclusions
reached from the method.  I attempted to look into this more closely
by computing the measures of yield, defect density, and so forth for
individual data and the aggregate results twice:  once using the 
original data supplied by the students, and once using correct
versions of the data produced by postmortem analysis.

\subsubsection{Types of defects uncovered}
As I attempted to correct the students' data, it soon became clear that
their defects fell into two classes.  Some defects were correctable, such as a 
mismatch between the number of defects entered in the Defect Recording Log 
and the total calculated for the Project Plan Summary.  But in other cases,
such as a blank {\it Phase Injected} for a defect, it was impossible to
determine a correct value.

This can be illustrated with the Time Recording Log example used above to
demonstrate the defect counting method.  It is clear that there is defect 
in the first entry, but not at all clear which field was entered incorrectly.  
Should {\it Start} be 10:50, or should {\it Stop} be 11:10, or was 
there a ten-minute interruption that was not recorded, or was 
{\it Delta Time} actually 40 minutes but calculated incorrectly 
as 30 minutes?  

\subsubsection{Rules Used in Data Correction}
Despite the obvious impossibility of doing a perfect job in correcting the
student data, I formulated a set of rules that could be
consistently applied in attempting to make corrections.
Underlying these rules is the assumption that primary data is 
probably more trustworthy than calculations performed upon it.  
So, for the Time Recording Log example above,
the {\it Start}, {\it Stop}, and {\it Interruption Time} values would be 
considered correct, and the {\it Delta Time} value would be changed to 
40 minutes.

These are the rules I used in data correction:

\begin{itemize}
\item {\bf Defects in Time Recording Log entries:}  Assume that the 
start/stop/interruption times are correct and that the delta time is 
wrong, unless two Time Recording Log entries overlap.  In that case, use the 
preceding and following entries and the delta time for the 
current entry to formulate plausible start/stop times.  Generally this 
will mean starting the second entry where the first one stops.

\item {\bf Missing Time Recording Log entries:} If a Time Recording Log is 
missing an entry for an entire phase, but the Project Plan Summary form 
contains a value for the phase under {\it Time in Phase (min.), Actual}, 
formulate an appropriate Time Recording Log entry with fabricated date and 
time values.

\item {\bf Conflicts between Defect Recording Log and Project Plan Summary:}  
Assume that the number of defects and the phases recorded in the Defect 
Recording Log are correct and that the discrepancy occurred as a result 
of incorrectly adding up the numbers of defects injected/fixed per phase 
and/or incorrectly transferring these totals to the Project Plan Summary form. 

\item {\bf Conflicts between Defect Recording Log and Time Recording Log:}  
If, for the Defect Recording Log, the total of all fix times for defects 
removed in a certain phase is more than the time recorded for that phase in 
the Time Recording Log, insert a Time Recording Log entry with start and stop 
times that, combined with existing Time Recording Log entries for the phase, 
will produce a delta time of the total fix times plus one minute for each 
defect.  This will represent the minimum amount of time required to find 
and remove defects.

\item {\bf Post Mortem phase used in Defect Recording Log:}  If the post 
mortem phase is used on a Defect Recording Log entry for {\it Phase Removed}, 
increment the count in the {\it Defects Removed, After Development, Actual} 
field on the Project Plan Summary form once for each such defect.

\item {\bf Blank Injection Phase for Defect Recording Log:}  If the 
{\it Inject} field is blank for a Defect Recording Log entry, but the 
{\it Fix Defect} field contains a phase name instead of a defect number, 
use the phase name to fill in the {\it Inject} field.

\item {\bf Blank {\it Time in Phase (min.), Plan} field on 
Project Plan Summary form:} Use the value 
for {\it Time in Phase (min.), Actual} for the same phase.

\item {\bf Conflicts in {\it Program Size (LOC)} fields on Project Plan 
Summary form:} Assume that {\it Base, Deleted, Modified, Added, and Reused} 
are correct and that defects are the result of incorrect calculations.  Note: 
this is not a truly satisfactory assumption because {\it Total LOC, Actual} 
should be the result of a measurement rather than a calculation and should 
therefore be relied upon.  However, given correct values for 
{\it Base, Deleted, Modified, Added, and Reused}; {\it Total LOC} can be 
calculated, whereas it is impossible to even guess at the correct values for 
the other fields.   Unfortunately defects in the {\it Program Size (LOC)}
fields were some of the most common defects.  Combined with the importance of
these fields in both size and time estimation and my inability to provide
adequate corrections, estimates made with the "corrected" data were undoubtedly
severely affected.
\end{itemize}



\chapter{Results}


\section{Summary Results}

Despite the special care taken during the course to achieve high data quality,
I uncovered 1539 data defects in the class project data.

\subsection{Defect Types}
I divided the defects into seven types:

\begin{itemize}
\item {\bf Calculation Done Incorrectly:} 
Applied to data fields whose values were derived using any 
sort of calculation from addition to linear regression.  If the calculation 
was not done correctly, a defect was counted.  This did not apply to 
values that were incorrect because other fields used in the calculation 
contained bad numbers. 

\item {\bf Blank Field:}  
Used when a data field that should have contained a value, such as {\it Start}
for a Time Recording Log entry, was left blank.  This did not apply to fields 
where a value was optional, such as comment fields. 

\item {\bf Transfer of Data Between Projects Incorrect:} 
Used for incorrect values in fields that involved data from a prior 
project.  Typically these fields were ``to-date'' fields that involved adding a 
to-date value from a prior project with a similar value in the current project. 
Unfortunately, it was often impossible to determine in these cases if the 
defect arose from bringing forward a bad number, incorrectly adding two good 
numbers, or bringing forward the correct number and correctly adding it 
to the wrong number from the current form.  However, in two important 
areas, time and size estimation, the forms were modified so that students 
were required to fill in the prior values to be used in the estimation 
calculations. In these cases it was obvious when incorrect values  
originated in the transfer. 

\item {\bf Entry Error:} 
Used when the student clearly did not understand the  
purpose of a field or used an incorrect method in selecting data.  For 
example, filling in the {\it Fix Defect} field in the Defect Recording 
Log with a phase name, or having the {\it Defects Injected, To Date} values
in the  Project Plan Summary originate from a different project than the 
{\it Program Size (LOC), To Date} values.

\item {\bf Transfer of Data Within Project Incorrect:} 
Similar to the defect type involving incorrect transfer of data between 
projects, except that it applied to values being transferred from one 
form to another within the current project.  For example, filling in 
172 for {\it Estimated New and Changed LOC} on the Size Estimating Template, 
but using 290 for {\it Total New and Changed, Plan} on the Project Plan Summary. 
\item {\bf Impossible Values:} Used when two values were mutually exclusive.  
For example: overlapping time log entries, defect fix times for a phase adding 
up to more time than the time log entries for the phase, or phases occurring 
in the Defect Recording Log in a different order than those in the Time 
Recording Log.  

\item {\bf Process Sequence not Followed:} Used when the Time Recording Log 
showed a student moving back and forth between phases such as Compile and Test
instead of sequentially moving through the phases appropriate for the
process.\newline
\end{itemize}
 
\begin{table} [ht] \caption{Defects by Type}
\begin{center} 
\begin{tabular}{|l|r|r|} \hline 
% \multicolumn{3}{|c|} \hline 
Description & \# & \% \\ \hline\hline 
Calculation done incorrectly                 & 705 & 45.81 \\ \hline 
Blank field                                  & 275 & 17.87 \\ \hline 
Transfer of data between projects incorrect  & 212 & 13.78 \\ \hline 
Entry error                                  & 142 &  9.23 \\ \hline 
Transfer of data within project incorrect    &  99 &  6.43 \\ \hline 
Impossible values                            &  90 &  5.85 \\ \hline 
Process sequence not followed                &  16 &  1.04 \\ \hline 
\end{tabular} 
\end{center} 
\end{table}


\subsection{Defect Severity Levels}
I divided the defects into five severity levels:

\begin{itemize}
\item {\bf Defect has no impact on PSP data:} This included defects such as
missing header data, incorrect dates in the time recording log, and filling
in fields for a more advanced process.

\item {\bf Results in a single bad value, single form:} Used if a significant 
field which affected no other fields, such as {\it LOC/Hour, Actual}, 
was blank or incorrect.  

\item {\bf Results in multiple bad values, single form:} Used when an incorrect 
or blank value was used in the calculation of values for one or more other  
fields on the same form, but when none of these other values were used beyond 
the current form.  For example, in PSP1 on the Size Estimating Template, 
incorrectly calculating a prediction interval.  This results in a bad 
prediction interval and a bad prediction range, but these values are not used 
anywhere else in the process. 

\item {\bf Results in multiple bad values, multiple forms, single project:} 
Used when an incorrect or blank value was used to determine the values  
for one or more other fields on one or more different forms in the same 
project, but when none of these other values were used beyond the current 
project.  For example, in PSP1, on the Size Estimating Template, calculating an  
incorrect value for {\it Estimated Total New Reused (T)}.  This results in an 
incorrect value for {\it Total New Reused, Plan} on the Project Plan Summary 
form, but this value is not referenced by future projects. 

\item {\bf Results in multiple bad values, multiple forms, multiple projects:} 
Used if an incorrect or blank value affected future projects.  For example, 
when {\it Defects Injected, Planning, Actual} on the Project Plan Summary does 
not match the number of defects entered for the planning phase in the 
Defect Recording Log. \newline
\end{itemize}

\begin{table} [ht] \caption{Defects by Severity Level}
\begin{center} 
\begin{tabular}{|l|r|r|}\hline 
% \multicolumn{3}{|c|}{\bf Defects by Severity}\\ \hline 
Description & \# & \% \\ \hline\hline 
Results in a single bad value, single form                         & 674 & 43.79 \\ \hline 
Results in multiple bad values, multiple forms, multiple projects  & 523 & 33.98 \\ \hline 
Results in multiple bad values, single form                        & 197 & 12.80 \\ \hline 
Defect has no impact on PSP data                                   & 104 &  6.76 \\ \hline 
Results in multiple bad values, multiple forms, single project     &  41 &  2.66 \\ \hline 
\end{tabular}\newline \newline
\end{center} 
\end{table}

\subsection{Age of Defects}
As I recorded each defect, I calculated the age of the defect.  This 
represents the number of projects since the introduction of the data field in 
which the error was observed.  For example, the calculation of delta times for 
the Time Recording Log entries was introduced in the first project.  If a 
student made an error in this field during the first project I recorded a
defect with an age of zero.  If a similar error was made during 
the second project the defect was recorded with an age of one.  
By the ninth project this type of defect had an age of eight.

I then analyzed the defects to determine the average defect age in each 
project.  First all defects were included:

\begin{table} [th] \caption{Average Defect Age by Project - All Defects}
\begin{center} 
\begin{tabular}{|l|l|r|r|}\hline 
% \multicolumn{4}{|c|}{\bf Average Defect Age - All Defects}\\ \hline 
Project \# & PSP Process & \# of Defects & Average Age \\ \hline\hline 
1 & PSP0a   &  51  &  0.00 \\ \hline
2 & PSP0.1a &  59  &  0.73 \\ \hline
3 & PSP0.1a &  63  &  1.76 \\ \hline
4 & PSP1a   & 150  &  1.27 \\ \hline
5 & PSP1a   & 165  &  2.27 \\ \hline
6 & PSP1a   & 186  &  3.30 \\ \hline
7 & PSP1.1a & 160  &  3.26 \\ \hline
8 & PSP2a   & 351  &  3.04 \\ \hline
9 & PSP2a   & 354  &  3.84 \\ \hline
\end{tabular}\newline \newline
\end{center} 
\end{table}

I then included only defects with an age greather than zero.
This eliminated defects that could have been the result of students being 
introduced to new fields and/or PSP operations for the first time.

\begin{table} [ht] \caption{Average Defect Age by Project Where Defect Age > Zero}
\begin{center} 
\begin{tabular}{|l|l|r|r|}\hline 
% \multicolumn{4}{|c|}{\bf Average Defect Age Where Defect Age > Zero}\\ \hline 
Project \# & PSP Process & \# of Defects & Average Age \\ \hline\hline 
1 & PSP0a   &   0  &    NA \\ \hline
2 & PSP0.1a &  43  &  1.00 \\ \hline
3 & PSP0.1a &  63  &  1.76 \\ \hline
4 & PSP1a   &  70  &  2.71 \\ \hline
5 & PSP1a   & 165  &  2.27 \\ \hline
6 & PSP1a   & 186  &  3.30 \\ \hline
7 & PSP1.1a & 135  &  3.86 \\ \hline
8 & PSP2a   & 214  &  4.99 \\ \hline
9 & PSP2a   & 354  &  3.84 \\ \hline
\end{tabular}\newline \newline
\end{center} 
\end{table}

When combining the 1539 defects from all projects, the average defect age was 
2.78.  When only the 1230 defects with an age greater than zero were included
the average defect age was 3.48.

\subsection{Defect Detection Methods}
In this case study, there were three ways a defect could be detected:  by another
student during technical review, by the instructor during the grading/evaluation
process, or through the use of the PSP tool.  

\begin{table} [ht] \caption{Defects by Detection Method}
\begin{center} 
\begin{tabular}{|l|r|r|}\hline 
%\multicolumn{3}{|c|}{\bf Defects by Detection Method}\\ \hline 
Detection Method & \# & \% \\ \hline\hline 
Grading/Evaluation (instructor) &   32 &  2.08  \\ \hline
Technical Review   (students)   &   40 &  2.60  \\ \hline
PSP Tool                        & 1467 & 95.32 \\ \hline
\end{tabular}\newline \newline
\end{center} 
\end{table}

Therefore, students were made aware of about 5\% of the defects 
in their completed projects during the course of the class.

\subsection{Effects of Data Correction}
[answer the question "how important were these defects?"]


\section{Detailed Analysis}

\subsection{A Closer Look at the Most Severe Defects} 
34 percent of defects found were of the most serious type - persistent 
defects.  These were the defects resulting in multiple bad values on 
multiple forms for multiple projects.  A defect of this type not only causes  
incorrect values in the current project, but may still be causing flawed results 
ten projects later, even if all subsequent calculations are done correctly. 
Table \ref{commonDefects} shows the four most common defects of this type: 

\begin{table} [ht] \caption{\label{commonDefects} Most Frequently Occurring Persistent Defects}
\begin{center} 
\begin{tabular}{|l|r|}\hline 
% \multicolumn{2}{|c|}{\bf Most Common Persistent Defects}\\ \hline 
Description & \# \\ \hline\hline 
Time Estimation: historical data not transferred correctly     & 61 \\ \hline 
Size Estimation: historical data not transferred correctly     & 56 \\ \hline 
Time Log: delta time incorrect                                 & 48 \\ \hline 
Project Plan Summary: Total LOC, actual, not equal to B-D+A+R  & 45 \\ \hline 
\end{tabular} \newline \newline
\end{center} 
\end{table}

There were two main ways that the error in transferring time estimation data 
appeared to occur: incorrectly transferring the value from the
correct field, or accidentally transferring the correct value from 
an incorrect field.  Specifically, many times instead of transferring  
{\it Total New and Changed (N)} (Plan or Actual), students transferred 
{\it Total LOC (T)}.  This could easily occur because the Project Plan 
Summary form has over 90 fields even at the level of PSP1, and on the 
form the two values are vertically adjacent. It would be particularly 
easy to make this mistake with the Actual values because the fields are 
separated by one column from the labels.  Additionally, it appeared that 
students made spreadsheets or "cheatsheets" of these fields to avoid 
thumbing through the entire stack of completed projects every time a 
time or size estimation was needed for a new project.  This was inferred 
because the same incorrect value for a particular project would be transferred 
for time and/or size estimation in every subsequent project. 

The factors surrounding the error in transferring data for size estimation
were similar.
These transfer errors were not insignificant.  Over the 56 defects 
resulting from incorrect transfer of data used for size estimation, 
the sum of the errors was 7753 LOC (lines of code), with an average 
error of 138.4 LOC.  The sum of the LOC as they should have been transferred 
was 10,255, with an average of 183 LOC per field.  Thus, the average
incorrectly transferred number was in error by an amount equalling 75.6%
of the number that should have been transferred.

The error in calculating {\it Delta Time} in the Time Recording Log was 
notable in several respects.  First, the errors were not insignificant. 
The average mistake was 37.8 minutes, which was an average of 39.9 percent of 
the correct value. Secondly, of 48 occurrences, 16 were in error by 
one hour and 4 were in error by two hours, indicating small errors 
in simple arithmetic. Thirdly, the distribution of this error across 
projects is as shown in Table \ref{deltaErrors}. 

\begin{table} [htbp] \caption{\label{deltaErrors}Delta Time Errors by Project}
\begin{center} 
\begin{tabular}{|l|r|r|r|}\hline 
% \multicolumn{4}{|c|}{\bf Delta Time Errors by Project}\\ \hline 
Description & Errors & Time Log Entries & \% in Error \\ \hline\hline 
Project 1  & 7 &  84 &  8.33 \\ \hline 
Project 2  & 2 &  88 &  2.27 \\ \hline 
Project 3  & 8 &  92 &  8.70 \\ \hline 
Project 4  & 8 & 108 &  7.41 \\ \hline 
Project 5  & 2 & 102 &  1.96 \\ \hline 
Project 6  & 9 & 121 &  7.44 \\ \hline 
Project 7  & 2 &  77 &  2.60 \\ \hline 
Project 8  & 5 & 122 &  4.10 \\ \hline 
Project 9  & 5 & 105 &  4.76 \\ \hline 
\end{tabular} \newline \newline
\end{center} 
\end{table}

Despite nine projects worth of experience, this error never "went away". 
However it did appear to occur less frequently after Project 6.  Interestingly, 
the assignment for this project was a Time Recording Log applet, which at least 
some students seem to have used for subsequent projects. 

 

\chapter{Discussion} 


\section{Can all defects be found?} 

This case study uncovered 1539 defects made by people using PSP.  But were these all the 
errors actually made?  The following defect classification scheme is the result of trying
to answer this question:

\begin{itemize}
\item {\bf Primary data field defects:} Occur in such fields such as start/stop
                              times, all defect log fields, and size measures.  
   \begin{itemize}
   \item {\bf Detectable:} Defects that are clearly present, despite being in primary data.
                          Examples include PSP phases without Time Recording Log entries or
                          missing dates in the Defect Recording Log
      \begin{itemize}
      \item Correct value is clear or unimportant.  When attempting to fix these defects,
                          the value is not significant (e.g. a Defect Recording Log date)
                          or can be reliably deduced from other data (e.g. a missing Time
                          Recording Log date for a phase that has a corresponding entry 
                          with a date in the Defect Recording Log).
      \item Correct value is unclear.  These defects can never be corrected with
                          complete confidence.  An attempt can be made to fix them using
                          a set of rules to provide consistency.
      \end{itemize}
   \item{\bf Hidden:}     Defects that could only have been detected by direct
                          observation of the person using PSP and subsequent 
                          comparison with the recorded data. 
      \begin{itemize}
      \item Missing values.  Primarily missing Time and Defect Recording Log entries.
      \item Fabricated data. Data values that do not reflect what actually happened. 
      \end{itemize}
   \end{itemize}
\item {\bf Calculated data field defects:} Can be fixed by re-doing a
                   calculation or PSP operation using correct primary data values.
\end{itemize}

Hidden defects, which are of special interest, could have several sources:
\begin{itemize}
    \item Missing data values of which the programmer is not aware. This includes
          defects not recorded because the programmer became completely
          absorbed in fixing a tricky bug.
    \item Inaccurate data values of which the programmer is not aware.  For example,
          a faulty {\it Start} value in a Time Recording Log entry.
    \item Data values created in an attempt to recover lost information or 
          information not recorded due to preoccupation with programming tasks, etc.
          For example, if a Time Recording Log was accidentally thrown away, the
          programmer might try to reconstruct it from memory.
    \item Willful recording (or non-recording) of inaccurate data due to outside pressures such
          as an employer performing evaluations based on a PSP measure or because of a
          class that requires the use of PSP from a person not commited to using PSP.
\end{itemize}


\section{Were the defects a natural result of the learning process?}

\section{So what is it about PSP that produces all these errors?} 

\subsection{Many forms} 

\subsection{Multiple processes, so as user learns PSP, familiar forms change} 

\subsection{Complicated computations with higher PSP levels} 

\subsection{Instructions in textbook not always clear} 

\subsection{Data interdependencies between forms complicated in higher PSP levels} 

\subsection{Many forms with many fields to fill out by hand, at the same time as coding} 

\subsection{Tedious computations at the end of even minor projects} 

\subsection{When computations rely on historical data, finding the data takes time} 

 

\section{What are the implications?} 

The results presented above show that the PSP method can lead to low data 
quality, and that this low data quality can lead to incorrect conclusions 
about individual and group performance.  However, these results do not imply  
that the PSP method is wholly unuseful.  On the contrary, student evaluation 
of the PSP method was uniformly positive, and even if certain numerical  
values are incorrect, the process still provides students with profound new 
insight into the software development process.  Instead, these 
results could be useful in motivating two kinds of improvements to the PSP  
process. 

\subsection{Automated tool support} 
First this study shows that spreadsheets are insufficient as a data quality 
assurance mechanism.  Instead, PSP needs more sophisticated tool support to 
overcome the kinds of data quality problems observed in this research. 
Such tools should satisfy the following requirements: 

1. Automate as much of the collection of raw data as possible. 

2. Do all calculations using the raw data. 

3. Provide guidance to the user in choosing the correct form/fields 
   to work with, based on the current position in the process script. 

4. Only give the user forms/fields appropriate for the current 
   process/phase. 

5. Allow the user to see results of data analysis in many formats and 
   allow the user access to raw data for further study. 

[Add others] 

\subsection{Measurement dysfunction} 
Second, the PSP method must address the issue of measurement 
dysfunction. Measurement dysfunction in software development 
is a situation in which organizational forces lead to the 
conscious or unconscious skewing of data to support the 
trends desired by management, even when the true trend is 
opposite that portrayed by the data.  As a simple example, 
application of PSP should lead to lower defect density over 
time.  Such an effect can be easily achieved by a student: 
simply record less defects on the PSP defect data sheet in 
later projects.  Given that defect data collection is quite 
time consuming, and given that students are under 
significant time pressures later in the semester, it is 
possible that observed downward trends in PSP defect data 
could be due more to increasing demands upon student time 
than to improvements in their development skill.  Other 
potential sources of measurement dysfunction in PSP include 
[insert summary here]. 



\chapter{Conclusions/Future Directions} 
In conclusion, this thesis describes a case study of PSP 
to assess data quality issues. 
It has been shown that PSP users can make significant numbers 
of errors, and that these errors can make  
a significant impact upon measures of quality and 
productivity.  Analysis of these errors leads to a 
set of requirements for automated PSP support tools that 
should alleviate many of these problems.  The errors also 
lead to an analysis of PSP data from the standpoint of  
measurement dysfunction, and the problems this issue  
raises for data quality.  Future research could be
devoted to the empirical evaluation of these proposals 
to determine whether they do lead to improvement of  
data quality in the personal software process. 

\end{document} 


% Mention somewhere:

% Why were task planning and schedule planning templates excluded?

