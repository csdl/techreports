
8. Thoughts about the conclusion:

Causes of the analysis problem ( in no particular order):

- PSP is done at the same time as project development, leading to scattered
attention/focus

- Many forms, especially at higher levels (the folders with the student
data are on the shelves to the right of my desk, you could count the ones
for Project 8 or 9 done under PSP2 if you wanted an example - those folders
are at the bottom of the stack)

- Many fields on each form (I did carefully count once that even at PSP1,
the Project Plan Summary form has over 90 fields)

- On these numerous and complicated forms, not all fields are applicable to
the current phase (whatever phase that is)  Easy to get confused about what
you're supposed to be doing *now* as opposed to later.

- Complex calculations, such as regression

- Calculations/operations involving prior projects - have to leaf through a
huge pile of old forms, or rely on a possible inaccurate list (yet another
form!) of the pertinent values such as defects per phase to-date, minutes
per phase to-date, new and changed to date, planned/actual sizes and times
for many prior projects, etc.

- Calculations involving decisions among various methods (time estimation
in particular) and decisions about which data points to include
(identifying outliers)

- Scattered instructions for form completion.  Yes there are the process
scripts, but you have to look on page 672 for instructions for Size
Estimation and page 535 for time estimation, with reference to page 613 for
regression instructions and page 45 for a time estimation method diagram,
etc. (fictitious page numbers!)

- Stupid errors (see table on time recording log errors in calculating
delta time - this isn't a difficult calculation but for 4 out of 9 projects
affected 7% or more of time recording log entries)

Methods for resolving analysis errors:
- Automation
   * To provide guidance through correct order of phases, forms to use in
each phase, and fields to fill out for each form for the current phase. 
Need for this shown by 275 blank field errors, 142 entry errors, 16
sequence errors (section 5.1)
   * To provide context sensitive help (if user needs information on code
review, it can be available exactly at the time and place that code review
is being done)
   * To do calculations for user (need shown by 705 calculation errors)
   * To handle inter-project and intra-project transfers for user (need
shown by 212 inter-project transfer errors and 99 intra-project transfer
errors).  User should not have to remember or know anything about prior
projects - by specifying current project type, language, and PSP process,
system should be able to select appropriate prior data.
   * To speed up planning and postmortem phases
   * To provide an all-in-one approach:  Students had many tools available
to them from calculator to spreadsheets to JavaLOC.  But (as I've found out
from trying to create the wretched graphics our paper includes) it is
irritating, distracting, and time-consuming to use 6 or 7 tools when it
would be possible to seamlessly include every needed service within one
package.  This can help to shift focus from "doing the PSP process" to
actually looking at the data.  When postmortem calculations take about 2
minutes, it seems more likely that someone would take the time to look at
the results and think about the data, (as opposed to a postmortem that
takes 2 or 3 hours - not uncommon in our data).
- (Back to main ways to resolve analysis errors) Improved form design.  If
numbers need to be manually transferred between forms and projects, the
forms could be modified without too much effort to make it more clear which
numbers get transferred where.  For example, if Total LOC fields were all
surrounded with a heavy black line, and New and Changed LOC fields were all
shaded gray boxes, I think it would cut down dramatically on the transfer
errors for time and size estimation.
- Better organized instructions.  It would be nice to have small PSP
reference books for each phase.  Obviously a lot of the instructions would
be duplicated from book to book, but only pertinent information would be
included, and instructions could be much better ordered.

Causes of the collection problem (in no particular order, and probably
overlapping):
- Measurement dysfunction
   * The very presence of PSP data as basis for evaluation in class (if you
use this, I think it should be very carefully explained - it was somewhat
confusing to me at first, and might be even more confusing to others who
were just absorbing the concept of measurement dysfunction)  Also, students
may feel, despite reassurance, that LOC/hour or defects/KLOC have some
influence on their grade.  (remember Robert's comments at the beginning of
the semester).
   * PSP makes personal measures such as LOC/hour very visible to peers
(because of technical review).  There might be unspoken competition among
students, or subconscious bad feelings about being a "worse" programmer
than a classmate.
- Doing PSP during development - the distraction of doing something while
simultaneously recording measures about the thing could be distracting, or
even, in the case of defects for example, change the thing you're doing. 
(What I'm trying to say is that the very process of recording defects while
coding could cause you to make more defects during coding).  Since the
programmer is already distracted by developing, the collection process is
likely to suffer.
- Laziness - even fitful periods of laziness (my personal downfall in the
area of defect collection)
- Forgetfulness - you get so absorbed in doing development that you even
forget you're doing PSP at the same time, or the phone call is such an
interruption that you don't remember to record the interruption ...
- Stupid mistakes - writing down 8:20 for planning start time when you
really meant 9:20, etc.   Or misclassifying defects, or putting them in the
wrong phases, or mixing up lines added and deleted when copying from
JavaLOC results to the form, etc.
- Bad estimates.  I'm mainly thinking here of defect fix times.  This is
the worst time to have to record something, and often after fixing a defect
you don't know whether you spent 15 or 35 minutes doing it.

Ways to resolve the collection problem:
-Address measurement dysfunction issues
   * situation specific
-Automation
   * an integrated environment could make doing PSP simpler so that there
is more mental room left to remember to do collection
   * an integrated environment could help prevent many "stupid errors" by
automatically filling in values such as start/stop time (you may still have
to tell the computer that you are starting design, but it can create the
timestamp)
   * automation could provide timing for defect fixes and automatically
measure programs and added/modified/deleted and put the numbers in the
right places.
   * an automated version of the PSP is less intrusive (not quite the word
I'm looking for) than paper/pencil.  If to enter a defect as far as
starting to measure the fix time is a matter of 10 seconds and no
hand/arm/body movements away from the screen and keyboard, a person might
be more inclined to record the defect.  Ditto for interruptions.
   
Guess that's it!
Thank you so much for finishing everything up.

