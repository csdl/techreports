%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% -*- Mode: Latex -*- %%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% 05-01-relatedwork.tex -- Thesis white paper - software inspections
%% Author          : Aaron A. Kagawa
%% Created On      : Mon Sep 23 11:52:28 2004
%% Last Modified By: Aaron Kagawa
%% Last Modified On: Mon May 30 13:33:49 2005
%% RCS: $Id$
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%   Copyright (C) 2004 Aaron A. Kagawa
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


\chapter{Related Work}
\label{chapter:relatedwork}
This chapter presents the work related to Priority Ranked Inspection.  The
initial invention of PRI can be attributed the current traditional
inspection literature's consistent lack of information on the selection of
documents for inspection. Previous work on software inspection has focused
on the process in which inspection is conducted. Instead, this research
focuses on the selection of documents for inspection.

\section{Types of Inspection}
Since Michael Fagan invented the inspection technique in 1976, there have
been many variations on the general concept, process, and even the names of
the inspection process. We now have Fagan Inspection \cite{Fagan76},
Software Inspection \cite{Gilb93}, In-Process Inspection \cite{Strauss94},
peer review \cite{Wiegers01}, software reviews, code walkthroughs,
inspections without meetings, and many more different twists on the
original concept.  Each of these techniques claims to be the best
inspection method for certain circumstances. For example, some argue that
the inspection meeting is a waste of time and resources \cite{Johnson97,
  Votta93}. Others argue that the inspection meeting is critical for
supporting social and educational aspects of inspection \cite{Gilb98,
  Gilb99, Johnson98}. Throughout this thesis I use the term ``inspection''
to encompass processes defined as a static analysis technique that relies
on visual examination of development products to detect errors, violations
of development standards, and other problems \cite{IEEE-STD88}.

There are two major problems the large variations of different processes.
First, there is no standard or accepted definition of the inspection
process. Second, even when processes are fairly well designed they are
extremely hard to follow, thus in practice there are many different
variations of actual implementation of the same inspection process.
Therefore, these problems indicate that these processes have ambiguous or
unclear definitions \cite{csdl-95-08}. One of the primary reasons why so
many different variations exist is because there is realatively little
knowledge and theory about inspection effectiveness factors \cite{Ebenau94, 
  csdl-95-08}. 

Regardless of the problems listed above, it is generally accepted that
adopting any variation of the inspection process is much better than not
doing any. The following sections contain descriptions of a few of the most
well known inspection process. I must remphasize that most, if not all,
traditional inspection processes focus on how to conduct the inspection
process. The Priority Ranked Inspection process takes a different approach
by focusing on how to select documents to be inspected within the process.

\subsection{Informal Inspection Processes}
Ad hoc Review, Peer Deskcheck, Pair Programming, Walkthrough, and Team
Review are all different types of informal inspection processes.

Ad hoc review is by far the most informal form of inspection. It is a
spur-of-the moment request of asking a fellow developer to help look at a
piece of code. These reviews are not planned, not measured, and have no
long term impact on the software development process.

Walkthroughs are informal presentations in which a developer, usually the
author of the source code, describes various aspects of the document under
review \cite{Wiegers02, Freedman90}. Walkthroughs do not have a defined
proceedure and the results of the process is often not recorded. 


\subsection{Formal Inspection Processes}
Michael E. Fagan invented inspections in 1976 while working at IBM.
``Inspection'', with a capital ``I'', or the term ``Fagan Inspection'' is
used when referring to his technique. Using Fagan Inspection, Bell Labs
reported 14 percent productivity increase, better tracking, early defect
detection, and more importantly the employees credited Fagan Inspection
with an ``important influence on quality and productivity'' \cite{Gilb93}.

One of the most widely accepted type of formal inspection is ``Software
Inspection'', which was developed by Tom Gilb and Dorothy Graham in the
book of the same title. Software Inspection is based on the Fagan-style
Inspection and is generally more robust and disciplined than other
techniques.

Software Inspection is defined as a two part process, product Inspection
and process improvement. According to the Software Inspection literature,
product Inspection and process improvement cannot and should not exist
without one another.

\subsubsection{Project Inspection}
There are ten lengthy steps in the product Inspection portion of the
Software Inspection process. I have provided a short description of each of
the steps in the following sections.

\begin{flushleft}
  \textit{Request: Initiating the Inspection Process} \\ This
  Inspection process begins with an author's voluntary request for an
  Inspection. The request is delegated to an Inspection leader. An
  Inspection leader is a trained-and-certified employee and is generally
  not a manager. It is the leader's responsibility to organize, plan and
  conduct the inspection.
\end{flushleft}

\begin{flushleft}
  \textit{Entry: Making Sure 'Loser' Inspections don't Start} \\ The
  Inspection leader is required to check the volunteered document against
  an Entry Criteria. This criterion ensures that the document is worth
  inspecting. The leader conducts a quick look through the document to
  assess the initial quality of the document. For example, the author has
  spent an adequate amount of time working on the document, there are a
  minimal number of minor defects, etc. ``The purpose of having entry
  criteria to the Inspection process is to ensure that the time spent in
  Inspecting the product and associated documents is not wasted, but is
  well spent'' \cite{Gilb93}.
\end{flushleft}

\begin{flushleft}
  \textit{Planning: Determining the Present Inspection's Objectives and
    Tactics} \\ If, and only, if the document has successfully passed the
  entry criteria, then the Inspection leader can begin to plan the
  Inspection. This includes many managerial tasks; inviting participants,
  scheduling an Inspection meeting, gathering supportive documentation,
  establishing average optimum checking rates and suggesting areas of
  possible improvement in the document.
\end{flushleft}

\begin{flushleft}
  \textit{Kickoff Meeting: Training and Motivating the Team} \\ The purpose
  of a kickoff meeting is to ensure that Inspection process begins
  correctly. This includes dispensing required documents and explaining the
  expectations of the participants. This meeting saves time by dispensing
  the necessary information, which is needed to conduct the Inspection.
  This meeting is also an opportunity to introduce process changes in the
  Inspection process.
\end{flushleft}

\begin{flushleft}
  \textit{Individual Checking: The Search for Potential Defects} \\ The
  participants, or `` checkers'', are required to work alone to find
  potential major defects in the documents provided. These defects are
  generally identified with the aid of rules, checklists, and other
  standards of the organization. 
\end{flushleft}

\begin{flushleft}
  \textit{Logging Meeting: Log Issues Found Earlier and Check for More
    Potential Defects} \\ This meeting has three purposes: log the issues
  generated in the individual checking phase, discover more major defects,
  and identify possible ways of improving the inspection process. This
  meeting is conducted and moderated by the Inspection leader. 
\end{flushleft}

\begin{flushleft}
  \textit{Edit: Improving the Product} \\ The overall goal of Inspection
  is to remove the defects that were found. During this phase, the author
  is given a list of the issues (issues become defects if they are deemed
  as valid defects) that were identified and is required to make the
  necessary improvements to remove any defects from the document.
\end{flushleft}

\begin{flushleft}
  \textit{Follow up: Checking the Editing} \\ The purpose of this phase is
  to ensure that the Edit phase was correctly executed by the author. The
  Inspection leader must ensure that all issues are correctly classified,
  either as valid defects or invalid issues and that the author has
  corrected all known defects.
\end{flushleft}

\begin{flushleft}
  \textit{Exit: Making Sure the Product is Economic to Release} \\ The
  Inspection leader consults the exit criteria to determine if the
  inspected document contains a certain level of quality as defined by the
  exit criteria. For example, the Exit criteria can contain rules that
  specify: successful Follow Up phase completion, certain metrics about
  this particular Inspection was recorded and within limits, and that the
  number of defects are below a certain threshold.
\end{flushleft}

\begin{flushleft}
  \textit{Release: The Close of the Inspection Process} \\ This is the last 
  phase of the Inspection process. At this point, the document can be
  officially released and the Inspection process is concluded. However, if
  it is determined that there are some acceptable/unavoidable defects
  remaining in the document, then such defects must be documented.
\end{flushleft}


\subsubsection{Process Improvement}
Equally important to the product Inspection portion of Software Inspection
is process improvement. Process improvement is the continuous improvement
of the entire software development process. The idea is simple; Inspections
can remove defects, but process improvement can prevent defects.

In Software Inspection, process improvement can be accomplished in many
ways. A low-cost procedure could be as simple as discussing the cause of
the defects. This discussion takes place in a Process Brainstorming
Meeting. ``The purpose of the process brainstorming meeting is \textit{not}
to deal with the document and its defects. It is to deal with the
\textit{causes} of those defects'' \cite{Gilb93}.

On the other hand, process improvement can be very expensive, Process
Change Management Teams. Specialized teams can be formed to collect and
analyze the metrics that are obtained from the conducted Inspections.


\subsection{Software Inspection and Priority Ranked Inspection}
The different types of traditional inspection processes explained above are
quite different from the Priority Ranked Inspection (PRI) process. The
biggest difference is traditional inspection processes provide guidelines
on \textit{how to conduct inspections} and PRI provides guidelines on
\textit{what to inspect}. In fact, the PRI process does not provide any
guidance on how to inspect the documents once they are selected. Instead,
PRI is a document selection process that wraps around any traditional
inspection process.

\subsubsection{Lack of Discussion about Selection of Documents}
In the book, ``Software Inspection'', Tom Gilb and Dorothy Graham provide
very few paragraphs on the subject of document selection. The following is
the entire paragraph that discusses document selection.

\begin{quotation}
  \textit{The starting point for any Inspection is the request from the
    author of a document that the document be Inspected. Inspection is
    always voluntary, and authors must not be coerced into 'volunteering'
    documents against their will. \\ Authors are motivated to request
    Inspection for two reasons:
\begin{enumerate}
\item they will get help to upgrade their document before official release;
\item they must achieve exit status in order to claim that they have met a
  deadline, and that the quality of their work is really good enough.
\end{enumerate}
}
\end{quotation}

The traditional inspection literature fails to address several key areas of
selecting a document for inspection.

\begin{enumerate}
\item What happens when an organization does not have enough resources to
  inspect every document that is ready? Inspections are expensive. It can
  consume 15 percent of the projects budget \cite{Gilb93}. What happens to
  the volunteering process when an organization can inspect one in every
  five documents? 
\item What happens when two authors volunteer two different documents at
  the same time? Which document should be selected? Selecting what to
  inspect from two documents is not difficult. However, what if there are
  twenty or a hundred different documents that are waiting to be inspected.
\item Defects can occur in documents that already ``exited'' the
  development and inspection process, can these documents be inspected? The
  current literature suggests a linear development process, which  documents
  that have been inspected and completed the development process are never
  to be inspected again.
\end{enumerate}

I strongly believe that the selection of documents for inspection is a
complicated process that warrants much more attention than the current
inspection literature provides. 

\subsubsection{Cost Cutting}
\begin{quotation}
  \textit{``The bottom line is that I [Tom Gilb] believe that it is more
    relevant to view Inspection as a way to control the economic aspects of
    software engineering rather than a way to get 'quality' by early defect
    removal'' \cite{Gilb99}.  }
\end{quotation}

Tom Gilb is correct. If inspections do not provide an economic benefit,
then why do them at all? However, with an estimated 10-15 percent of a
project's budget that is required to conduct successful inspections, it is
difficult for organizations with limited inspection resources to correctly
implement the suggested process. The bottom line seems to be that not all
organizations can invest 10-15 percent of their budget to inspections.

In Software Inspection, there are three primary ways to reduce the
resources; sampling, inspecting up-stream documents, and focusing on major
defects. The practice of sampling suggest that instead of inspecting an
entire document, pick one to four representative portions of the document.
The practice of inspecting up-stream documents suggests that requirement
and design documents need to be correct before programming can begin.
Focusing on major defects suggests that minor defects, such as code
comments, are irrelevant to the customer-performance of the system and
should be ignored.

In my opinion, Software Inspection and other traditional inspection
literature does not address the most obvious way to save resources, which
is minimizing the number of documents that need to be inspected. The
current literature suggests that inspections are a ``gateway'' to complete
the document's development process. This process works well for
organizations that have the resources to treat it as such. However, for
organizations with limited inspection resources, inspecting every document
is quite impossible. In contrast to traditional approaches, Priority Ranked
Inspections embraces the notion of skipping the inspection of some
documents.

\subsubsection{Volunteering}
Another problem associated with the selection of documents for inspection
is the notion of volunteering. Notice in Section 2.3.1 the term 'voluntary'
is emphasized in Gilb and Graham's selection process. Yet, in the very same
book, ``Software Inspections'', contains a case study of Software
Inspections used in a company where documents were required to be inspected
rather than volunteered.

\begin{enumerate}
\item ``Most who tried inspections responded with enthusiasm, but only four
  groups were continuing to do inspections - not surprisingly, those groups
  in which the manager \emph{required} them. Most groups tried a few
  inspections, then interest waned as deadlines approached. A few managers
  ignored inspections altogether, citing schedule pressures as the
  reason.''
\item ``The vice president of marketing notified his department that
  inspections were \emph{required} for approval of all mandatory documents
  produced.''
\item ``Each year, development groups are \emph{required} to inspect
  more of their pre-code documents.''
\item ``Code inspections remain optional at least until \emph{100 percent}
  of the pre-code documents are inspected.''
\end{enumerate}




\section{Alterations to the Inspection Process}
This section presents some research on... [TODO: add more]

\subsection{Inspections Without Meetings}
Lowernece Votta Jr. found that the inspection meeting, where the inspectors
meet and discuss the validity of the issues found in the individual phase,
is ineffective and can actually delay the inspection process days and even
weeks \cite{Votta93, Glass99}. Therefore, he proposed that the inspection meeting be 
totally eliminated. Of course, other publications and organizations
disagree and would rather hold inspection meetings, because they value the
benefits of synergy and education over the increased resources need to
conduct inspections. 

\subsection{Outsourcing Inspections}
An extreme process change is outsourcing the whole inspection process to a
third-party company. Jasper Kamperman states that outsourced software
inspections are cheeper, easier, and greatly beneficial \cite{Kamperman05}.
A company utilizing outsourced inspections would send out software code,
documentation, and a survey and receive back a list of potential defects.
Kamperman mentions that outsourced inspections will probably find more
superficial defects than deep design problems.

\subsection{Automated Software Inspection}
Due to the rigourous and labor-intensive requirements of formal inspection
processes, a whole branch of research on inspection is aimed at automating
some part of the inspection process. There are two different ways
automation can be added to a inspection process. First, add tools that
automate the inspection process, which makes it less labor-intensive to
follow guidelines and record the results \cite{vanEmden02}. Second, tools
that inspect code automatically, which replaces some of the work required
of human inspectors \cite{vanEmden02}. Most of the current research focus
on the second type of automatic software inspection. This type of
automation has a very low overhead with many potential benefits. For
example, tools that support automated software inspection is less dependent
on human factors \cite{NagappanWPSV04}. PRI implemented with Hackystat is
an example of a type of automated software inspection support.

\subsubsection{Automated Software Inspection Tools}
Automatic software inspection tools (ASI) are a relatively new way to
identify defects early in a development process. In addition, it is very
useful in identifying a subset of defects found in manual software
inspection, but is not as labor-intensive. ASI tools are also known as
static analysis tools that analyze source code and provide erorr and
warning messages similar to a compiler.

Using ASI does not replace manual inspections. More labor-intensive manual
inspections, for example Software Inspections, will find more complex,
functional, algorithmic design probems \cite{NagappanWPSV04}. However, ASI
tools will make manual inspections more effective by allowing the
inspectors to focus on these issues. In the related research field of
pre-release defect density, Nagappan and Ball \cite{NagappanB05} had very
successful findings:

\begin{enumerate}
\item Static analysis defect density can be fused as early indicators of
  pre-release defect density;
\item Static analysis defect density can be used to predict pre-release
  defect density at statistically significant levels;
\item Static analysis defect density can be used to descriminate between
  components of high and low quality.
\end{enumerate}
  
Critisims of ASI tools state that the defects found are generally
superficial programmatic errors and cannot replace manual inspections
\cite{vanEmden02}. In addition, a major problem with ASI tools is that they
can generate a up to 50 false possitives for every true defect found
\cite{NagappanWPSV04}.


\subsubsection{Java Code Smells}
A unique idea to improve the effectiveness of software inspection with
automation is ``code smells'' \cite{vanEmden02}. ``Code smells are a
metaphor to describe patterns that are generally associated with bad design
and bad programming practices \cite{vanEmden02}. Code smells are different
from other static analysis tools such as the one mentioned in
\cite{NagappanWPSV04}. Instead, it is inspired by the ``code smells''
defined in \cite{Fowler99}, which describe patterns of code that required
refactoring. Like the human sense of smell, any group of source code has a
smell, the question is whether the smell is good or bad. Therefore, code
smells will help inspectors decide what and when to inspect software code
\cite{vanEmden02}. The following are a few examples of code smells
discussed in \cite{vanEmden02}:

\begin{enumerate}
\item Duplicate Code
\item Methods that are too long
\item Classes that contain too much functionality
\item Classes that violate data hiding of encapsulation
\item Classes that delegate the majority of their functionality to other
  classes
\end{enumerate}

There are three defining characteristics of code smells; what smells are
detected, how the smells are detected, and how are the smells are
presented.

\paragraph{What smells are detected}
There are three general rules associated with code smells. First, like the
human sense of smell, there is no static list of all possible code smells.
Different projects and organizations can have a different set of code
smells that works best for their quality assurance. Second, code smells are
subjective measures which are based on the organization and project's
previous experience. Code smells are parameterized to provide subjectivity
on whether specific smells are good or bad. Third, code smells do not have
to be precise. In other words, code smells do not give an absolute
decission about the quality of a software document. Instead, it provides a
possible indication of problems relative to the other documents in the same 
software system. 

These three rules are very similar to the rules in PRI. PRI is fully
extensible and provides the ability to add any PRI measure and PRI
indicator. PRI also supports subjectivity in the calibration of PRI
indicators. PRI also does not give an absolute determination of a software
document's MINI or LINI destinction. Instead, the MINI and LINI distinction 
is relative to the other PRI rankings in the same project. 

\paragraph{How the smells are detected}
Code smells are detected with a software tool that statically analyzes
source code. As I previously stated, the static analysis tool makes
automated software inspection possible. Therefore, code smells provides the 
possbility of lowering inspection resources by automatically detecting code 
that has a bad smell. 

%%There are two different types of code smells; primitive and derived smells.
%%Derived smells are created with a combination of one or many primitave
%%smells. Primitive smells are detected directly from the source code.

Code smells are measures of a software product. PRI differs from this
approach, because it allows measures of software product and development
process activities. One interesting future enhancement to PRI is to
investigate the addition of code smells to the PRI measures. One would
think that if code smells are a useful measure, then the combination of
code smells with other software product and development process measures
would also be beneficial. 

\paragraph{How are the smells are presented}
Code smells are presented with structural graphs. These graphs allow the
user to interact with the graphs to find ``smelly'' code. 

Although, I haven't used the presentation user interface, it seems that
this particular choice of graphical presentation is a little difficult to
use effectively. In my opinion, users will not want to search for the
``smelly'' code. Therefore, I believe the most useful presentation of code
smells is a tabular ranking similar to the ranking provided in
PRI. Furthermore, it is not clear whether the presentation of the code
smells shows whether a smell is good or bad. 

\paragraph{}
To conclude code smells are an unique automatic software inspection
technique and has many of the same problems and solutions that I have
addressed in my PRI research. 




\section{Selection of Documents for Inspection}
This section presents some research on... [TODO: add more]










