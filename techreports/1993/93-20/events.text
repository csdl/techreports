, powerful,
yet lacking high-level structure, process, and mechanisms.  Many current
group work contexts illustrate the failings of primitive collaboration
software.  For example, imagine that you are part of a team writing a
complex document, where different members must cooperate in different ways
on different sections.  Perhaps (expensive) outside experts must be asked
to review the document at certain stages, and management must be kept
current of significant changes to the scope or findings.  Clearly, while
e-mail or shared files provide a minimal level of support for this task,
much more can and should be provided by the software environment.
Providing and integrating explicit support for the different roles of group
members, for the process of development, and for the integration of
external resources is the goal of modern collaborative software. Over the
next decade, such ``second generation languages'' of collaboration will
transform the way people use computers to work with other people as surely
as spreadsheets and point-and-click interfaces transformed the use of
computers in the last decade.

\section{How this book teaches about collaborative systems}

{\em Constructing Collaborative Systems} introduces you to Egret, one such
second generation language for collaboration. Egret is a distributed,
hypertext, client-server-agent framework that has been used since 1990 to
develop collaborative applications for learning, authoring, software
review, news reading, and other areas.  Egret's current design and
functionality is a direct reflection of the (sometimes painful) lessons
we've learned about collaborative systems during the development 
and evaluation of these
systems. This book escorts you on a programmatic guided tour of Egret,
stopping to point out particularly interesting sights and sounds, as we
lead you in building collaborative systems of slowly increasing complexity,
sophistication, and power.

This guided tour also creates many opportunities to comment upon
general issues in collaboration technology. For some of these issues, Egret
provides an elegant solution, for others, Egret merely ``satisfices'', for
still others, Egret provides no insight.  No software architecture is
perfectly suited to every application context, and Egret is no exception.
We explain both the successes and failures of the Egret architecture,
since each contributes to your understanding of collaborative systems.

\section{Strengths and limitations of this book}

One strength of this book is the active involvement of the reader in the
process and products of collaborative system building.  This book teaches
you about collaborative system building by enabling you to build
collaborative systems.  It does this in small steps: each chapter focusses
on a single collaborative concept (such as shared, persistant data, or
real-time communication, or concurrency control). Each chapter is broken
down into sections that demonstrate concepts through short example Egret
programs---typically two pages or less.  Source code is provided, since th