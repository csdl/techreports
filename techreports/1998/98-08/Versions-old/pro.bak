
\documentstyle[12pt,times,/group/csdl/tex/lmacros]{/group/csdl/tex/uhthesis}
\input{/group/csdl/tex/psfig/psfig}

\begin{document}

\pagenumbering{roman}

\input{thesis-title}
\input{thesis-signatures}
\input{thesis-copyright}
\input{thesis-dedication}
\ls{1.5}
\input{thesis-acknowledgment}
\input{thesis-abstract} 
\input{thesis-TOC}
\pagenumbering{arabic} 

\input{chapter1-overview}
\input{chapter2-PSP}

\chapter{Related Works}


Watts Humphrey's Personal Software Process focuses on the software development
process for an individual software engineer.

* The main focus of the PSP is the individual programmer.  However, it can be used as 
Engineering tool in group development as well.  (9th conf on Software Engineering Education, p119 (125)

* Like other software processes, PSP requires significant investment of time and effort by the
  software engineer.  However, it directly benefits the person who makes the effort with 
  information about their own process and products. (9th conf on Software  Education,   
  p 52)

The concept of {\it measurement dysfunction} is essential in understanding
the causes and prevention of the collection problem.  This idea is
discussed in Chapter 2.  However, it would probably be useful to give the
definition again from Robert Austin's book ``Measuring and Managing
Performance in Organizations'' \cite{Austin96}:
\begin{quote}
  Dysfunction occurs when the validity of information delivered by a system
  of measurement is compromised by the unintended reactions of those being
  measured (p. 30).
\end{quote}

\input{chapter4-casestudy}
\input{chapter5-tools}
\input{chapter6-results}


\chapter{Discussion} 


\section{The Collection Problem}

In the two-stage model of the PSP illustrated in Figure \ref{fig:model},
the collection phase starts with actual work and ends with records of work.
Problems in this phase occur when the records of work (size, time, and
defect data,) do not accurately reflect the actual work.  Of the 1539
errors found in this study, 90 were made in the collection phase.  However,
there are indications that the actual number of collection phase errors was
much higher.  Analysis phase errors are relatively easy to find, since the
analysis steps can be duplicated and the resulting data sets compared.  The
collection phase cannot be duplicated, so there is no reliable way to
determine if a student padded time log entries, failed to record defects, or 
incorrectly measured program size.

\subsection{Causes}

One possible cause of the collection problem is measurement dysfunction.
Chapter 2 discusses this concept in more depth, but briefly, measurement
dysfunction in software development is a situation in which organizational
forces lead to the conscious or unconscious skewing of data to support the
trends desired by management, even when the true trend is opposite that
portrayed by the data.  As a simple example, using the PSP should lead to
lower defect density over time.  It is easy for a programmer to achieve
such an effect: simply record fewer defects in the Defect Recording Log
over time.

The problem with teaching PSP in a classroom setting is that any grades
given must be based, at least in part, on the completed PSP forms.  It is
difficult for the instructor to communicate convincingly to the students
that the actual values recorded (if the result of correctly doing the PSP)
do not impact their grades.  Students can have trouble understanding, for
example, that the instructor is evaluating their Defect Recording Logs
based on completeness and correctness, but {\it not} on the number of
defects recorded.  Similarly, with LOC per hour, students may not
understand that the instructor is looking for a correct computation rather
than evaluating productivity or wanting to see improvement over time.
Therefore, a situation develops which is ripe for measurement dysfunction.
Consciously or unconsciously, students feel pressure to improve the
accuracy of their estimates and the quality of their programs.  By
manipulating data gathered in the collection phase, it is very easy to
change the outcome of the derived measures such as LOC per hour, yield, and
the cost-performance index.

Another possible cause of problems in the collection phase is pressure for
time.  Given that defect data collection is quite time consuming, and given
that students are under significant time pressures later in the semester,
it is possible that observed downward trends in PSP defect data could be
due more to increasing demands upon student time than to improvements in
their development skill.  

Developers using the PSP collect time and defect data during the
development phases of design, code, compile, and test.  It can be
distracting to do the work involved in these phases while simultaneously
recording measures about the work.  This can lead to mistakes in recording
or can even cause developers to forget to record data altogether, if they
become so absorbed in development that they forget that they're doing PSP
at the same time.  (In a worst-case scenario, a person could be so
distracted by recording defects during coding that he or she could actually
inject more defects than would have occurred without the PSP.)  Even if a
developer becomes aware that he or she has forgotten to record, say, a
phone call interruption, just estimating the interruption at a later time
is a source of error in itself.  Errors caused by distraction could also
include incorrect defect fix times.  Often after fixing a defect, a
programmer has no idea whether the fix took 15 or 35 minutes.

Simple laziness, even fitful periods of laziness, is also a source of
collection error.  It is very easy to skip the recording of ``little''
defects or typos, especially when fixing a defect takes less time than
recording it.  Of course, this is closely related to a person's motivation
for doing the PSP at all.  If students are recording time and defects
simply to get forms filled out so that they can get a good grade in a
class, the completeness of the data means very little to them.  Undeniably,
there are times, such as when a defect is injected while fixing another
defect, when defect recording is irritating.

Finally, there are plenty of ways to make ``stupid mistakes'', even when
collecting data as simple as time and defects.  For example, a user could
write down 8:20 for planning start time when he really meant 9:20, give
defects the wrong types or phases, or mix up lines added and lines deleted
when copying results from the linecounting program to the PSP form.
\footnote{Stupid mistakes?  An AST tech support person reported that one
customer complained that her mouse was hard to control with the dust cover
on it.  The dust cover turned out to be the plastic bag in which the mouse
was packaged...  At Dell, a customer called to say he couldn't get his
computer to fax anything.  After 40 minutes, the tech discovered the man
was trying to fax a piece of paper by holding it in front of the screen and 
hitting the ``send'' key...  At Compaq, one customer was having diskette
problems.  After trouble shooting for a while (magnets, heat, etc.), tech
asked the customer what else was being done with the diskette.  Response:
``I put a label on the diskette, roll it into the typewriter...''.
} 

\subsection{Prevention}


 -Address measurement dysfunction issue

    * situation specific

 -Automation

    * an integrated environment could make doing PSP simpler so that there
 is more mental room left to remember to do collection

    * an integrated environment could help prevent many "stupid errors" by
 automatically filling in values such as start/stop time (you may still
have
to tell the computer that you are starting design, but it can create the
timestamp)

    * automation could provide timing for defect fixes and automatically
 measure programs and added/modified/deleted and put the numbers in the
 right places.

    * an automated version of the PSP is less intrusive (not quite the
word
 I'm looking for) than paper/pencil.  If to enter a defect as far as
 starting to measure the fix time is a matter of 10 seconds and no
 hand/arm/body movements away from the screen and keyboard, a person might
 be more inclined to record the defect.  Ditto for interruptions.



 - Measurement dysfunction

    * The very presence of PSP data as basis for evaluation in class (if
you
 use this, I think it should be very carefully explained - it was somewhat
 confusing to me at first, and might be even more confusing to others who
 were just absorbing the concept of measurement dysfunction)  Also,
students
 may feel, despite reassurance, that LOC/hour or defects/KLOC have some
 influence on their grade.  (remember Robert's comments at the beginning
of
 the semester).

    * PSP makes personal measures such as LOC/hour very visible to peers
 (because of technical review).  There might be unspoken competition among
 students, or subconscious bad feelings about being a "worse" programmer
 than a classmate.


\section{The Analysis Problem}

In the two-stage model of the PSP illustrated in Figure \ref{fig:model},
the analysis phase starts with records of work and ends with analyzed work.
Problems in this phase occur when PSP users make any kind of errors in this
analysis, whether incorrectly performing computations, providing the wrong
data for computations, or choosing the wrong analysis methods.  Almost all
the errors found in the case study were committed during the analysis
phase.  These errors do not include the thousands of fields with incorrect
values that were the result of subjects performing subsequent analysis
steps using the flawed data.

\subsection{Causes}

Why did the subjects make so many mistakes? Part of the problem lies in the
nature of manual PSP.  To begin with there are a lot of forms.  PSP0 starts
out with four scripts and four forms.  PSP1 has five scripts and eight
forms.  By PSP2 there are five scripts, ten forms, and two checklists.
Seven of these forms and checklists are likely to extend to multiple pages
for even a medium size project. \footnote{PSP3? There are so many it would
  be easy to make errors just {\em counting} them: seven scripts, two
  checklists, and 16 forms. \\
  A programmer once went to a school, \\
  Thought to learn PSP - 'twould be cool. \\
  But, oh!, all those forms, \\
  Regression and norms -- \\
  She lit a fire with Humphrey as fuel. \\
  (The book, not the man - don't worry.)} 
 Not only are there are a lot of forms, there are a lot of fields on those
forms.  It isn't possible to give an exact number of fields per process,
since many of the forms, such as the Defect Recording Log, have a variable
number of entries.  However, on the PSP2 Project Plan Summary alone there
are 177 fields.

Just having a lot of forms with a lot of fields shouldn't make things
overwhelmingly complicated.  However, there are other factors involved.
First, on these numerous and complex forms, not all fields are applicable
to the current phase -- whatever phase that happens to be.  It is easy to
get confused about what form and field you are supposed to be filling in
now and what to do next.  Second, there are data dependencies between the
forms for a single project which involve a constant transferring of data
from paper to paper.  Almost every form has data that must be summarized
and sent to another form, or must itself have data from another form in
order for the user to complete the calculations. Every one of these
transfers is an opportunity for an error to be made, either by transferring
the wrong number or by transferring the right number to the wrong place.
Third, there are many calculations and operations that involve prior
projects.  Just locating the correct project, form, and field can be
frustrating and time-consuming, and there are the same opportunities for
transfer errors.  Particularly for size and time estimation, the user must
leaf through a pile of old projects, or rely on a possibly inaccurate list
of the pertinent values such as planned and actual size and time.  At best,
this list is yet another form to maintain.  Additionally, when learning the 
PSP, all the scripts and the set of forms change with each new process.
Therefore, as the user learns the PSP, familiar forms and scripts are
constantly changing.

Another factor contributing to analysis error is the textbook
\cite{Humphrey95} itself.  Admittedly, the material it covers is both
complex and extensive, but in some areas the instructions are not very
clear.  The main problem, however, is not the clarity of the instructions,
but their location(s).  For a single form, a PSP user might have to locate
three or more references in the book.  For example, the Size Estimating
Template is introduced on page 120 with a sample form showing a sample
project.  It is discussed over the following 4 pages.  The full
instructions are not given until page 684 (Appendix C, PSP Process
Elements).  A sample form is shown there, but no examples - all the fields
are blank.  In the instructions, references are made to Appendix A, Table
A27 (no page number given) for the procedure to calculate regression
parameters, and to Appendix A, Table A29 (no page number given) for the
procedure to calculate the prediction interval.  There are also some notes
about size estimation on page 621 (Appendix C, PSP Process Contents).
Further instructions about size estimation appear on page 679-80 in the
PROBE estimating script, phases 4-8.  However, there is no information
about how to combine the steps in this script with the seemingly
overlapping set of instructions on page 684.

Furthermore, instructions for new fields appear at inconsistent places in
the text.  The formula for {\it Cost Performance Index} appears in Appendix
C, Process Contents; while the formulas for the {\it Cost-of-Quality}
fields appear in the text itself, in Chapter 9.  An example worked out for
the Size Estimating Template appears in Chapter 5, but the example for the
PSP1 Project Plan Summary form is in Appendix C, Process Contents.
Instructions for carrying out time estimation are given in chapter 6, but
there is no index entry for ``time, estimation''.  The PSP user must look
under ``estimating, development time''.  All this makes it difficult for a
developer to find answers, or to feel confident that he or she has all the
pertinent information even after finding a useful reference.

The actual computations are another source of analysis errors.
Fortunately, the book does have a good 80-page appendix covering such
subjects as statistical distributions, numerical integration, tests for
normality, linear regression, multiple regression, prediction intervals, and
Gauss's method.  The appendix includes explanations and examples as well as
formulas.  However, even after gaining a good understanding of these
things, it is all too easy for a programmer to make a mistake when working
out a range calculation by hand:
\begin{displaymath}
\mbox{Range = }
t(\alpha / 2,n - 2)\sigma  \mbox{ }
\sqrt{1 + \frac{1}{n} + 
\frac{(x_{k} - x_{avg})^{2}}  {\sum_{i=1}^n (x_{i} - x_{avg})^{2}}
}
\end{displaymath}
or when writing a helper program to calculate correlation:
\begin{displaymath}
r(x,y) = \frac{n\sum^n_{i=1}x_iy_i - \sum^n_{i=1} x_i \sum^n_{i=1} y_i}
{\sqrt{
\left[ n\sum^n_{i=1}x^2_i - \left( \sum^n_{i=1}x_i \right)^2\right]
\left[ n\sum^n_{i=1}y^2_i - \left( \sum^n_{i=1}y_i \right)^2\right]
}}
\end{displaymath}
It is also easy to make mistakes in choosing among the various statistical
methods to use, particularly for size and time estimation.  The user must
also make decisions about which completed projects to include as historical
data and which ones to treat as outliers.

Finally, it is important to remember that the PSP doesn't take place in a
vacuum.  The user has to deal with all the forms, scripts, instructions,
and computations {\em at the same time} that he he or she is carrying out
another highly demanding intellectual task - software development.  The part
of the planning phase which contains the most difficult statistical steps
occurs right between the conceptual design and detailed design steps.  The
Time Recording Log and Defect Recording Log must be filled out in the midst
of the design, code, compile and test phases.  This probably accounts for
the high incidence of ``stupid errors'' in trivial calculations.  Finding
the number of minutes between start and stop times is not a difficult task,
but for 4 out of 9 assignments, this mistake affected 7 to 9\% of Time
Recording Log entries. % see /usr/thesis/timelog.errors
Programmers practice the PSP during development, and their attention is
inevitably split between the two tasks.
  \footnote{
  A developer started to write \\
  A routine for sorting - so trite.\\
  But he used PSP \\
  Couldn't focus, you see, \\
  And it ended out taking all night. \\}


\subsection{Prevention}

When considering ways to prevent analysis errors, the main answer is
automation.  Virtually every analysis error I discovered in the student
data could have been prevented if the students had used a well-designed PSP
tool. Such a tool could completely free users from the maze of phases,
forms, scripts, and instructions. The tool could ``understand'' the process
scripts well enough to guide the user through the phases, correctly
ordering the forms and presenting only the needed fields in the proper
order. The 275 blank field errors, 142 entry errors and 16 sequence errors
point to the need for these features.  The tool could, of course, do all
calculations automatically.  The 705 calculation errors show that this
should be a primary requirement. The tool could provide context sensitive
help at all times.  It could handle all intra-project and inter-project
data transfers and take over the management of project groups.  A user
would not have to remember anything about prior projects in order to do
size and time estimation or view to date values.  212 inter-project
transfer errors and 99 intra-project transfer errors show that this kind of
functionality is needed.\footnote{This tool should probably not be
  developed by the X Windows architects: ``If the designers of X Windows
  built cars, there would be no fewer than 5 steering wheels hidden about
  the cockpit, none of which would follow the same principles - but you'd
  be able to shift gears with your car stereo, a useful feature at that''}

An all-in-one approach appears essential in designing a useful PSP
application.  During the PSP course, students had many tools available to
them, ranging from calculators to spreadsheets to Java programs for size
estimation and line counting.  However, besides being a source of error, it
is irritating, distracting, and time-consuming to use six or seven tools
when it would be possible to seamlessly include every needed service within
one package.  An integrated approach could help to shift the user's focus
from the complexities of ``doing PSP'', to actually looking at the data.
When steps for the postmortem phase take two minutes, (as opposed to the
average postmortem time in this study -- about 90 minutes) %92.66 minutes
it seems more likely that a user would take the time to really look at the
results and think about the data.  This kind of approach could also allow
the user to see results of data analysis in many formats and give the user
access to raw data for further study.

Although Humphrey describes a manual approach to PSP in ``A Discipline for
Software Engineering'' \cite{Humphrey95} and ``Introduction to the Personal
Software Process'', \cite{Humphrey97} he also indicates that automation is
desirable.  For example, 
\begin{quote}
Tool support can make the methods described in
this book more efficient and easier to use.  Such standard aids as word
processors, spreadsheets, and statistical packages provide an adequate base 
initially, but ultimately CASE environments are needed that embody the PSP
methods in engineering workstations, in addition to all the other tools
generally available (p. 26) \cite{Humphrey95}.
\end{quote}
Also, 
\begin{quote}
Tools to assist in data gathering are feasible and could certainly
help.  They would probably not save a lot of time, but they could
significantly improve data accuracy and completeness... Once the data are
gathered and are in a database, many automatic analysis tools could assist
in estimating, planning, and progress reporting (p. 219) \cite{Humphrey95}.
\end{quote}

Moving away from automation, what are other ways to prevent analysis
errors?  Manual PSP could be improved by making some simple modifications
to the forms.  Many fields contain numbers that must be transferred to
other forms.  Often a value in a field must be added to the same field from
a different project to provide a to date value.  Students often correctly
transferred a value from the wrong field when doing these kind of
transfers.  These errors could be prevented by visually linking the field
being transferred from with the field being transferred to.  For example,
if {\it Program Size (LOC), Total} fields were printed as boxes surrounded
by a black line, and {\it Program Size (LOC), Total New and Changed} fields
were printed as shaded gray boxes, I believe it would cut down
substantially on the transfer errors for size and time estimation.

Finally, to cut down on problems with finding and interpreting PSP
instructions, it would be useful to have a PSP reference booklet for each
phase.  The booklets could contain samples of all the forms used in the
process and complete instructions for each one. They could also include
process scripts and definitions for key concepts. Obviously a lot of the
information would be duplicated from booklet to booklet, but only pertinent
information would be included, and instructions could be much better
ordered.


\section{Can all errors be found?} 

This case study uncovered 1539 errors made by people using PSP.  But were these all the 
errors actually made?  The following error classification scheme is the result of trying
to answer this question:

\begin{itemize}
\item {\bf Primary data field errors:} Occur in such fields such as start/stop
                              times, all defect log fields, and size measures.  
   \begin{itemize}
   \item {\bf Detectable:} Errors that are clearly present, despite being in primary data.
                          Examples include PSP phases without Time Recording Log entries or
                          missing dates in the Defect Recording Log
      \begin{itemize}
      \item Correct value is clear or unimportant.  When attempting to fix these errors,
                          the value is not significant (e.g. a Defect Recording Log date)
                          or can be reliably deduced from other data (e.g. a missing Time
                          Recording Log date for a phase that has a corresponding entry 
                          with a date in the Defect Recording Log).
      \item Correct value is unclear.  These errors can never be corrected with
                          complete confidence.  An attempt can be made to fix them using
                          a set of rules to provide consistency.
      \end{itemize}
   \item{\bf Hidden:}     Errors that could only have been detected by direct
                          observation of the person using PSP and subsequent 
                          comparison with the recorded data. 
      \begin{itemize}
      \item Missing values.  Primarily missing Time and Defect Recording Log entries.
      \item Fabricated data. Data values that do not reflect what actually happened. 
      \end{itemize}
   \end{itemize}
\item {\bf Calculated data field errors:} Can be fixed by re-doing a
                   calculation or PSP operation using correct primary data values.
\end{itemize}

Hidden errors, which are of special interest, could have several sources:
\begin{itemize}
    \item Missing data values of which the programmer is not aware. This includes
          defects not recorded because the programmer became completely
          absorbed in fixing a tricky bug.
    \item Inaccurate data values of which the programmer is not aware.  For example,
          a faulty {\it Start} value in a Time Recording Log entry.
    \item Data values created in an attempt to recover lost information or 
          information not recorded due to preoccupation with programming tasks, etc.
          For example, if a Time Recording Log was accidentally thrown away, the
          programmer might try to reconstruct it from memory.
    \item Willful recording (or non-recording) of inaccurate data due to outside pressures such
          as an employer performing evaluations based on a PSP measure or because of a
          class that requires the use of PSP from a person not committed to using PSP.
\end{itemize}

\section{Implications of these Results in Evaluating PSP Data}

\section{Should We Throw Out the PSP?} 

The results presented above show that the PSP method can lead to low data 
quality, and that this low data quality can lead to incorrect conclusions 
about individual and group performance.  However, these results do not imply  
that the PSP method is wholly unuseful.  On the contrary, student evaluation 
of the PSP method was uniformly positive, and even if certain numerical  
values are incorrect, the process still provides students with profound new 
insight into the software development process.  Instead, these 
results could be useful in motivating two kinds of improvements to the PSP  
process. 

\section{Personal Experiences With PSP}

\section{Conclusions/Future Directions} 
In conclusion, this thesis describes a case study of PSP 
to assess data quality issues. 
It has been shown that PSP users can make significant numbers 
of errors, and that these errors can make  
a significant impact upon measures of quality and 
productivity.  Analysis of these errors leads to a 
set of requirements for automated PSP support tools that 
should alleviate many of these problems.  The errors also 
lead to an analysis of PSP data from the standpoint of  
measurement dysfunction, and the problems this issue  
raises for data quality.  Future research could be
devoted to the empirical evaluation of these proposals 
to determine whether they do lead to improvement of  
data quality in the personal software process. 


\bibliography{/group/csdl/bib/psp} 
\bibliographystyle{plain}

\end{document}



% Chapter 1: Introduction
% Fill in implications section,  make better sentence
%   leading into the hypothesis, and better lead in to next section

% Chapter 2: Overview of PSP
% Fill in current use of PSP, improve bridge to technical section

% Chapter 3: Related works

% Chapter 4: Case Study

% Chapter 5: Tools
% Add in screen prints
% Show main screen
% Show part of PPS with only some fields updateable
% Show report for PSP tool

% Chapter 6: Results
% Do analysis by PSP phase
% Do analysis by errors per number of fields
% Add up amount of time spend in postmortem, FTR
% Show results of todate values that were not a problem

% Chapter 7: Conclusions


% At end:
% convert ``dollars'' to \$
% check on copyright for figures such as PSP waterfall, PSP forms


% Remember:  
% 1. passive voice
% 2. First, second


