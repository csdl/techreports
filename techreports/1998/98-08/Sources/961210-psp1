Path: news.Hawaii.Edu!news.uoregon.edu!ddsw1!news.mcs.net!www.nntp.primenet.com!nntp.primenet.com!feed1.news.erols.com!worldnet.att.net!uunet!in2.uu.net!204.191.213.61!ott.istar!istar.net!news.nstn.ca!news
From: tbushell@fox.nstn.ns.ca (Tom Bushell)
Newsgroups: comp.software-eng,comp.software.measurement
Subject: Re: PSP in school (was Re: Convincing managers to drop old, bad software)
Date: Tue, 10 Dec 1996 16:20:58 GMT
Organization: Telekinetics
Lines: 86
Message-ID: <32a98916.48689718@news.nstn.ca>
References: <55raq5$fbu@senator-bedfellow.MIT.EDU> <3283b093.171392199@news.nstn.ca> <32A06D8F.2E18@fwb.gulf.net> <589bhh$1lk@solaria.cc.gatech.edu>
NNTP-Posting-Host: ts1-11.win.istar.ca
X-Newsreader: Forte Agent .99e/32.227
Xref: news.Hawaii.Edu comp.software-eng:50390 comp.software.measurement:984

I'm a self employed consultant and contract developer, and have been
using PSP (in a fairly mutated form, I admit) for about 10 months now.
Have been keeping records diligently, but somehow never seem to find
time to analyze them statistically, which kind of defeats the purpose
of the exercise.

I _have_ found that just the mere act of recording every defect, even
a trivial syntax error, has a tremendous focusing effect.  I noticed
that there were certain things I routinely forgot to do, that I was
completely unaware of until I started taking notes.

Also made me realize that I really did spend about 50% of my time
fixing defects, just as the books said was typical of development done
at low levels of process maturity.  

Once I noticed this, I was able to show positive trends within the
first week or two of using the PSP.  I believe this is because I
deliberately compressed my process into very small cycles at first -
no more than two days between Summary Reports.

>At Georgia Tech, we're trying to implement PSP from the very beginning.
>In our introductory programming course, we have the students try PSP
>twice, and from then on it's voluntary on the rest of their programs.

What do you mean by "twice"?  Hard to chart a trend if you only have
two data points...

>Basically, the students record total design time, total coding times,
>attempted compilation times, defects injected, defects removed, and total
>debugging times. We're trying to let them have a baseline from which
>they can see that increases in design time reduce defects injected, and
>thus reduce the debugging time (where the majority of introductory
>students spend their time).

Cursory review of my data shows this trend.  As I recall, it took
about a month to become evident.


>We've had lots of debates on the merits of PSP, who should be using it, and
>when it should be introduced. Basically, the majority of our students are
>not convinced that there are any benefits to this process. 

The genius of the PSP is that the benefits become self evident.  If
you follow Humprey's approach closely, you should see things like
defect counts dropping, smaller proportion of time spent in test, etc.
What are your students expecting to see that they don't see?

>Also, there is
>the question of whether or not introductory students should be using this
>process (when they are struggling with compilation and design). 

I'd be inclined to agree with this.  I think you have to know the
basics of SW development before you can move to the higher level of
thinking about the process.

At the last contract I worked, there was a new hire who had just come
off a half credit university course on the PSP.  He had demonstrated
similar process improvements during the course as I had seen, and was
planning to continue. Sadly, his new employer was probably even worse
than average in terms of process maturity (and they had the defect
rates to prove it!), and I guess he couldn't buck the corporate
culture.  He wasn't using the PSP the last time we talked.

The paperwork can be daunting.  I started with the forms, then filled
them out online, then experimented with some shareware time tracking
utilities, and finally bit the bullet and wrote a simple Access app to
handle time and defect recording.  I wouldn't consider it if I had to
go back to manual system.

I also didn't follow the process evolution religously.  I've yet to do
any code sizing analysis, instead prefering to focus on making design
activities more efficient, and improving the effectivness of technical
reviews.

-Tom



----------------------------------------------------------
Tom Bushell           * Custom Software Development
Telekinetics            * Process Improvement Consulting
2653 Highway 202          * Technical Writing
RR#1, Elmsdale, NS
B0N 1M0
(902)632-2772         Email: tbushell@fox.nstn.ns.ca
----------------------------------------------------------

