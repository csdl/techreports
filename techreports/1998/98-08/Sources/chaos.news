From: insiguru@aol.com (Insiguru)
Newsgroups: comp.software-eng
Subject: Re:ISO 9000 and CMM usage in Software Development
Date: 8 Apr 1998 00:03:22 GMT
Lines: 93
Message-ID: <1998040800032201.UAA19767@ladder01.news.aol.com>
NNTP-Posting-Host: ladder01.news.aol.com
X-Admin: news@aol.com
Organization: AOL http://www.aol.com
Path: news.Hawaii.Edu!news.lava.net!coconut-wireless!news.flex.com!www.nntp.primenet.com!globalcenter0!news.primenet.com!nntp.primenet.com!newsfeed.direct.ca!portc01.blue.aol.com!audrey02.news.aol.com!not-for-mail

Frank Manning wrote

Why is the CMM ignored by "the masses"? (There are no significant
> differences between European and North American answers to this question)

John Hawkins wrote 

>snip 

> I believe upper management, in general, is short term
> bottom line oriented and the costs to change "the hacker; throw it out
> the door; let the customers debug it" culture is too high. Consider the
> Ford Pinto development approach. I do not belive that there is
> sufficient mass of hard evidence for most companies to change. Most
> people will not play "bet your job" to prove that using the CMM
> methodology will, in the long run (several years and projects later)
> produce better projects. 


First of all, lets try to identify the extent of the problem and provide some
hard evidence. A good place to start is the following. The Chaos Study from
Standish Group International reports that %16 ($40 Billion) of projects would
be considered successful, i.e., on budget, on time, and fully functional. 53%
($132.5 Billion) is considered challenged, i.e., over budget, delayed, and with
61% of original promised functionality. 31% ($77.5 Billion) was considered
impaired, i.e., canceled in development.  

Consider the challenged projects. Assume that the remaining 39% of promised
functionality was delivered in maintenance and that it cost five maintenance
dollars for every development dollar to deliver the requirements. Consider that
over 47% of maintenance effort goes to understanding the software to be
modified. When requirements are delivered in development instead of
maintenance, there are no source code to retrieve, analyze, understand, modify,
regression test, specially install and defects to easily introduce. One in four
changes introduces a defect. Consider that the installation of the change
request includes change control, tech support, operations, networking, and
other support. 

If  the estimating systems had forecasted costs at 217 billion, the challenged
category would not have existed. 100% of the requirements would have been
delivered in development on time and within budget. However, only 132.5 billion
was allocated and only 61% of the job was done. As a result, it is time to pay
the piper. Deliverance of the remaining 39% in maintenance costs (85 billion *
5) for a total of 425 billion dollars. 

The 425 billion plus 132.5 billion raised the delivery costs to 557 billion
dollars, an amount 2.56 times the project 217 billion required for complete
delivery in development. In other words, a development team that delivers 100%
of high quality requirements in development can develop 2.56  projects for the
same effort that it takes the study team to deliver 100% of user requirements
in development and maintenance. 

This is your staff shortage problem. You bring in people to staff a project and
it is managed so badly that in order to fix the system, the entire project team
becomes the maintenance team. By the time the rework is done, it is time to
address the natural changes and the new defects introduced by rework. From a
development standpoint, the team has become non reusable.  In the old days,
this phenomena was called the Programmer's Paradox or the Budget Black Hole.   
   

In my book, I emphasize the need to achieve total predictability. Given the
ability to consistently meet schedule, budget, quality, functionality, and
productivity requirements, project teams become reusable. The gist of the book
is to deliver more projects by  reducing maintenance waste. I emphasize an
integrated software management approach  that is designed to achieve total
predictability and not merely meet schedules. The enabling office is a flexible
Project Office.   

However, you don't always get the resources you need. Setting project output
performance objectives helps the users and developers make the tough choices. A
constant hierarchy of project output performance elements caused the above
problems. Sometime a system is needed so quickly and so badly, that we must be
willing to pay for the waste. At other times, it is better to avoid the waste
by meeting quality and functionality objectives at the expense of schedules. At
all times, in order to make these choices, you need to understand your
development environment. The maintenance to development cost ratio varies by
project but it helps in decision making. Barry Boehm once stated that a $75
instruction cost $4000 in maintenance. I sure that large client/server systems,
embedded systems, or avionics systems could fall in this category.

Disclaimers. 

Remember, I am using global data for extrapolation purposes based upon a study.
This may not pertain to your organization. It a matter of determining the
appropriateness of the global data to your environment. Only metrics can help
you do that.


Randy Mathis, Vice President & Consultant   
Information Architects
310-337-0065
Consultant


