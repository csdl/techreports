%%%%%%%%%%%%%%%%%%%%%%%%%%%% -*- Mode: Bibtex -*- %%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% csdl-trs.bib --   CSDL Technical Report Series
%% Author          : Philip Johnson
%% Created On      : Mon Nov 20 08:02:04 1995
%% Last Modified By: 
%% Last Modified On: Wed Sep 20 14:46:03 2006
%% RCS: $Id: csdl-trs.bib,v 1.31 2000/04/01 02:13:39 rbrewer Exp johnson $
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%   Copyright (C) 1995 Philip Johnson
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% 

@TECHREPORT{csdl2-03-07,
   AUTHOR = {Philip M. Johnson},
  institution =  "Department of Information and Computer Sciences,
		  University of Hawaii, Honolulu, Hawaii 96822",
   NUMBER = {{CSDL}-03-07},
   TITLE = {The {H}ackystat-{JPL} Configuration: Overview and Initial Results},
   CATEGORIES = {Hackystat},
   MONTH = {October},
   YEAR = 2003,
   URL = {http://csdl.ics.hawaii.edu/techreports/03-07/03-07.html},
   abstract = {		  
This report presents selected initial results from Hackystat-based
descriptive analyses
of Harvest workflow data gathered from the Mission Data System software
development project from January, 2003 to August, 2003.  We present the
motivation for this work, the methods used, examples of the analyses, and
questions raised by the results. Our major findings include: (a) workflow
transitions not documented in the "official" process; (b) significant
numbers of packages with unexpected transition
sequences; (c) cyclical levels of development "intensity" as
represented by levels of promotion/demotion; (d) a possible approach to
calculating the proportion of "new" scheduled work versus rework/unscheduled work
along with baseline values; and 
(e) a possible approach to calculating the distribution of package "ages" and days spent in the
various workflow states, along with potential issues with the representation of
"package age" based upon the current approach to package
promotion.

The report illustrates how our current approach to analysis can yield
descriptive perspectives on the MDS development process. It provides a first
step toward more prescriptive, analytic models of the MDS software development
process by providing insights into the potential uses and limitations of MDS
product and process data.
}
}


@InProceedings{csdl2-03-12,
  url =          {http://csdl.ics.hawaii.edu/techreports/03-12/03-12.pdf},
  categories = {Hackystat Publications-Conferences},
  author = 	 {Philip M. Johnson and Hongbing Kou and Joy M. Agustin and Qin Zhang and Aaron Kagawa and Takuya Yamashita},
  title = 	 {Practical automated process and product metric collection and analysis in a
classroom setting: Lessons learned from {Hackystat-UH}},
  booktitle =	 {Proceedings of the 2004 International Symposium on Empirical Software Engineering},
  year =	 {2004},
  address = 	 {Los Angeles, California},
  month = 	 {August},
  abstract = {
  Measurement definition, collection, and analysis is an essential
  component of high quality software engineering practice, and is thus an
  essential component of the software engineering curriculum.  However,
  providing students with practical experience with measurement in a
  classroom setting can be so time-consuming and intrusive that it's
  counter-productive---teaching students that software measurement is
  ``impractical'' for many software development contexts.  In this
  research, we designed and evaluated a very low-overhead approach to
  measurement collection and analysis using the Hackystat system with
  special features for classroom use. We deployed this system in two
  software engineering classes at the University of Hawaii during Fall,
  2003, and collected quantitative and qualitative data to evaluate the
  effectiveness of the approach.  Results indicate that the approach
  represents substantial progress toward practical, automated metrics
  collection and analysis, though issues relating to the complexity of
  installation and privacy of user data remain.
}
}


@Article{csdl2-04-11,
  author = 	 {Philip M. Johnson and Hongbing Kou and Michael G. Paulding and Qin Zhang and Aaron Kagawa and Takuya Yamashita},
  title = 	 {Improving Software Development Management through Software Project Telemetry},
  journal = 	 {{IEEE} Software},
  year = 	 {2005},
  categories =   {Hackystat Publications-Journals},
  month = 	 {August},
  url = {http://csdl.ics.hawaii.edu/techreports/04-11/04-11.pdf},
  abstract = {
Software project telemetry is a new approach to software project
management in which sensors are attached to development environment tools
to unobtrusively monitor the process and products of development. This
sensor data is abstracted into high-level perspectives on development
trends called Telemetry Reports, which provide project members with 
insights useful for local, in-process decision making.  This paper presents
the essential characteristics of software project telemetry, contrasts it
to other approaches such as predictive models based upon historical
software project data, describes a reference framework implementation of
software project telemetry called Hackystat, and presents our lessons
learned so far. 
}
}



@InProceedings{csdl2-04-22,
  author = 	 {Philip M. Johnson and Michael G. Paulding},
  title = 	 {Understanding {HPCS} development through automated process and product measurement with {H}ackystat},
  booktitle = 	 {Second Workshop on Productivity and Performance in High-End Computing (P-PHEC)},
  year = 	 {2005},
  categories =   {HPC Hackystat Publications-Workshops},
  month = 	 {February},
  url = {http://csdl.ics.hawaii.edu/techreports/04-22/04-22.pdf},
  abstract = {
The high performance computing (HPC) community is increasingly
aware that traditional low-level, execution-time measures for assessing
high-end computers, such as flops/second, are not adequate for
understanding the actual productivity of such systems. In response,
researchers and practitioners are exploring new measures and assessment
procedures that take a more wholistic approach to high performance
productivity. In this paper, we present an approach to understanding and
assessing development-time aspects of HPC productivity. It involves the use 
of Hackystat for automatic, non-intrusive collection and analysis of six
measures: Active Time, Most Active File,
Command Line Invocations, Parallel and Serial Lines of Code, Milestone
Test Success, and Performance. We illustrate the use and interpretation of 
these measures through a case study of small-scale HPC software development. 
Our results show that these measures provide useful insight into development-time 
productivity issues, and suggest promising additions to and enhancements of the
existing measures. 
}
}

@TECHREPORT{csdl2-05-09,
   AUTHOR = {Christoph Lofi},
  institution =  "Department of Software Engineering,
		  Fachbereich Informatik, 
                  Universitat Kaiserslautern, Germany",
   NUMBER = {{CSDL}-05-09},
   TITLE = {Continuous {GQM}: An automated framework for the Goal-Question-Metric paradigm},
   CATEGORIES = {Thesis-MS Hackystat},
  Type = {{M.S.} Thesis},
   MONTH = {August},
   YEAR = 2005,
   URL = {http://csdl.ics.hawaii.edu/techreports/05-09/05-09.pdf},
   abstract = {	
Measurement is an important aspect of Software Engineering as it is the
foundation of predictable and controllable software project
execution. Measurement is essential for assessing actual project progress,
establishing baselines and validating the effects of improvement or
controlling actions.  

The work performed in this thesis is based on Hackystat, a fully automated
measurement framework for software engineering processes and
products. Hackystat is designed to unobtrusively measure a wide range of
metrics relevant to software development and collect them in a centralized
data repository.  Unfortunately, it is not easy to interpret, analyze and
visualize the vast data collected by Hackystat in such way that it can
effectively be used for software project control.

A potential solution to that problem is to integrate Hackystat with the GQM
(Goal / Question / Metric) Paradigm, a popular approach for goal-oriented,
systematic definition of measurement programs for software-engineering
processes and products.  This integration should allow the goal-oriented
use of the metric data collected by Hackystat and increase it’s usefulness
for project control.  During the course of this work, this extension to
Hackystat which is later called hackyCGQM is implemented. As a result,
hackyCGQM enables Hackystat to be used as a Software Project Control Center
(SPCC) by providing purposeful high-level representations of the
measurement data.

Another interesting side-effect of the combination of Hackystat and
hackyCGQM is that this system is able to perform fully automated
measurement and analysis cycles. This leads to the development of cGQM, a
specialized method for fully automated, GQM based measurement programs.  As
a summary, hackyCGQM seeks to implement a completely automated GQMbased
measurement framework. This high degree of automation is made possible by
limiting the implemented measurement programs to metrics which can be
measured automatically, thus sacrificing the ability to use arbitrary
metrics.
}  
}

@InProceedings{csdl2-06-02,
  author = 	 {Hongbing Kou and Philip M. Johnson},
  title = 	 {Automated recognition of low-level process: A pilot validation study of {Z}orro for test-driven development},
  booktitle = 	 {Proceedings of the 2006 International Workshop on Software Process},
  year = 	 {2006},
  address =      {Shanghai, China},
  categories =   {Hackystat Publications-Workshops},
  month = 	 {May},
  url = {http://csdl.ics.hawaii.edu/techreports/06-02/06-02.pdf},
  abstract = {
Zorro is a system designed to automatically determine whether a developer
is complying with the Test-Driven Development (TDD) process.  Automated
recognition of TDD could benefit the software engineering community in a
variety of ways, from pedagogical aids to support the learning of
test-driven design, to support for more rigorous empirical studies on the
effectiveness of TDD in practice.  This paper presents the Zorro system and
the results of a pilot validation study, which shows that Zorro was able to
recognize test-driven design episodes correctly 89\% of the time. The
results also indicate ways to improve Zorro's classification accuracy
further, and provide evidence for the effectiveness of this approach to
low-level software process recognition.
}
}

@Book{Beck:03,
  author =       "Kent Beck", 
  title =        "{T}est-{D}riven {D}evelopment by {E}xample",
  publisher =    "Addison Wesley", 
  year =         "2003", 
  address =      "Massachusetts", 
  OPTseries =    "Addison Wesley Signature Series", 
  OPTisbn =      "0-321-14653-0" 
}

@Article{George:03,
  author =       "Boby George and Laurie Williams",
  title =        "{A}n {I}nitial {I}nvestigation of {T}est-{D}riven {D}evelopment 
                  in {I}ndustry", 
  journal =      "{ACM} {S}ympoium on {A}pplied {C}omputing",
  year =         "2003",
  volume =       "3",
  number =       "1",
  pages =        "23",
  howpublished = "\url{http://collaboration.csc.ncsu.edu/laurie/Papers/TDDpaperv8.pdf}"
}

@inproceedings{Maximilien:03,
  author    = "E. Michael Maximilien and Laurie Williams",
  title     = "{A}ccessing {T}est-{D}riven {D}evelopment at {IBM}", 
  booktitle = "Proceedings of the 25th International Conference in
               Software Engineering",
  publisher = "IEEE Computer Society",
  address   = "Washington, DC, USA",
  pages     = "564",
  year      = "2003",
  abstract =  "In a software development group of IBM Retail Store Solutions, we built a
non-trivial software system based on a stable standard specification using
a disciplined, rigorous unit testing and build approach based on the test-
driven development (TDD) practice. Using this practice, we reduced our
defect rate by about 50 percent compared to a similar system that was built
using an ad-hoc unit testing approach. The project completed on time with
minimal development productivity impact. Additionally, the suite of
automated unit test cases created via TDD is a reusable and extendable
asset that will continue to improve quality over the lifetime of the
software system. The test suite will be the basis for quality checks and
will serve as a quality contract between all members of the team."}



@Book{Mayrhauser90,
  author =	 {Anneliese von Mayrhauser},
  title = 	 {Software Engineering: Methods and Management},
  publisher = 	 {Academic Press},
  year = 	 {1990}
}

@Book{DeMarco82,
  author =	 {Tom DeMarco},
  title = 	 {Controlling Software Projects: Management, Measurement, and Evaluation},
  publisher = 	 {Yourdon Press},
  year = 	 {1990}
}



@Article{Fishman96,
  author = 	 {Charles Fishman},
  title = 	 {They Write the Right Stuff},
  journal = 	 {Fast Company},
  year = 	 {1996},
  volume =	 {6},
  month =	 {December}
}

