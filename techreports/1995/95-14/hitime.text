  (a) Maintaining versions of documents, membership directories, and so
      forth manually is a huge source of overhead.

  (b) Letting unrestricted public manipulation of this information could
      lead to spoofing: someone entering "John Waihee" as a member, etc.

  (c) A web server is the only reasonable *primary* *publication* mechanism.
      (we could use other things for "development" of documents, and we
      could take web documents and provide "secondary" publishing via fax,
      e-mail, etc.)

  (d) People should be able to collaborate both through web and e-mail;
      they have complimentary strengths and weaknesses.

The following architectural concept then occurred to me which deals with
(a)-(d).  For the time being, let's call it the "Central Agent/Mailbox"
(CA/M, pronounced "Cam" :-) architecture.  The basic idea is that *all*
"formal" communication is mediated through a mailbox (such as
hitime@sunset.mic.hawaii.edu), and that mailbox/account is "owned" and
manipulated by an Agent, (who we'll call CA/M).  Mail to CA/M is
semi-structured so it can read and react to it in a reasonable
fashion.  Here are some initial ideas for system interactions via the CA/M
architecture:

(a) HI-TIME directory maintenance:
   
    (1) User sees directory in web and wants to update or add new entry.
        User fills out web form.
        Associated script runs, which creates a structured e-mail request
          to hitime@sunset.
        CA/M reads it, realizes its a directory update, and does the following:
           (a) sends a copy to the "HiTime Censor"---a person who is
	       responsible for moderating and assessing legitimacy of such
	       updates.  That person can validate the update as much or as
	       little as they want.  
           (b) If CA/M doesn't get a reply from the censor within 24 hours,
	       then CA/M goes ahead and updates the page.  
           (c) CA/M sends a confirmation to the User noting the success or
	       failure of the update.
        This is nice because it implements the net equivalent of the "6
        second delay" in broadcasting, puts a human in the loop, but
        doesn't require the human to do anything but simply scan material
        and discard it if it's OK.

    (2) User wants to update the directory, but doesn't have a web page.
	In this case, the user can use conventional e-mail to compose a
	semi-structured message manually.  These semi-structured messages
	will be similar to the listserv language in spirit, though more
	forgiving in practice. 

    This form of "delayed broadcast with human screening" can be expanded
    to all sorts of other commentary posted to the net. 

(b) HI-TIME subscription, part 1:

    User can send a "subscription" request to CA/M.  It will then send (via
    e-mail by default) copies of whatever gets published (or,
    alternatively, just the URL if requested) to the subscriber.  That way
    users don't have to "poll" the server looking for new material; the
    agent will let them know about what's new.   User's can subscribe to
    individual topics or threads so that they can be informed only of
    changes of interest to them, and they can change their set of
    subscriptions at any time. 

(c) HI-TIME subscription, part 2:

    CA/M can send materials via more ways than simply e-mail.  It can
    create postscript of web pages and then fax the file to subscribers.  
    Also, there is a new facility called "EmacsTalk", developed by a blind
    computer scientist, that allows speech synthesis of emacs buffer
    contents.  I haven't looked at this yet but if offers the possibility
    of CA/M calling someone on the phone and *reading* an announcement to
    them!


That's where I've gotten to so far.  I need to define this "semi-structured
language", of course.  Also, I realized from my work yesterday that I have
almost no clue about how this web server would be structured.  What will
actually be in it?

Let me know what you think about this.

Philip
