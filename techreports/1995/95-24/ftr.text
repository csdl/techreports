Future of FTR
	Title:
		Reengineering Code Inspection: The Future of Formal Technical Review
	Introduction

		Despite many advances in automated  verification and validation, human review of software artifacts is still the most useful and important method for software quality improvement.  There are several reasons for the preeminance of software review:

			Upstream artifact review possible

			Review finds ‘deep’ problems

			Improves reviewer, as well as reviewed material

		Definition of formal technical review here.

		Starting in 1976, when Michael Fagan published his seminal article on Code Inspection [], this method (or closely related variants such as Tom Gilb’s Inspection []) has come to dominate the practice of software review.  Success stories for inspection fill the literature on software review:

			IBM data from Fagan

			HP data

		Despite the wealth of positive press, industry adoption of inspection is extremely low.  While no rigorous data is currently available, an informal USENET survey given recently found that ... Furthermore, traditional testing techniques do have some acknowledged advantages over human review:

			Regression test suites, once developed, are essentially “free” to run.  Most inspection studies study its cost effectiveness over the initial development phase alone. During maintenance,  where small changes may occur over wide portions of the system, a tremendous amount of re-inspection may be triggered.  While re-inspection costs the same as initial inspection, re-testing is free. 

			Testing is far superior to software reviewfor discovering interface defects or “ripple effects”, where a change to one part of the system results in a fault at some other “distant” location.  Software review, with its focus on a small amount of code, is notoriously bad at detecting these errors. 

		While Fagan’s Code Inspection or its close variants dominate the practice of formal technical review (to the point where many writers refer to any form of formal review as “inspection”), there are many alternatives to this style of software review...

		There are signs that the dominance of code inspection as the dominant paradigm for software review is coming to an end. 

			computer-mediated approaches

			problems with meetings.

			distributed organizations
