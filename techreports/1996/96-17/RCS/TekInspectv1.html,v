head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	96.12.04.00.58.21;	author cmoore;	state Exp;
branches;
next	;


desc
@@


1.1
log
@initial turnin
@
text
@<HTML>
<HEAD>
<TITLE>TekInspect/1 Software Requirements Specification Document Template</TITLE>
<!-- Created by: Cam Moore, 03-Dec-1996 -->

</HEAD>
<BODY>
<H1>TekInspect/1 Software Requirements Specification Document Template</H1>

This document contains the software requirements specification (SRS)
document for TekInspect/1.
<P>
<hr>
<P>


<H2>Introduction</H2>
<ul>
<p><li><B>Purpose of this document</B><br> 

This document describes the requirements for the TekInspect/1 system.  The
TekInspect/1 system is the first step toward automating the manual
TekInspect Formal Technical Review (FTR) method.  This document is intended to be
read and used by members of CSDL during the development of the system and
by Tektronix employees during the elicitation and evaluation of the
requirements.  This document may also be used to evaluate whether or not
the TekInspect/1 system can be applied to other organizations.


<p><li><B>Scope of this document</B><br>

Describes the scope of this requirements definition effort. 
Describes who was involved in the requirements elicitation effort.
<p>
This section also details any constraints that were placed 
upon the requirements elicitation process, such as 
schedules, costs, or people.

<p><li><B>Overview</B><br>
Provides a brief overview of the system defined as a result
of the requirements elicitation process.

<p><li><B>Organizational Context</B><br>

The Instrument Business Unit (IBU) of Tektronix's Measurement Business
Division (MBD) has agreed to use the TekInspect FTR method.  IBU produces
oscilloscopes and other measurement devices.  All of their products have
software that controls the functions of the device.  To improve
their software engineering, IBU has introduced the TekInspect FTR method.
The TekInspect FTR method is labor intensive for the Reviewer and the
Scribe.  Automating data entry for the Reviewer Data Sheet and the Scribe
Data Sheet should improve the efficiency of the TekInspect method.

<br>
<p>

Provides an overview of the business organization sponsoring the
development of this system. This overview should provide insight
into the organizational context relevant to the development of this 
project. Why is the organization interested? What does it intend
to get from this project?


</ul>

<H2>General Description</H2>
<ul>

<p><li><B>System Functionality</B><br>

Introduces the general functionality of the system. 

<p><li><B>Similar Systems</B><br>

Describes the relationship of this system with any other systems.
Specifies if this system is intended to be stand-alone, or else used as a
component of a larger system.  If the latter, this section discusses the
relationship of this system to the larger system.

<p><li><B>User Characteristics</B><br>

Describes the features of the user community, including their expected
expertise with software in general and the application domain in particular.  
<p>

<p><li><B>User Objectives</B><br>

This section describes the set of objectives and requirements for the
system from the user's perspective.  It may include a "wish list" of
desirable characteristics, along with more feasible solutions that are in
line with the business objectives.

</ul>


<H2>Operational Scenarios</H2>

This section should describe a set of scenarios that illustrate, from the
user's perspective, what will be experienced when utilizing the system
under various situations.

<p>
In the article Inquiry-Based Requirements Analysis (IEEE Software, March 1994), 
scenarios are defined as follows:
<p>
<blockquote>

In the broad sense, a scenario is simply a proposed specific use of the
system. More specifically, a scenario is a description of one or more
end-to-end transactions involving the required system and its environment.
Scenarios can be documented in different ways, depending up on the level of
detail needed.  The simplest form is a use case, which consists merely of a
short description with a number attached.  More detailed forms are called
scripts.  These are usually represented as tables or diagrams and involved
identifying an action and the agent (doer) of the action.  For this
reason, a script can also be called an action table.

<p>

Although scenarios are useful in acquiring and validating requirements, they 
are not themselves requirements, because the describe the system's behavior 
only in specific situations; a specification, on the other hand, describes what
the system should do in general.

</blockquote>

A sufficient number of scenarios should be provided such that the
end-to-end use of the system under normal, abnormal, and "interesting"
conditions is illustrated.

<H2>Functional Requirements</H2>

This section lists the functional requirements in ranked order.  Functional
requirements describes the possible effects of a software system, in other
words, <EM>what</EM> the system must accomplish.  Other kinds of
requirements (such as interface requirements, performance requirements, or
reliability requirements) describe <EM>how</EM> the system accomplishes its
functional requirements. Each functional requirement should be specified in
a format similar to the following:

<ul>
<p><li><B>Short, imperative sentence stating highest ranked functional requirement.</B><br>
<ol>
<p><li><B>Description</B><br> A full description of the requirement.
<p><li><B>Technical issues</B><br> Describes any design or implementation issues involved in satisfying this requirement.
<p><li><B>Risks</B><br>  Describes the circumstances under which this 
requirement might not able to be satisfied, and what actions can be taken to reduce
the probability of this occurrence. 
<p><li><B>Dependencies</B><br>  Describes interactions with other requirements. 
</ul>
<p><li> Next requirement...
</ol>


<H2>Interface Requirements</H2>

This section describes how the system interfaces with other software
systems and its users for input and output.

<ul>
<p><li><B>User Interface</B><br>
Describes how this system interfaces with the user. Should include 
screen shots, etc.


<p><li><B>API Interface</B><br>
Describes how this system interfaces with other tools.  Can cross
reference the relevant conceptual design classes listed below.

</ul>

<H2>Persistant Data Requirements</H2>

This section specifies the internal structure and interrelationships between any 
persistant data that is written or read by the system.  This can be
described as a set of persistant classes, and reference the relevant
conceptual design classes listed below.


<H2>Conceptual Design</H2>
This section presents a description of the classes and methods that will
be required to implement the system. It corresponds to 
the JavaDoc documentation for a conceptual design.




<H2>Preliminary Schedule</H2>

This section provides an initial version of the project plan, including the
major tasks to be accomplished, their interdependencies, and their
tentative start/stop dates. 

<p><hr>
</BODY>
</HTML>
@
